/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 * modify CJongs 030309.
 */
package com.aldorsolutions.dashboard.struts.action;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Locale;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionError;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;

import com.aldorassist.webfdms.model.LocaleDTO;
import com.aldorsolutions.dashboard.struts.form.DashboardLoginForm;
import com.aldorsolutions.webfdms.admin.user.bean.UserManagerBean;
import com.aldorsolutions.webfdms.admin.user.bean.UserPermissionsBean;
import com.aldorsolutions.webfdms.admin.user.dao.UserDAO;
import com.aldorsolutions.webfdms.admin.user.model.UserLocaleDTO;
import com.aldorsolutions.webfdms.admin.user.model.UserLocationDTO;
import com.aldorsolutions.webfdms.beans.DbLocation;
import com.aldorsolutions.webfdms.beans.DbUser;
import com.aldorsolutions.webfdms.beans.DbUserSession;
import com.aldorsolutions.webfdms.beans.FdmsDb;
import com.aldorsolutions.webfdms.beans.comparators.LocaleNameComparator;
import com.aldorsolutions.webfdms.beans.comparators.LocationNameComparator;
import com.aldorsolutions.webfdms.common.Constants;
import com.aldorsolutions.webfdms.company.bean.CompanyManagerBean;
import com.aldorsolutions.webfdms.company.model.CompanyDTO;
import com.aldorsolutions.webfdms.database.DatabaseTransaction;
import com.aldorsolutions.webfdms.database.PersistenceException;
import com.aldorsolutions.webfdms.security.bean.SecurityManagerBean;
import com.aldorsolutions.webfdms.util.SessionValueKeys;

/** 
 * MyEclipse Struts
 * Creation date: 04-17-2007
 * 
 * XDoclet definition:
 * @struts.action path="/dashboardLogin" name="DashboardLogin" input="/login.jsp" scope="request" validate="true"
 */
public class DashboardLoginAction extends Action {
	/*
	 * Generated Methods
	 */
	
	private Logger logger = Logger.getLogger(DashboardLoginAction.class.getName());

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		DashboardLoginForm dashboardLogin = (DashboardLoginForm) form;
		
		ActionForward forward = null;
    	forward = performLogon ( mapping, dashboardLogin, request, response );
    	
    	return ( forward );
		
	}
    
    private ActionForward performLogon ( ActionMapping mapping,
    		DashboardLoginForm pForm, HttpServletRequest request,
            HttpServletResponse response ) {
    	

        HttpSession session = request.getSession();
        DbUserSession user = null;
        
        // Validate the request parameters specified by the user
        ActionMessages errors = new ActionMessages();
        String username = pForm.getUsername();
        String password = pForm.getPassword();
        
        user = DbUser.findUserByUserName(username);
        
        if (user != null) {
			boolean validPassword = SecurityManagerBean.isValidPassword(password, user.getPassword());
        	
			if (validPassword == false) {
				user = null;
			}
			else
			{
				user.setLoggedIn(true);
			}
        	
        }
        
        if ( user == null ) {
        	errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.password.mismatch"));
        	saveErrors(request, errors);
        	return (new ActionForward(mapping.getInput()));
    	}
        
        if ( user.getCompanyID () > 0 ) {
        	CompanyManagerBean mbCompany = new CompanyManagerBean ();
            CompanyDTO dtoCompany = mbCompany.getCompany(user.getCompanyID());
            
            if ( dtoCompany != null ) {
            	
                 UserDAO userDao = new UserDAO();
            	 ArrayList <UserLocaleDTO> userLocales = userDao.getUserLocales(user.getId());
            	 ArrayList  <UserLocationDTO> userLocations = userDao.getUserLocations(user.getId()); 
            	 
            	if( userLocales.isEmpty() && userLocations.isEmpty() ) {     //user can login if he has locale and location to operate 	
            		errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.userinfo.require.locallocation"));
                    saveErrors(request, errors);
	            	
            	}
            	else {
            		logger.info("User logging into: " + dtoCompany.getName() );
	                session.setAttribute(SessionValueKeys.DB_COMPANY, dtoCompany);
	                
	                UserPermissionsBean permissions = new UserPermissionsBean (user, false, false);
	                
	               
	                user.setConfigID(dtoCompany.getConfigID());
	                
	                // Save our logged-in user in the session
	                session.setAttribute(SessionValueKeys.DB_USER, user);
	                session.setAttribute(SessionValueKeys.DB_PERMISSIONS, permissions);
	                
	                DatabaseTransaction t = null;
	                try {
		                t = (DatabaseTransaction)DatabaseTransaction.getTransaction(user);
		                setUserLocationMap ( t, user, session, errors );
	                }    
	                catch(PersistenceException pe) {
	                    logger.error("Persistence Exception in SecurityManagerBean updatePassword " + pe);
	                    errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.PersistenceException",pe.getCause()));
	                    saveErrors(request, errors);
	                } 
	        		catch(Exception pe) {
	                    logger.error("Exception in  SecurityManagerBean updatePassword ",  pe);
	                    errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.GeneralException",pe.getMessage()));
	                    saveErrors(request, errors);
	                }
	        		finally { 
	                	t.closeConnection();
	                }
            	}
                
            }
            else {
            	errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.login.companyInvalid"));
                saveErrors(request, errors);
            }

        }
        else {
        	errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.login.companyMissing"));
            saveErrors(request, errors);
        }
        
        if (user.getSecurityFdmsDashboard()== 0){
			errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.userinfo.nopermission"));
        	saveErrors(request, errors);
        }
        // Report any errors we have discovered back to the original form
        if (!errors.isEmpty()) {
            saveErrors(request, errors);
            return (new ActionForward(mapping.getInput()));
        }
        
        servlet.getServletContext().setAttribute(user.getUserName(),session);

        if (session.getAttribute(SessionValueKeys.DB_USER) !=null) {
            return mapping.findForward("MainPage");
        }   
        else {
            return mapping.findForward("dashboardLogin");
        }
    	
    }
    
   private void setUserLocationMap (DatabaseTransaction t, DbUserSession user, HttpSession session, ActionMessages errors) {
    	
    	UserManagerBean umb = new UserManagerBean();
        HashMap userLocationMap = umb.getUserLocations(new Integer(user.getId()).longValue());
        
        if (userLocationMap != null) {
            ArrayList userLocations = (ArrayList) userLocationMap.get("userLocations");
            
            FdmsDb.getInstance().getUserLocationNames(t, userLocations, user);
            
            ArrayList <LocaleDTO> locales = FdmsDb.getInstance().getLocalesForCompany(user.getDbLookup(), user.getCompanyID());
            
            String [] locationIds = umb.getUserLocationIds(user.getId());
            String [] localeIds = umb.getUserLocaleIds(user.getId());
            session.setAttribute(Constants.USER_LOCALE_IDS, localeIds);
            session.setAttribute(Constants.USER_LOCATION_IDS, locationIds);
            
            ArrayList <LocaleDTO> userLocales = new ArrayList <LocaleDTO> ();
            LocaleDTO localeSel = null;
            	
            for ( int i = 0; i < locales.size(); i++ ) {
            	LocaleDTO loc = locales.get(i);
            	int locID = loc.getLocaleID();
            	
            	for ( int x = 0; x < localeIds.length; x++ ) {
            		int localeID = Integer.parseInt(localeIds[x]);
            		
            		if ( locID == localeID ) {
            			userLocales.add(loc);
            		}
            		
            		if ( locID == user.getRegion() ) {
            			localeSel = loc; 
            		}
            	}
            }
            
    		if ( localeSel != null ) {
    			user.setLocalizedSpeedData(localeSel.isLocalizedSpeedData());
    			user.setLocaleCountry(localeSel.getCountry());
    			
    			Locale myLocale = new Locale("en", localeSel.getCountry());
    			
    			session.setAttribute( Constants.INTERNATIONAL_LOCALE, myLocale );
    		}
    		
            
            Collections.sort(userLocales, new LocaleNameComparator() ); 
            session.setAttribute(Constants.USER_LOCALES, userLocales);

            String dfltLocName;
            boolean defaultLocSet = true;
            String defaultLocationId = (String) userLocationMap.get("defaultLocation");
            if ((defaultLocationId == null) || (defaultLocationId.trim().equals(""))) {
                UserLocationDTO userLocationDto = (UserLocationDTO) userLocations.get(0);
                defaultLocationId = String.valueOf(userLocationDto.getLocationId());
                dfltLocName = userLocationDto.getName();
            }else {
            	defaultLocSet = false;
            }
            
            int dfltLocID = Integer.parseInt(defaultLocationId);
            
            boolean locIDFound = false;
                        
            DbLocation [] dbLocations = FdmsDb.getInstance().getLocationsForRegion(t, user.getRegion());
            
            ArrayList <DbLocation> userLocaleLocs = new ArrayList <DbLocation> ();

            for ( int i = 0; i < dbLocations.length; i++ ) {
            	DbLocation loc = dbLocations[i];
            	int locID = loc.getId();
            	
            	for ( int x = 0; x < locationIds.length; x++ ) {
            		int aLocID = Integer.parseInt(locationIds[x]);
            		
            		if ( aLocID == locID ) {
                    	userLocaleLocs.add(loc);
                    	
                    	if ( aLocID == dfltLocID ) {
                    		locIDFound = true;
                    	}
            		}
            	}
            	
            }
            
            if ( !locIDFound && (locationIds.length > 0) ) {
            	defaultLocationId = "-1";
            }
            
            Collections.sort(userLocaleLocs, new LocationNameComparator() ); 
            session.setAttribute(Constants.USER_LOCATIONS, userLocaleLocs);
            
            logger.debug("Location(s) found : " + userLocaleLocs.size());
            
            // set value = 0 to show active cases
            session.setAttribute(Constants.SHOW_ACTIVE_CASES, "0");
            session.setAttribute(Constants.SHOW_PRENEED_ONLY, "N");
                        
            logger.debug("Setting defaultLocationId : " + defaultLocationId);
            user.setLocationId(com.aldorsolutions.webfdms.util.FormatNumber.parseInteger(defaultLocationId));
//            if (!defaultLocSet){
//            	
//            }
            
            if (user.getLocationId() <= 0) {
                for ( int i = 0; i < dbLocations.length; i++ ) {
                	DbLocation loc = dbLocations[i];
                	int locationID = loc.getId();
                	int localeID = loc.getLocaleNumber();
                	if (user.getRegion() == localeID) {
                		user.setLocationId(locationID);
                		break;
                	}
                }
            }
            
            
            
            session.setAttribute(Constants.USER_START_INDEX, new Integer(1));            
        }          
	
    }  
    
    
}