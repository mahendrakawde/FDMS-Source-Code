/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 * CJongs
 */
package com.aldorsolutions.dashboard.struts.action.sms;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.apache.struts.action.ActionRedirect;
import org.apache.struts.util.LabelValueBean;

import com.aldorassist.webfdms.model.SMSSchedulingDTO;
import com.aldorassist.webfdms.model.SMSStoreProcDTO;
import com.aldorsolutions.dashboard.struts.form.sms.SMSTTVEditForm;
import com.aldorsolutions.webfdms.beans.DbUserSession;
import com.aldorsolutions.webfdms.company.bean.CompanyManagerBean;
import com.aldorsolutions.webfdms.company.model.CompanyDTO;
import com.aldorsolutions.webfdms.reporting.dao.SMSSchedulingDAO;
import com.aldorsolutions.webfdms.reporting.dao.SMSStoreProcDAO;
import com.aldorsolutions.webfdms.security.bean.SecurityManagerBean;
import com.aldorsolutions.webfdms.security.model.SecurityConfigDTO;
import com.aldorsolutions.webfdms.sms.SMSTTVRecipientDTO;
import com.aldorsolutions.webfdms.sms.dao.SMSTTVRecipientDAO;
import com.aldorsolutions.webfdms.util.DAO;
import com.aldorsolutions.webfdms.util.FormatDate;
import com.aldorsolutions.webfdms.util.SessionValueKeys;

/** 
 * MyEclipse Struts
 * Creation date: 06-25-2007
 * 
 * XDoclet definition:
 * @struts.action path="/acctEditVendors" name="acctEditVendorsForm" input="/acct/acctEditVendors.jsp" scope="request" validate="true"
 * @struts.action-forward name="listVendors" path="/acct/acctListVendors.jsp" redirect="true"
 */
public class SMSTTVSaveEditAction extends Action {
	
	private Logger logger = Logger.getLogger(SMSTTVSaveEditAction.class.getName());
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm actionForm, HttpServletRequest request,
			HttpServletResponse response) {
		
		
		SMSTTVEditForm form = (SMSTTVEditForm) actionForm;
		HttpSession session = request.getSession();
		DbUserSession user = (DbUserSession) session.getAttribute(SessionValueKeys.DB_USER);
		ActionErrors errors = new ActionErrors();
		
		if ("Add".compareToIgnoreCase(form.getDirection())==0){
			ArrayList <SMSSchedulingDTO> smsRecs = new ArrayList <SMSSchedulingDTO>();
	        setForm(form, smsRecs,errors,user);
	        
	        SMSSchedulingDAO smsScheDAo = new SMSSchedulingDAO(DAO.DB_FDMSCOMMON);
	        SMSSchedulingDTO smsScheduling = new SMSSchedulingDTO();
	        
	        try {
	        	for (SMSSchedulingDTO smsRec: smsRecs){
	        		smsScheDAo.addSMSCommonScheduling(smsRec);
	        	}
			} catch (SQLException e) {
	
				e.printStackTrace();
	
			} catch (Exception e) {
	
				e.printStackTrace();
	
			}
		}
		ActionRedirect forward = new ActionRedirect (mapping.findForward("ShowSMSTTVEdit")); 	
		forward.addParameter("Type", form.getSendType() );
		return ( forward );
	}	
 
	private void setForm(SMSTTVEditForm form, ArrayList<SMSSchedulingDTO> smsRecs, ActionErrors errors, DbUserSession user) {
		//set the default
		
		boolean available = false;
		//check the number of available
		available = isAvailable(form,user);
		//end available.
		
		if (available) {
		String greeting = "";
		
			if (form.getRunDate() != null) {
				SMSTTVRecipientDTO defaultRecipient = new SMSTTVRecipientDTO();
				SecurityManagerBean smBean = new SecurityManagerBean();
			    SecurityConfigDTO security = smBean.getSecurityConfig(user.getCompanyID());
			    SMSTTVRecipientDTO recipient = null;
			        if (form.getSendType().compareToIgnoreCase("sms")==0) {
			        	if(security.getSmsAreaCode().length()==3 && security.getSmsPhone().length()==7 
			        			&& security.getSmsFirstname().length() > 0 && security.getSmsLastname().length() > 0){
			        		recipient = new SMSTTVRecipientDTO();
			        		recipient.setFirstname(security.getSmsFirstname());
			        		recipient.setLastname(security.getSmsLastname());
			        		recipient.setAreacode(security.getSmsAreaCode());
			        		recipient.setPhone(security.getSmsPhone());
			        		greeting = security.getSmsGreeting();
			        	}
			        }else {
			        	if(security.getTtvAreaCode().length()==3 && security.getTtvPhone().length()==7 
			        			&& security.getTtvFirstname().length() > 0 && security.getTtvLastname().length() > 0){
			        		recipient = new SMSTTVRecipientDTO();
			        		recipient.setFirstname(security.getTtvFirstname());
			        		recipient.setLastname(security.getTtvLastname());
			        		recipient.setAreacode(security.getTtvAreaCode());
			        		recipient.setPhone(security.getTtvPhone());
			        		greeting = security.getSmsGreeting();
			        	}
			        }
			  if (form.getSendToDefaultRecipient()==1) {   
			     if(recipient != null){
			    	 Date rDate = new Date();
						try {
							rDate = FormatDate.convertToDate(form.getRunDate());
						} catch (Exception e) {
							errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(
									"error.date.rundate"));
						}
						Date eDate = new Date();
						try {
							eDate = FormatDate.convertToDate(form.getEndDate());
						} catch (Exception e) {
							errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(
									"error.date.enddate"));
						}	
						if (form.getRecurrenceChoice() != null){
							if (form.getRecurrenceChoice().compareToIgnoreCase("number")==0) {
								for(int i = 0; i <form.getRepeatNumber(); i++){	
									SMSSchedulingDTO smsRec = new SMSSchedulingDTO(); 
									setSmsRec( smsRec, rDate, recipient, form, errors, user, greeting );
								       if (form.getRepeatType().compareToIgnoreCase("D")==0){
								        	rDate = FormatDate.addToDate(rDate, 1, 0);
								        }
								        else if (form.getRepeatType().compareToIgnoreCase("W")==0){
								        	rDate = FormatDate.addToDate(rDate, 7, 0);
								        }
								        else if (form.getRepeatType().compareToIgnoreCase("M")==0) {
								        	rDate = FormatDate.addToDate(rDate, 0, 1);
								        }
									smsRecs.add(smsRec);
								}
							} else if (form.getRecurrenceChoice().compareToIgnoreCase("date")==0) {
								while (rDate.before(eDate) || rDate.equals(eDate)){
									SMSSchedulingDTO smsRec = new SMSSchedulingDTO(); 
									setSmsRec( smsRec, rDate, recipient, form, errors, user, greeting );
								       if (form.getRepeatType().compareToIgnoreCase("D")==0){
								        	rDate = FormatDate.addToDate(rDate, 1, 0);
								        }
								        else if (form.getRepeatType().compareToIgnoreCase("W")==0){
								        	rDate = FormatDate.addToDate(rDate, 7, 0);
								        }
								        else if (form.getRepeatType().compareToIgnoreCase("M")==0) {
								        	rDate = FormatDate.addToDate(rDate, 0, 1);
								        }
									smsRecs.add(smsRec);
								}
							}
							
							
							
							
						}
			     }
			  }
			}

		
		//set the recipient
		if (form.getRunDate() != null) {
		  if (form.getRecipientId() != null){	  		
			for (int j=0; j< form.getRecipientId().length; j++) {
				Date rDate = new Date();
				try {
					rDate = FormatDate.convertToDate(form.getRunDate());
				} catch (Exception e) {
					errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(
							"error.date.rundate"));
				}
				Date eDate = new Date();
				try {
					eDate = FormatDate.convertToDate(form.getEndDate());
				} catch (Exception e) {
					errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(
							"error.date.enddate"));
				}
				if (form.getRecurrenceChoice() != null){
					if (form.getRecurrenceChoice().compareToIgnoreCase("number")==0) {
						for(int i = 0; i <form.getRepeatNumber(); i++){
							SMSTTVRecipientDAO recipientDao = new SMSTTVRecipientDAO(user);
							SMSTTVRecipientDTO recipient = new SMSTTVRecipientDTO();
							recipient = recipientDao.getSMSTTVRecipient(form.getRecipientId()[j]);
							SMSSchedulingDTO smsRec = new SMSSchedulingDTO(); 
							setSmsRec( smsRec, rDate, recipient, form, errors, user, greeting );
						       if (form.getRepeatType().compareToIgnoreCase("D")==0){
						        	rDate = FormatDate.addToDate(rDate, 1, 0);
						        }
						        else if (form.getRepeatType().compareToIgnoreCase("W")==0){
						        	rDate = FormatDate.addToDate(rDate, 7, 0);
						        }
						        else if (form.getRepeatType().compareToIgnoreCase("M")==0) {
						        	rDate = FormatDate.addToDate(rDate, 0, 1);
						        }
					        smsRecs.add(smsRec);
						} 
					}else if (form.getRecurrenceChoice().compareToIgnoreCase("date")==0) {
						while (rDate.before(eDate) || rDate.equals(eDate)){
							SMSTTVRecipientDAO recipientDao = new SMSTTVRecipientDAO(user);
							SMSTTVRecipientDTO recipient = new SMSTTVRecipientDTO();
							recipient = recipientDao.getSMSTTVRecipient(form.getRecipientId()[j]);
							SMSSchedulingDTO smsRec = new SMSSchedulingDTO(); 
							setSmsRec( smsRec, rDate, recipient, form, errors, user, greeting );
						       if (form.getRepeatType().compareToIgnoreCase("D")==0){
						        	rDate = FormatDate.addToDate(rDate, 1, 0);
						        }
						        else if (form.getRepeatType().compareToIgnoreCase("W")==0){
						        	rDate = FormatDate.addToDate(rDate, 7, 0);
						        }
						        else if (form.getRepeatType().compareToIgnoreCase("M")==0) {
						        	rDate = FormatDate.addToDate(rDate, 0, 1);
						        }
					        smsRecs.add(smsRec);	
						}
					}
			} //end each repeat
		  } // end each recipient
		} //end null recipient
		}
		}//end available
	}
	
	private boolean isAvailable(SMSTTVEditForm form, DbUserSession user){
		boolean isAvailable = false;
		int numberAvalilable = 0;
		int numberWillUsed = 0;
		SecurityManagerBean smBean = new SecurityManagerBean();
        SecurityConfigDTO security = smBean.getSecurityConfig(user.getCompanyID());
        if (form.getSendType().compareToIgnoreCase("sms")==0) {
        	numberAvalilable = security.getSmsNumberOfTime();
        }else {
        	numberAvalilable = security.getTtvNumberOfTime();
        }
        
        int recurrenceNumber = 0;
        if (form.getRecurrenceChoice() != null){
	        if (form.getRecurrenceChoice().compareToIgnoreCase("number")==0) {
	        	recurrenceNumber = form.getRepeatNumber();
	        }
	        else if (form.getRecurrenceChoice().compareToIgnoreCase("date")==0) {
	        	Date rDate = new Date();
				try {
					rDate = FormatDate.convertToDate(form.getRunDate());
				} catch (Exception e) {
					
				}
				Date eDate = new Date();
				try {
					eDate = FormatDate.convertToDate(form.getEndDate());
				} catch (Exception e) {
					
				}
	        	while (rDate.before(eDate) || rDate.equals(eDate)){
	        		recurrenceNumber++;
	        		if (form.getRepeatType().compareToIgnoreCase("D")==0){
			        	rDate = FormatDate.addToDate(rDate, 1, 0);
			        }
			        else if (form.getRepeatType().compareToIgnoreCase("W")==0){
			        	rDate = FormatDate.addToDate(rDate, 7, 0);
			        }
			        else if (form.getRepeatType().compareToIgnoreCase("M")==0) {
			        	rDate = FormatDate.addToDate(rDate, 0, 1);
			        }
	        	}
	        }
        }
        
        if (form.getRunDate() != null) {
        	 if (form.getSendToDefaultRecipient()==1){
        		 SMSTTVRecipientDTO recipient = null;
			        if (form.getSendType().compareToIgnoreCase("sms")==0) {
			        	if(security.getSmsAreaCode().length()==3 && security.getSmsPhone().length()==7 
			        			&& security.getSmsFirstname().length() > 0 && security.getSmsLastname().length() > 0){
			        		recipient = new SMSTTVRecipientDTO();
			        	}
			        }else {
			        	if(security.getTtvAreaCode().length()==3 && security.getTtvPhone().length()==7 
			        			&& security.getTtvFirstname().length() > 0 && security.getTtvLastname().length() > 0){
			        		recipient = new SMSTTVRecipientDTO();
			        	}
			        }
			        if(recipient != null){
			        	numberWillUsed = numberWillUsed + recurrenceNumber;
			        }
        	 }
        	 if (form.getRecipientId() != null){
        		 numberWillUsed = numberWillUsed + (recurrenceNumber*(form.getRecipientId().length ));
        	 }
        }
        if (numberAvalilable >= numberWillUsed){
        	isAvailable = true;
        	int number = numberAvalilable - numberWillUsed;
        	if (form.getSendType().compareToIgnoreCase("sms")==0) {
        		
        		security.setSmsNumberOfTime(number);
        	}else {
        		security.setTtvNumberOfTime(number);
        	}
        	smBean.updateSecurityConfig(security, 0);
        }
		return isAvailable;
	}
	
	private void setSmsRec(SMSSchedulingDTO smsRec,Date rDate,SMSTTVRecipientDTO recipient,SMSTTVEditForm form,ActionErrors errors,DbUserSession user, String greeting ){
		smsRec.setLocaleId(0);
		smsRec.setLocationId(form.getLocationID());			
		try {
			smsRec.setRunDate(new java.sql.Date(rDate.getTime()));
		} catch (Exception e) {
			errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(
					"error.date.runDate"));
		}
		
//		smsRec.setFromDate(form.getFromDate());
//		smsRec.setToDate(form.getToDate());
		smsRec.setRunTimeHH(form.getHH());
		smsRec.setRunTimeMM(0);
		
		smsRec.setSendType(form.getSendType().toUpperCase());
		
		smsRec.setRepeatNumber(form.getRepeatNumber());
		long createdTimestamp = System.currentTimeMillis();
		
		smsRec.setDatetime(createdTimestamp);
		smsRec.setStartDateTime(createdTimestamp);
//		smsRec.setStopDateTime(createdTimestamp);
//		smsRec.setSqlScript(form.getSmsID());
		smsRec.setStartMessage(greeting + " " + form.getStartMessage());
		smsRec.setEndMessage(form.getEndMessage());
		smsRec.setStatus("Q");
		smsRec.setRunType("S");
		smsRec.setUserId(0);
		smsRec.setSentMessage("");
        smsRec.setSMSSqlId(form.getSmsID());

		smsRec.setFirstname(recipient.getFirstname());
		smsRec.setLastname(recipient.getLastname());
		smsRec.setCountryCode("1");
		smsRec.setAreaCode(recipient.getAreacode());
		smsRec.setPhone(recipient.getPhone());

		smsRec.setCompanyId(user.getCompanyID());
		CompanyManagerBean cmBean = new CompanyManagerBean();
        CompanyDTO company = cmBean.getCompany(user.getCompanyID());
        if (company != null) {  
        	smsRec.setDataURL(company.getDataURL());
        	smsRec.setDbLookup(company.getDbLookup());
        	smsRec.setCompanyName(company.getName());
        }
        else {
        	smsRec.setDataURL("");
        	smsRec.setDbLookup("");
        	smsRec.setCompanyName("");
        }

        smsRec.setRepeatType(form.getRepeatType());
        if (form.getRepeatType().compareToIgnoreCase("D")==0){
        	rDate = FormatDate.addToDate(rDate, 1, 0);
        }
        else if (form.getRepeatType().compareToIgnoreCase("W")==0){
        	rDate = FormatDate.addToDate(rDate, 7, 0);
        }
        else if (form.getRepeatType().compareToIgnoreCase("M")==0) {
        	rDate = FormatDate.addToDate(rDate, 0, 1);
        }
	}
	
}