/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 * CJongs
 */
package com.aldorsolutions.dashboard.struts.action.report;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Timer;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.Action;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;

import com.aldorassist.webfdms.model.LocaleDTO;
import com.aldorassist.webfdms.model.ReportSchedulingDTO;
import com.aldorsolutions.dashboard.struts.form.MainForm;
import com.aldorsolutions.dashboard.struts.form.acct.AcctLocationEditForm;
import com.aldorsolutions.dashboard.struts.form.report.ReportForm;
import com.aldorsolutions.dashboard.utils.CrystalReportManagerBean;
import com.aldorsolutions.webfdms.admin.user.bean.UserManagerBean;
import com.aldorsolutions.webfdms.admin.user.model.UserLocationDTO;
import com.aldorsolutions.webfdms.beans.DbApAccount;
import com.aldorsolutions.webfdms.beans.DbFormsAvailable;
import com.aldorsolutions.webfdms.beans.DbLocation;
import com.aldorsolutions.webfdms.beans.DbUser;
import com.aldorsolutions.webfdms.beans.DbUserSession;
import com.aldorsolutions.webfdms.beans.FdmsDb;
import com.aldorsolutions.webfdms.beans.comparators.LocaleNameComparator;
import com.aldorsolutions.webfdms.beans.comparators.LocationNameComparator;
import com.aldorsolutions.webfdms.beans.display.CheckListBean;
import com.aldorsolutions.webfdms.common.Constants;
import com.aldorsolutions.webfdms.company.bean.CompanyManagerBean;
import com.aldorsolutions.webfdms.company.model.CompanyDTO;
import com.aldorsolutions.webfdms.database.DatabaseTransaction;
import com.aldorsolutions.webfdms.database.PersistenceException;
import com.aldorsolutions.webfdms.locale.bean.LocaleManagerBean;
import com.aldorsolutions.webfdms.reporting.ReportGenerator;
import com.aldorsolutions.webfdms.reporting.SMSGenerator;
import com.aldorsolutions.webfdms.reporting.SMSSchedulerTask;
import com.aldorsolutions.webfdms.reporting.crystal.model.CrystalReportCustomColDTO;
import com.aldorsolutions.webfdms.reporting.dao.ReportSchedulingDAO;
import com.aldorsolutions.webfdms.reporting.dao.ReportSchedulingrealtimeDAO;
import com.aldorsolutions.webfdms.util.CrystalReportManagerBeanScheduling;
import com.aldorsolutions.webfdms.util.ExportReport;
import com.aldorsolutions.webfdms.util.FormatDate;
import com.aldorsolutions.webfdms.util.FormatNumber;
import com.aldorsolutions.webfdms.util.FormatString;
import com.aldorsolutions.webfdms.util.OptionsList;
import com.aldorsolutions.webfdms.util.SessionValueKeys;
import com.aldorsolutions.webfdms.util.UtilSingleton;

/**
 * MyEclipse Struts Creation date: 04-17-2007
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 * @struts.action-forward name="failed" path="/login.jsp"
 * @struts.action-forward name="success" path="/main.jsp"
 */

public class PrintReportAction extends Action {
	/*
	 * Generated Methods
	 */
	private ArrayList formErrors;
	private Logger logger = Logger.getLogger(PrintReportAction.class.getName());

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws javax.servlet.ServletException, java.io.IOException {

		HttpSession session = request.getSession();
		DbUserSession user = (DbUserSession) session
				.getAttribute(SessionValueKeys.DB_USER);
		ReportForm reportForm = (ReportForm) form;
		ActionMessages errors = new ActionMessages();

		// ArrayList <CheckListBean> checkURL = new ArrayList <CheckListBean>();
		// session.setAttribute("checkURL", checkURL);

		String requestType = reportForm.getRequestType();
		if (requestType == null) {
			requestType = "";
		}
		String pageName = "";
		reportForm.setReportURL(pageName);
		setReport(reportForm, user, session, errors, request);

		if (reportForm.getListType() == null) {
			reportForm.setListType(request.getParameter("all"));
		} else {
			reportForm.setListType(reportForm.getListType());
		}

		if (requestType.compareToIgnoreCase("changeLocale") == 0) {
			changeLocale(reportForm, user, session, errors, request);
			// changeCategory(reportForm, user, session, errors, request);
			return (mapping.findForward("localeChange"));
		} else if (requestType.compareToIgnoreCase("changeLocation") == 0) {
			// changeCategory(reportForm, user, session, errors, request);
			return (mapping.findForward("localeChange"));
		} else if (requestType.compareToIgnoreCase("changeCategory") == 0) {
			// changeCategory(reportForm, user, session, errors, request);
			return (mapping.findForward("localeChange"));
		} else {

			// ArrayList <OptionsList> reports = new ArrayList<OptionsList>();
			// reports.add( new OptionsList( "0" ,"--Select--"));
			// request.setAttribute("reports",reports);
		}

		if (requestType.compareToIgnoreCase("print") == 0) {

//			Timer smsTimer = new Timer("SMSThread", true);
//			CompanyManagerBean cmBean = new CompanyManagerBean();
//			CompanyDTO company = cmBean.getCompany(user.getCompanyID());
//			smsTimer.schedule(new SMSGenerator(company,1), 0l);
			
         			
			ReportSchedulingDTO reportScheduling = new ReportSchedulingDTO();
			setReportScheduling(reportForm,reportScheduling,errors,user);
			reportScheduling.setReportType(ReportSchedulingDTO.REPORT_TYPE_REALTIME);
			reportScheduling.setStatus("Q");
			ReportSchedulingDAO reportScheDAo = new ReportSchedulingDAO(user);
			try {
				reportScheDAo.addReportScheduling(reportScheduling);
			} catch (Exception e) {
				
			}
			
			
			String crystalFlag = UtilSingleton.getInstance().getProperty(
					user.getConfigID(), "CrystalServer.useReportingService");
			

			if (crystalFlag != null && "true".equals(crystalFlag)) {
				CompanyManagerBean cmBean = new CompanyManagerBean();
				CompanyDTO company = cmBean.getCompany(user.getCompanyID());
				runNow(reportScheduling,company);
				
			}
			
			reportForm.setFromDate(FormatDate.getCurrentDateFormatedMMDDYYYY());
			reportForm.setToDate(FormatDate.getCurrentDateFormatedMMDDYYYY());
			reportForm.setUserLocaleId("0");
			reportForm.setUserLocationId("0");
			reportForm.setCategory("0");

		}else	if (requestType.compareToIgnoreCase("schedule") == 0) {
			
			ReportSchedulingDTO reportScheduling = new ReportSchedulingDTO();
			setReportScheduling(reportForm,reportScheduling,errors,user);
			
			int repeatNumber = 0;
			try {
				repeatNumber = FormatNumber.parseInteger(reportForm.getRepeatNumber());
			} catch (Exception e) {
				//
			}
			String fromDate = getFromDate(reportForm,errors);
			java.util.Date fDate = FormatDate.convertToDateYYMMDD(fromDate);
			String toDate = getToDate(reportForm,errors);
			java.util.Date tDate = FormatDate.convertToDateYYMMDD(toDate);
			Date rDate = new Date();
			try {
				rDate = FormatDate.convertToDate(reportForm.getRunDate());
			} catch (Exception e) {
				errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(
						"error.date.rundate"));
				formErrors.add("runDate");
			}
			
			ReportSchedulingDAO reportScheDAo = new ReportSchedulingDAO(user);
			
			if (repeatNumber > 0) { // do more than 1 time.
				
				boolean scheduleNow = true;
				Timer timer = new Timer(true);
				
				for(int i =0; i< repeatNumber; i++) {
					try {
//						ReportSchedulingDTO aSchedule = new ReportSchedulingDTO();
//						copyObj(reportScheduling,aSchedule);
						reportScheDAo.addReportScheduling(reportScheduling);
						if(scheduleNow){
							Calendar date = Calendar.getInstance();
							date.setTime((java.util.Date) reportScheduling.getRunDate());
							//date.add(Calendar.MINUTE, 5);
							//set runtime. (CDT)
							date.set(Calendar.HOUR_OF_DAY, reportScheduling.getRunTimeHH()); //0-23
							
							date.set(Calendar.MINUTE, reportScheduling.getRunTimeMM());
							if(date.getTimeInMillis()<=System.currentTimeMillis()){
								CompanyManagerBean cmBean = new CompanyManagerBean();
								CompanyDTO company = cmBean.getCompany(user.getCompanyID());
								runNow(reportScheduling, company);
							}else{
								scheduleNow=false;
							}
						}
						//setSchedule(timer, aSchedule, user);
						ReportSchedulingDTO aSchedule = new ReportSchedulingDTO();
						copyObj(reportScheduling,aSchedule);
						reportScheduling = aSchedule;
					} catch (Exception e) {
						
					}
					
					String strFDate = FormatDate.convertDateToMMDDYYYY(fDate);
					String strTDate = FormatDate.convertDateToMMDDYYYY(tDate);
					String strRDate = FormatDate.convertDateToMMDDYYYY(rDate);
					int field = -1;
					if (reportForm.getRepeatType().compareToIgnoreCase("D") == 0) {
						field = 1;
						
					} else if (reportForm.getRepeatType().compareToIgnoreCase("W") == 0) {
						field = 7;
						
					} else if (reportForm.getRepeatType().compareToIgnoreCase("M") == 0) {
						field = 0;
					} 
					if(field>-1){
						strRDate = FormatDate.addToDateMMDDYYYY(strRDate, field, (field == 0? 1: 0));
						strFDate = FormatDate.addToDateMMDDYYYY(strFDate, field, (field == 0? 1: 0));
						strTDate = FormatDate.addToDateMMDDYYYY(strTDate, field, (field == 0? 1: 0));
						rDate = FormatDate.convertMMDDYYYYToDateYYMMDD(strRDate);
						fDate = FormatDate.convertMMDDYYYYToDateYYMMDD(strFDate);
						tDate = FormatDate.convertMMDDYYYYToDateYYMMDD(strTDate);
						reportScheduling.setRunDate(new java.sql.Date(rDate.getTime()));
						reportScheduling.setFromDate(new java.sql.Date(fDate.getTime()));
						reportScheduling.setToDate(new java.sql.Date(tDate.getTime()));
					}
				}
			}
			else { // do only one time
				try {
					reportScheDAo.addReportScheduling(reportScheduling);
					Calendar date = Calendar.getInstance();
					date.setTime((java.util.Date) reportScheduling.getRunDate());
					//date.add(Calendar.MINUTE, 5);
					//set runtime. (CDT)
					date.set(Calendar.HOUR_OF_DAY, reportScheduling.getRunTimeHH()); //0-23
					
					date.set(Calendar.MINUTE, reportScheduling.getRunTimeMM());
					if(date.getTimeInMillis()<=System.currentTimeMillis()){
						CompanyManagerBean cmBean = new CompanyManagerBean();
						CompanyDTO company = cmBean.getCompany(user.getCompanyID());
						runNow(reportScheduling, company);
					}
					//setSchedule( null, reportScheduling,  user);
				} catch (Exception e) {
					
				}
				
			}
			
		}
		// we comment it out because we don't want it to do the pupup but let the user look at the printed report list.
		//reportForm.setReportURL(pageName);
		return (mapping.findForward("localeChange"));

	}
	
	private void copyObj(ReportSchedulingDTO reportScheduling,
			ReportSchedulingDTO schedule) {
		schedule.setSchedulingID(reportScheduling.getSchedulingID());
		schedule.setFormID(reportScheduling.getFormID());
		schedule.setLocale(reportScheduling.getLocale());
		schedule.setLocation(reportScheduling.getLocation());
		schedule.setFromDate(reportScheduling.getFromDate());
		schedule.setToDate(reportScheduling.getToDate());
		schedule.setRunDate(reportScheduling.getRunDate());
		schedule.setEmailTo(reportScheduling.getEmailTo());
		schedule.setEmailCC(reportScheduling.getEmailCC());
		schedule.setRepeatType(reportScheduling.getRepeatType());
		schedule.setRepeatNumber(reportScheduling.getRepeatNumber());
		schedule.setDatetime(reportScheduling.getDatetime());
		schedule.setReportName(reportScheduling.getReportName());
		schedule.setStatus(reportScheduling.getStatus());
		schedule.setReportType(reportScheduling.getReportType());
		schedule.setRunTimeHH(reportScheduling.getRunTimeHH());
		schedule.setRunTimeMM(reportScheduling.getRunTimeMM());
		schedule.setUserId(reportScheduling.getUserId());
		//schedule.setStopDatetime(reportScheduling.getStopDatetime());
	}

	private void setReportScheduling(ReportForm reportForm,
			ReportSchedulingDTO reportScheduling, ActionMessages errors, DbUserSession user) {
		int formID = 0;
		try {
			formID = FormatNumber.parseInteger(reportForm.getSelectReport());
		} catch (Exception e) {
			//
		}
		
// for only locale/location		
		// Get selected location
		String location = null;
		try {
			location = reportForm.getUserLocationId();
		} catch (Exception e) {
			//
		}
		// Get selected location
		String locale = null;
		try {
			locale = reportForm.getUserLocaleId();
		} catch (Exception e) {
			//
		}
		
		// for this array version we don't need.
//		String strLocale = null;
//		String strLocation = null;
//		if (Constants.GLOBAL_LOCALE_STRING.equals(reportForm.getType())) { // for all locales
//			strLocale = "ALL";
//			strLocation = "ALL";	
//			
//		} else if (Constants.GLOBAL_LOCATION_STRING.equals(reportForm.getType())) { // for specific locales
//			String[] localeIds = reportForm.getLocaleIds();
//			strLocale = "[";
//			for (int i = 0; i < localeIds.length; i++) {
//				if (strLocale.length()> 1){
//	        		strLocale += ",";
//				}
//	        	strLocale = strLocale+localeIds[i];
//			}
//			 strLocale = strLocale+"]";
//			 strLocation = "ALL";
//		} 
//		else { //for specific locations.
//			strLocale="ALL";
//			String[] locationIds = reportForm.getLocaleIds();
//			strLocation="[";
//			for (int i = 0; i < locationIds.length; i++) {
//				if (strLocation.length()> 1){
//					strLocation += ",";
//				}
//				strLocation = strLocation+locationIds[i];
//			}
//			strLocation = strLocation+"]";
//		}
		// end for this version
		
		
		
		
		String repeatType = "N";
		int repeatNumber = 0;
		
		reportScheduling.setFormID(formID);
		reportScheduling.setUserId(user.getId());
		// for only one locale version
		reportScheduling.setLocale(locale);
		reportScheduling.setLocation(location);
		//end
		
		//for this locals/locations
//		reportScheduling.setLocale(strLocale);
//		reportScheduling.setLocation(strLocation);
		// end version
		
		String fromDate = getFromDate(reportForm,errors);
		java.util.Date fDate = FormatDate.convertToDateYYMMDD(fromDate);
		
		
		try {
			reportScheduling.setFromDate(new java.sql.Date(fDate.getTime()));
		} catch (Exception e) {
			errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(
					"error.date.fromdate"));
			formErrors.add("fromDate");
		}
		
		String toDate = getToDate(reportForm,errors);
		java.util.Date tDate = FormatDate.convertToDateYYMMDD(toDate);
		try {
			reportScheduling.setToDate(new java.sql.Date(tDate.getTime()));
		} catch (Exception e) {
			errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(
					"error.date.todate"));
			formErrors.add("toDate");
		}
		
		Date rDate = new Date();
		
		try {
			reportScheduling.setRunDate(new java.sql.Date(rDate.getTime()));
		} catch (Exception e) {
			errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(
					"error.date.todate"));
			formErrors.add("toDate");
		}
		
		int runHH = reportForm.getHH();
		reportScheduling.setRunTimeHH(runHH);
		int runMM = reportForm.getMM();
		reportScheduling.setRunTimeMM(runMM);
		

		reportScheduling.setRepeatType(repeatType);
		reportScheduling.setRepeatNumber(repeatNumber);
		long createdTimestamp = System.currentTimeMillis();
		reportScheduling.setDatetime(createdTimestamp);
		
		
		String emailTo = "";
		reportScheduling.setEmailTo(emailTo);
		String emailCC = "";
		reportScheduling.setEmailCC(emailCC);
		
		reportScheduling.setStatus("");
		reportScheduling.setReportName("");
		
		String requestType = reportForm.getRequestType();
		if (requestType == null) {
			requestType = "";
		}
		if (requestType.compareToIgnoreCase("schedule") == 0) {
			repeatType = reportForm.getRepeatType();
			repeatNumber = 0;
			try {
				repeatNumber = FormatNumber.parseInteger(reportForm.getRepeatNumber());
			} catch (Exception e) {
				//
			}
			reportScheduling.setRepeatType(repeatType);
			
			try {
				rDate = FormatDate.convertToDate(reportForm.getRunDate());
			} catch (Exception e) {
				errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(
						"error.date.rundate"));
				formErrors.add("runDate");
			}
			
			
			try {
				reportScheduling.setRunDate(new java.sql.Date(rDate.getTime()));
			} catch (Exception e) {
				errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(
						"error.date.runDate"));
				formErrors.add("runDate");
			}
			
			reportScheduling.setRepeatType(repeatType);
			reportScheduling.setRepeatNumber(repeatNumber);
			createdTimestamp = System.currentTimeMillis();
			reportScheduling.setDatetime(createdTimestamp);
			reportScheduling.setReportName("");
			emailTo = "";
			emailTo = reportForm.getRecipientsTo().replace(':', ';');
			emailTo = emailTo.replace(' ', ';');
			emailTo = emailTo.replace(',', ';');
			reportScheduling.setEmailTo(emailTo);
			emailCC = "";
			emailCC = reportForm.getRecipientsCC().replace(':', ';');
			emailCC = emailCC.replace(' ', ';');
			emailCC = emailCC.replace(',', ';');
			reportScheduling.setEmailCC(emailCC);
			reportScheduling.setStatus("Q");
			reportScheduling.setReportType(ReportSchedulingDTO.REPORT_TYPE_SCHEDULING);
			
		}
		
		
	}

	private void setSchedule(Timer timer, ReportSchedulingDTO aScheduling, DbUserSession user) {
		if(timer==null){
			timer = new Timer(true);
		}

		Calendar date = Calendar.getInstance();
		date.setTime((java.util.Date) aScheduling.getRunDate());
		//date.add(Calendar.MINUTE, 5);
		//set runtime. (CDT)
		date.set(Calendar.HOUR_OF_DAY, aScheduling.getRunTimeHH()); //0-23
		date.set(Calendar.MINUTE, aScheduling.getRunTimeMM()); //0-59

		
		CompanyManagerBean cmBean = new CompanyManagerBean();
		CompanyDTO company = cmBean.getCompany(user.getCompanyID());
		timer.schedule(new ReportGenerator(company,aScheduling.getSchedulingID()), date.getTime());
		
	}
	
	private void runNow(ReportSchedulingDTO aScheduling, CompanyDTO company){
		logger.info("PrintReportAction runNow for company: " + company.getName() + " scheduleId: " + aScheduling.getSchedulingID());
		Timer timer = new Timer(true);
		timer.schedule(new ReportGenerator(company,aScheduling.getSchedulingID()), 0l);
	}

	private String getFromDate(ReportForm reportForm, ActionMessages errors){
		String fromDate = null;
		if (reportForm.getListType().compareToIgnoreCase("R") == 0 || reportForm.getListType().compareToIgnoreCase("S") == 0) {

			// Get From Date
			try {
				fromDate = FormatDate.convertToDateYYYYMMDD(reportForm
						.getFromDate());
			} catch (Exception e) {
				errors.add(ActionMessages.GLOBAL_MESSAGE,
						new ActionMessage("error.date.fromdate"));

				formErrors.add("fromDate");
			}

			
		} else if (reportForm.getListType().compareToIgnoreCase("weekly") == 0) {
			try {

				fromDate = FormatDate.convertToDateMMDDYYYY(FormatDate
						.getCurrentDateFormatedMMDDYYYY());
				

				fromDate = FormatDate.addToDateMMDDYYYY(fromDate, -8, 0);
				

				fromDate = FormatDate.convertUnformattedMDYtoYMD(fromDate);
				

			} catch (Exception e) {
				errors.add(ActionMessages.GLOBAL_MESSAGE,
						new ActionMessage("error.date.fromdate"));
				formErrors.add("toDate");
			}

		} else if (reportForm.getListType().compareToIgnoreCase("monthly") == 0) {
			try {

				fromDate = FormatDate.convertToDateMMDDYYYY(FormatDate
						.getCurrentDateFormatedMMDDYYYY());
				

				fromDate = FormatDate.addToDateMMDDYYYY(fromDate, 0, -1);
				

				fromDate = FormatDate.convertUnformattedMDYtoYMD(fromDate);
				

			} catch (Exception e) {
				errors.add(ActionMessages.GLOBAL_MESSAGE,
						new ActionMessage("error.date.fromdate"));
				formErrors.add("toDate");
			}
		}
		return fromDate;
		
	}
	
	private String getToDate(ReportForm reportForm, ActionMessages errors){
		
		String toDate = null;
		if (reportForm.getListType().compareToIgnoreCase("R") == 0 || reportForm.getListType().compareToIgnoreCase("S") == 0) {

			// Get To Date
			try {
				toDate = FormatDate.convertToDateYYYYMMDD(reportForm
						.getToDate());
			} catch (Exception e) {
				errors.add(ActionMessages.GLOBAL_MESSAGE,
						new ActionMessage("error.date.fromdate"));
				formErrors.add("toDate");
			}
		} else if (reportForm.getListType().compareToIgnoreCase("weekly") == 0) {
			try {

				
				toDate = FormatDate.convertToDateMMDDYYYY(FormatDate
						.getCurrentDateFormatedMMDDYYYY());

				
				toDate = FormatDate.addToDateMMDDYYYY(toDate, -1, 0);

				
				toDate = FormatDate.convertUnformattedMDYtoYMD(toDate);

			} catch (Exception e) {
				errors.add(ActionMessages.GLOBAL_MESSAGE,
						new ActionMessage("error.date.fromdate"));
				formErrors.add("toDate");
			}

		} else if (reportForm.getListType().compareToIgnoreCase("monthly") == 0) {
			try {

				
				toDate = FormatDate.convertToDateMMDDYYYY(FormatDate
						.getCurrentDateFormatedMMDDYYYY());

				
				toDate = FormatDate.addToDateMMDDYYYY(toDate, -1, 0);

				
				toDate = FormatDate.convertUnformattedMDYtoYMD(toDate);

			} catch (Exception e) {
				errors.add(ActionMessages.GLOBAL_MESSAGE,
						new ActionMessage("error.date.fromdate"));
				formErrors.add("toDate");
			}
		}
		return toDate;
	}
	
	private void changeLocation(ReportForm form, DbUserSession sessionUser) {

		logger.debug("Updating userDefaultLocation : "
				+ form.getUserLocationId());
		sessionUser.setLocationId(FormatNumber.parseInteger(form
				.getUserLocationId()));

	}

	private void changeLocale(ReportForm form, DbUserSession sessionUser,
			HttpSession session, ActionMessages errors,
			HttpServletRequest request) {

		ArrayList userLocales = (ArrayList) session
				.getAttribute(Constants.USER_LOCALES);

		if (userLocales != null) {

			DatabaseTransaction t = null;
			DatabaseTransaction trans = null;

			try {
				trans = (DatabaseTransaction) DatabaseTransaction
						.getTransaction(sessionUser);

				DbUser user = (DbUser) sessionUser;


				LocaleManagerBean lmb = new LocaleManagerBean(user);
				LocaleDTO locale = lmb.getLocale(Long.parseLong(form
						.getUserLocaleId()));


				ArrayList<DbLocation> userLocaleLocs = new ArrayList<DbLocation>();
				if (form.getUserLocaleId().compareToIgnoreCase("0") == 0) {
					// do nothing since the report will print for all locales
				} else {
					String[] locationIds = (String[]) session
							.getAttribute(Constants.USER_LOCATION_IDS);
					DbLocation[] dbLocations = FdmsDb.getInstance()
							.getLocationsForRegion(trans,
									Integer.parseInt(form.getUserLocaleId()));
					if (dbLocations != null) {
						for (int i = 0; i < dbLocations.length; i++) {
							DbLocation loc = dbLocations[i];
							int locID = loc.getId();

							for (int x = 0; x < locationIds.length; x++) {
								int aLocID = Integer.parseInt(locationIds[x]);

								if (aLocID == locID) {
									userLocaleLocs.add(loc);
								}
							}

						}
					}

				}
				session.setAttribute(Constants.USER_LOCATIONS, userLocaleLocs);
				form.setUserLocationId(String.valueOf(0));
				// t.save();

			} catch (PersistenceException ex) {
				errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(
						"error.internal"));
				saveErrors(request, errors);
				logger
						.error(
								"Persistence Exception in PrintReportAction.do Perform. ",
								ex);
			} catch (Exception ex) {
				errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(
						"error.internal"));
				saveErrors(request, errors);
				logger.error("Exception in PrintReportAction.do Perform. ", ex);
			} finally {
			}

		} else {
			logger.debug("Unable to find USER_LOCALES in session");
		}

	}


	private void setReport(ReportForm form, DbUserSession sessionUser,
			HttpSession session, ActionMessages errors,
			HttpServletRequest request) {
		ArrayList<OptionsList> reports = new ArrayList<OptionsList>();
		DatabaseTransaction t = null;
		try {
			t = (DatabaseTransaction) DatabaseTransaction
					.getTransaction(sessionUser);
			com.aldorsolutions.webfdms.beans.DbFormsAvailable[] list = FdmsDb
					.getInstance().getFormsAvailableForLocale(t, 0, 18);
			for (int i = 0; i < list.length; i++) {
				reports.add(new OptionsList(Integer.toString(list[i]
						.getFormId()), list[i].getDescription()));
			}
			request.setAttribute("reports", reports);
		} catch (PersistenceException ex) {
			errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(
					"error.internal"));
			saveErrors(request, errors);
			logger.error(
					"Persistence Exception in PrintReportAction.do Perform. ",
					ex);

		} finally {
			if (t != null)
				t.closeConnection();
		}

	}

	private ArrayList getCustomValues(ReportForm form,
			HttpServletRequest request) {

		String category = FormatString.blankNull(form.getCategory());
		String selectItemCategory = FormatString.blankNull(form.getCategory());
		ArrayList customValues = new ArrayList();

		if ("inventory".equalsIgnoreCase(category)) {
			if (selectItemCategory.length() > 0)
				customValues.add(new CrystalReportCustomColDTO("prodline",
						selectItemCategory));
		}

		return customValues;
	}

}