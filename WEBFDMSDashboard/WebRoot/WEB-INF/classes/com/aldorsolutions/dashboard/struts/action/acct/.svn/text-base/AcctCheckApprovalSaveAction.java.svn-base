/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.aldorsolutions.dashboard.struts.action.acct;

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Calendar;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionError;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.aldorassist.webfdms.dao.InvoiceDAO;
import com.aldorassist.webfdms.delegate.LocationManager;
import com.aldorassist.webfdms.model.InvoiceDTO;
import com.aldorsolutions.dashboard.struts.form.acct.AcctCheckApprovalEditForm;
import com.aldorsolutions.webfdms.beans.DbApAccount;
import com.aldorsolutions.webfdms.beans.DbApDistribution;
import com.aldorsolutions.webfdms.beans.DbApDistributionHistory;
import com.aldorsolutions.webfdms.beans.DbApMaster;
import com.aldorsolutions.webfdms.beans.DbApVendor;
import com.aldorsolutions.webfdms.beans.DbBankAccount;
import com.aldorsolutions.webfdms.beans.DbInvoice;
import com.aldorsolutions.webfdms.beans.DbLocation;
import com.aldorsolutions.webfdms.beans.DbUserSession;
import com.aldorsolutions.webfdms.beans.FdmsDb;
import com.aldorsolutions.webfdms.checkwriter.dao.BankAccountDAO;
import com.aldorsolutions.webfdms.checkwriter.model.ApMasterDTO;
import com.aldorsolutions.webfdms.checkwriter.model.BankAccountDTO;
import com.aldorsolutions.webfdms.database.DatabaseTransaction;
import com.aldorsolutions.webfdms.util.FormatNumber;
import com.aldorsolutions.webfdms.util.SessionValueKeys;

/**
 * MyEclipse Struts Creation date: 04-30-2007
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/acctCheckApprovalEdit" name="acctCheckApprovalEditForm"
 *                input="/acct/checkApprovalEdit.jsp" scope="request"
 *                validate="true"
 */
public class AcctCheckApprovalSaveAction extends Action {
	Logger logger = Logger.getLogger(AcctCheckApprovalSaveAction.class);
	
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		AcctCheckApprovalEditForm checkForm = (AcctCheckApprovalEditForm) form;
//		ActionErrors errors = new ActionErrors();

		HttpSession session = request.getSession();
		DbUserSession user = (DbUserSession) session.getAttribute(SessionValueKeys.DB_USER);
		
		DatabaseTransaction t =null;

		

		//ApMasterDAO apDao = new ApMasterDAO(user);
		//ApMasterDTO checkDTO = apDao.getApMaster(checkForm.getMasterID());

		try {
			t = (DatabaseTransaction)DatabaseTransaction.getTransaction(user);
			int apMasterID = (int) checkForm.getMasterID();
			DbApMaster apMaster = null;
	        apMaster 		= FdmsDb.getInstance().getApCheck(t, apMasterID);
	        DbApVendor vendor = null;
	        DbApAccount account = null;			
			
			if ( checkForm.isPriorApproval() == false ) {
				
			
				apMaster.setApprovalStatus(checkForm.getApprovalStatus());
				if ( apMaster.getApprovalStatus() == ApMasterDTO.APPROVAL_STATUS_APPROVED ) {
					
					apMaster.setApprovedBy(user.getId());
					apMaster.setApprovedTmstmp(new Timestamp(Calendar.getInstance().getTimeInMillis()) );
					
					String subject = "FDMS Dashboard Check Approval";
					String endLine = "\r\n";
					StringBuffer appURL = request.getRequestURL();
					String viewDashboard = appURL.substring(0, appURL.indexOf("/dashboard")) + "/webfdms/";
											
					String message = "Check " + apMaster.getCheckNumber() + " has been approved Approved." + 
							endLine + endLine + viewDashboard + endLine + endLine +
							"    Check Number: " +  apMaster.getCheckNumber() + endLine +
							"      Check Date: " +  checkForm.getCheckDate() + endLine +
							"    Check Amount: " +  checkForm.getCheckAmount() + endLine + endLine +
							"           Payee: " +  checkForm.getPayee() + endLine +
							"   Location Name: " +  checkForm.getLocationName() + endLine +
							"Location Address: " +  checkForm.getLocationAddr() + endLine +
							"   Location City: " +  checkForm.getLocationCitySt() + endLine +
							"            Memo: " +  checkForm.getMemo() + endLine +
							"       Signature: " +  checkForm.getSignature() + endLine;
					
					LocationManager locMgr = new LocationManager();
					//locMgr.sendLocationEmails(user, checkDTO.getLocationID(), subject, message);
					

					locMgr.sendLocationEmailsByInvoiceStatus(user, apMaster.getLocationID(), subject, message.toString(),"A");
	
				} else if ( apMaster.getApprovalStatus() == ApMasterDTO.APPROVAL_STATUS_REJECTED ){
					
					// start to do the reverse for history.
		            vendor = FdmsDb.getInstance().getApVendor(t, apMaster.getVendorID());
	            	
		      		DbApDistributionHistory expenseHistory = new DbApDistributionHistory();
		      		expenseHistory.setNew();
		      		expenseHistory.setApMasterID(apMaster.getId());
		      		//expenseHistory.setApAccountNumber(String.valueOf(vendor.getDefaultAcct()));
		      		
			    	DbApAccount anAccount = FdmsDb.getInstance().getApAccount(t, vendor.getDefaultAcctID());

			    	if (anAccount == null) {
			    		expenseHistory.setApAccountNumber("");
			    	}else {
			    		expenseHistory.setApAccountNumber(anAccount.getAccountNumber() );
			    	}
		      		
		      		
		      		expenseHistory.setDiscountAmount(0);
		      		expenseHistory.setType(DbApDistributionHistory.CHECK);
		      		expenseHistory.setMemo(apMaster.getMemo());
		      		expenseHistory.setAmount((apMaster.getInvoiceTotal()- apMaster.getDiscountAmount())*(-1));
		      		t.addPersistent(expenseHistory);
		      		
		      		if (apMaster.getDiscountAmount()> 0) {
		      			expenseHistory = new DbApDistributionHistory();
			      		expenseHistory.setNew();
			      		expenseHistory.setApMasterID(apMaster.getId());
				    	expenseHistory.setApAccountNumber("40090");
			      		expenseHistory.setDiscountAmount(0);
			      		expenseHistory.setType(DbApDistributionHistory.CHECK);
			      		expenseHistory.setMemo("Discount");
			      		expenseHistory.setAmount(apMaster.getDiscountAmount()*(-1));
			      		t.addPersistent(expenseHistory);
		      		}
		      		
	        		DbApDistribution[] expenses = com.aldorsolutions.webfdms.beans.FdmsDb.getInstance().getDistributions(t, apMaster.getId());
	        		DbApDistributionHistory expenseHistoryItem = null;
	        		for (DbApDistribution expense : expenses) {
	        			account = FdmsDb.getInstance().getApAccount(t, expense.getAccountID());

	        			expenseHistoryItem = new DbApDistributionHistory();
	        			expenseHistoryItem.setNew();
	        			expenseHistoryItem.setApMasterID(apMaster.getId());
	        			expenseHistoryItem.setApAccountNumber(account.getAccountNumber());
	        			expenseHistoryItem.setDiscountAmount(0);
	        			expenseHistoryItem.setType(DbApDistributionHistory.CHECK_ITEM);
	        			expenseHistoryItem.setMemo(expense.getMemo());
	        			expenseHistoryItem.setAmount(expense.getAmount()*(-1));
	        			t.addPersistent(expenseHistoryItem);
	        		}
	        		
	        		

	        		InvoiceDAO invoiceDao = new InvoiceDAO(user);
	        		ArrayList <InvoiceDTO> invoicesList = new  ArrayList <InvoiceDTO>();
	        		invoicesList = invoiceDao.getInvoicesByMasterID(String.valueOf(apMaster.getId()));
	        		for(InvoiceDTO apInvoicesForCheckDTO : invoicesList) {
	        			DbInvoice dbInvoice = FdmsDb.getInstance().getInvoice(t,apInvoicesForCheckDTO.getInvoiceID());
	        			dbInvoice.setCheckCreated(true);
						dbInvoice.setInvoicePaid(false);
	        			dbInvoice.setInvoiceStatus(InvoiceDTO.INVOICE_VOID);
	        			t.addPersistent(dbInvoice);
	        		}        		
	        		
	        		
	        		
	        		apMaster.remove();	
	        		
	        		int locationID = 0;
	                locationID = apMaster.getLocationID() ;
	        		 DbLocation aloc = FdmsDb.getInstance().getLocation(t, locationID);
	                 int checkamount = apMaster.getInvoiceTotal()-apMaster.getDiscountAmount();
	                 aloc.setCashBalance(    aloc.getCashBalance() + checkamount);
	                 
	                 t.addPersistent(aloc);
	        		
	               //update the bank account
	     			BankAccountDAO bankDao = new BankAccountDAO(user);
	     			BankAccountDTO bankDto = new BankAccountDTO();
	     			bankDto = bankDao.getBankAccountByLocationId(locationID);
	     			
	     			if (bankDto != null) {
		     			DbBankAccount bankAccount = FdmsDb.getInstance().getBankAccount(t, bankDto.getBankAccountId());
		                int bankBalance = bankAccount.getBalance();
		                bankBalance = (bankBalance - apMaster.getDiscountAmount());
		     			bankAccount.setBalance(bankBalance);
		     			t.addPersistent(bankAccount);
	     			}
	                 
					
				} //end void
				else {
					
				}
				
// i comment it out			
//			apDao.updateApMaster(checkDTO);
			t.addPersistent(apMaster);
			t.save();
		} //end if
		}catch (Exception e) {
			logger.error("Error : ", e);
		} finally {
            if (t != null) {
                try {
                    t.closeConnection();
                    t = null;
                }  catch (Exception e) {
                    logger.error("Error in closeConnection() : ", e);
                }
            }
		}

		return (mapping.findForward("checkList"));
}// end execute
}// end class