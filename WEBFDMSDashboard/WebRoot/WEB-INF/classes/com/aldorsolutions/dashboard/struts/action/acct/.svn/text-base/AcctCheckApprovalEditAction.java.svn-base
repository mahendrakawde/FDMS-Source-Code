/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.aldorsolutions.dashboard.struts.action.acct;

import java.sql.Timestamp;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;

import com.aldorassist.webfdms.dao.LocationDAO;
import com.aldorassist.webfdms.model.LocationDTO;
import com.aldorsolutions.dashboard.struts.form.acct.AcctCheckApprovalEditForm;
import com.aldorsolutions.webfdms.admin.user.model.UserDTO;
import com.aldorsolutions.webfdms.beans.DbApVendor;
import com.aldorsolutions.webfdms.beans.DbCase;
import com.aldorsolutions.webfdms.beans.DbUserSession;
import com.aldorsolutions.webfdms.beans.FdmsDb;
import com.aldorsolutions.webfdms.checkwriter.dao.ApMasterDAO;
import com.aldorsolutions.webfdms.checkwriter.model.ApMasterDTO;
import com.aldorsolutions.webfdms.database.DatabaseTransaction;
import com.aldorsolutions.webfdms.util.FormatCurrency;
import com.aldorsolutions.webfdms.util.FormatDate;
import com.aldorsolutions.webfdms.util.SessionValueKeys;

/**
 * MyEclipse Struts Creation date: 04-30-2007
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/acctCheckApprovalEdit" name="acctCheckApprovalEditForm"
 *                input="/acct/checkApprovalEdit.jsp" scope="request"
 *                validate="true"
 */
public class AcctCheckApprovalEditAction extends Action {
	Logger logger = Logger.getLogger(AcctCheckApprovalEditAction.class);
	
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		AcctCheckApprovalEditForm checkForm = (AcctCheckApprovalEditForm) form;
		ActionErrors errors = new ActionErrors();

		String masterIDStr = request.getParameter("masterID");
		long masterID = -1;

		if (masterIDStr != null) {
			try {
				masterID = Long.parseLong(masterIDStr);
			} catch (NumberFormatException nfe) {

			}
		}

		if (masterID <= 0) {
			errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.acct.checknumber.missing"));
			saveMessages(request, errors);
			return (mapping.findForward("checkList"));
		}

		HttpSession session = request.getSession();
		DbUserSession user = (DbUserSession) session.getAttribute(SessionValueKeys.DB_USER);

		ApMasterDAO apDao = new ApMasterDAO(user);
		ApMasterDTO checkDTO = apDao.getApMaster(masterID);
		DatabaseTransaction t = null;
		DbCase theCase = null;

		try {
			t = new DatabaseTransaction(user);
			long netInvoice;
			netInvoice = checkDTO.getInvoiceTotal() - checkDTO.getDiscountAmount(); 
			
			//String checkAmountStr = FormatCurrency.toCurrency(checkDTO.getInvoiceTotal());
			String checkAmountStr = FormatCurrency.toCurrency(netInvoice);
			double checkAmount = FormatCurrency.convertToCurrencyDbl(checkAmountStr);
			
			String check1099AmountStr = FormatCurrency.toCurrency( checkDTO.getCheck1099Amount() );
			double check1099Amount = FormatCurrency.convertToCurrencyDbl(check1099AmountStr);
			
			
			//long dollars = (int) (checkDTO.getInvoiceTotal()/100);
			long dollars = (int) (netInvoice/100);
			
			double cents = (checkAmount - dollars)*100.0;
			
			DecimalFormat decFormat = new DecimalFormat("$#,##0.00");
			DecimalFormat dollarFormat = new DecimalFormat("#,##0");
			DecimalFormat centsFormat = new DecimalFormat(" and #0");
			
			String longFormat = dollarFormat.format(dollars) + centsFormat.format(cents) + "/100";
			
			checkForm.setCheckAmount(decFormat.format(checkAmount));
			checkForm.setCheckAmountLong(longFormat);
			checkForm.setCheckDate(FormatDate.convertDateToMM_DD_YYYY(checkDTO.getCheckDate()));
			checkForm.setCheckNumber(String.valueOf(checkDTO.getCheckNumber()));
			checkForm.setMasterID(checkDTO.getMasterID());
			checkForm.setApprovalStatus(checkDTO.getApprovalStatus());
			checkForm.setCheck1099(checkDTO.isCheck1099());
			checkForm.setCheck1099Amount(decFormat.format(check1099Amount));
			
			if ( checkForm.getApprovalStatus() == ApMasterDTO.APPROVAL_STATUS_APPROVED ) {
				checkForm.setPriorApproval(true);
				SimpleDateFormat sdFormat = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a");
				Timestamp appTimestamp = checkDTO.getApprovedTmstmp();
				
				checkForm.setApprovalTimestamp(sdFormat.format(appTimestamp));
			}
			
			boolean authorizationNeeded = true;
			if ( checkForm.getApprovalStatus() == ApMasterDTO.APPROVAL_STATUS_NOT_REQUIRED_BY_COMPANY || 
				 checkForm.getApprovalStatus() == ApMasterDTO.APPROVAL_STATUS_UNDER_APPROVAL_LIMIT ) {
				authorizationNeeded = false;
			}
			checkForm.setAuthorizationNeeded(authorizationNeeded);
			
			
			checkForm.setMemo(checkDTO.getMemo());
			LocationDAO locationDAO = new LocationDAO(user);
			
			DbApVendor apVendor = FdmsDb.getInstance().getApVendor(t, (int) checkDTO.getVendorID());
			UserDTO checkUser = FdmsDb.getInstance().getUser(checkDTO.getUserID());
			LocationDTO location = locationDAO.getLocation(checkDTO.getLocationID());
			
			checkForm.setPayee(apVendor.getName());
			if ( checkUser != null ) {
				checkForm.setSignature(checkUser.getFirstName() + " " + checkUser.getLastName() );
			}
			
			if ( location != null ) {
				checkForm.setLocationAddr(location.getAddr1());
				checkForm.setLocationCitySt( location.getCity() + ", " + 
						location.getState() + " " + location.getZip() );
				checkForm.setLocationName(location.getName() );
			}
			
			
			theCase = FdmsDb.getInstance().getCase(t,checkDTO.getVitalsID());
            
            if ( theCase != null ) {
            	checkForm.setVitalsID( checkDTO.getVitalsID() );
            	checkForm.setVitalsName(theCase.getFirstName() + " " + theCase.getLastName());
    			checkForm.setVitalsCaseNumber(theCase.getContractCode());
            }
			
		} catch (Exception e) {
			logger.error("Error : ", e);
		} finally {
			if (t != null) {
				t.closeConnection();
			}
		}

		return (mapping.findForward("success"));
	}
}