/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.aldorsolutions.dashboard.struts.action;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;

import com.aldorsolutions.dashboard.utils.CrystalReportManagerBean;
import com.aldorsolutions.webfdms.beans.DbUserSession;
import com.aldorsolutions.webfdms.reporting.crystal.model.FormAvailableFilterDTO;
import com.aldorsolutions.webfdms.reporting.crystal.model.FormAvailableFilterTypeDTO;
import com.aldorsolutions.webfdms.reporting.dao.FormAvailableFilterDAO;
import com.aldorsolutions.webfdms.reporting.dao.FormAvailableFilterTypeDAO;
import com.aldorsolutions.webfdms.reporting.filter.FilterException;
import com.aldorsolutions.webfdms.reporting.filter.FilterFactory;
import com.aldorsolutions.webfdms.reporting.filter.FilterInterface;
import com.aldorsolutions.webfdms.util.FormatDate;
import com.aldorsolutions.webfdms.util.SessionValueKeys;
import com.aldorsolutions.webfdms.util.UtilSingleton;

/** 
 * MyEclipse Struts
 * Creation date: 04-26-2007
 * 
 * XDoclet definition:
 * @struts.action path="/reports" name="reportsForm" input="/reports.jsp" scope="request" validate="true"
 */
public class RunReportsAction extends Action {
	
	private Logger logger = Logger.getLogger(RunReportsAction.class.getName());

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws IOException {
		HttpSession session =  request.getSession();
        DbUserSession user = (DbUserSession) session.getAttribute(SessionValueKeys.DB_USER);
        
        ActionMessages errors = new ActionMessages();
        ArrayList <String> formErrors = new ArrayList <String> ();
        
        String formID = request.getParameter("formId");
        String fromDate = null;
        String toDate = null;
        String locationSelected = null;
        int idFormID = 0;
        
        if ( formID == null || formID.length() == 0 ) {
        	errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.required", "Form ID Missing") );
        }
        
        try {
        	idFormID = Integer.parseInt(formID);
        } catch(Exception e){
            errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.int", "Form ID"));
        }

        if ( errors.isEmpty() == false ) {
        	saveErrors(request, errors);
        	return ( mapping.getInputForward() );
        }
        
        boolean showFilters = showFormFilterOptions (idFormID, request, user);
        
        if ( showFilters ) {
        	String filterPage = request.getParameter("filterPage");
        	
        	if ( filterPage == null || filterPage != null && filterPage.length() == 0 ) {
        		request.setAttribute("formId", formID);
        		return ( mapping.findForward("reportFilterJSP") );
        	} else if ( filterPage.equals("1") ) {
        		// processFilters
        		HashMap <String, Object> map = new HashMap <String, Object> ();
        		
        		try {
        			map = processFormFilterOptions(idFormID, request, user);
        		} catch ( FilterException fe ) {
        			errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.exception", fe));
        		}
        		
        		// Get From Date
                try {
                	String val = (String) map.get("dateFrom");
                	fromDate = FormatDate.convertToDateYYYYMMDD(val);
                } catch(Exception e){
                    errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.date.fromdate"));
                    formErrors.add("fromDate");
                }
                
                // Get To Date
                try {
                	String val = (String) map.get("dateTo");
                	toDate = FormatDate.convertToDateYYYYMMDD(val);
                } catch(Exception e){
                	errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.date.todate"));
                    formErrors.add("toDate");
                }
                
        	}
        }
        
        
        // Get selected location
        try {
        	locationSelected = "0"; //form.getSelectLocation();
        } catch (Exception e) {
            //
        }
        
        if ( errors.isEmpty() == false ) {
        	saveErrors(request, errors);
        	return ( mapping.getInputForward() );
        }
        
        logger.debug("PrintReportAction. Report selected : " + formID + " from: " + fromDate + " to: " + 
        		toDate + " location : " + locationSelected);
        
        // Get user
        String crystalFlag = UtilSingleton.getInstance().getProperty(user.getConfigID(), "CrystalServer.useReportingService");
        ArrayList customValues = new ArrayList();
        String pageName = null;

        if ( crystalFlag != null && "true".equals(crystalFlag) ) {
            CrystalReportManagerBean crManager = new CrystalReportManagerBean(user.getConfigID());                
            pageName = crManager.printReport(user, idFormID, fromDate, toDate, customValues, 
            		locationSelected, "0", true);
            
            logger.debug( "Page Name: " + pageName );
            response.sendRedirect( pageName );
        }
        
        
//		return ( mapping.findForward("MainPage") );
        return ( null );
	}
		
    public boolean showFormFilterOptions (long formID, HttpServletRequest request, DbUserSession sessionUser ) {
    	
    	FormAvailableFilterTypeDAO filterTypeDAO = new FormAvailableFilterTypeDAO(sessionUser);
    	FormAvailableFilterDAO filterDAO = new FormAvailableFilterDAO (sessionUser);
    	
    	ArrayList <FormAvailableFilterTypeDTO> filterTypes = filterTypeDAO.getFormAvailableFilterType();
    	ArrayList <FormAvailableFilterDTO> filterSaved = filterDAO.getFormAvailableFilterByFormID(formID);
        ArrayList <FilterInterface> filtersToApply = new ArrayList <FilterInterface> ();
        
        for ( FormAvailableFilterTypeDTO filterType :  filterTypes ) {
        	boolean isSelected = false;
        	boolean found = false;
        	FilterInterface filterI = FilterFactory.createFilter(filterType);
			
			for ( FormAvailableFilterDTO filterConfig :  filterSaved ) {				

				if (filterConfig.getFilterTypeID() == filterType.getFormFilterTypeID()) {
					found = true;
					filterI.setFilter(filterConfig);
					
					if ( filterConfig.getFilterParameter() > 0 ) {
						isSelected = true;
					}
					break;
				}
			}
			
			if (found == false && filterType.getDefaultParameter() > 0 ) {
					isSelected = true;
			}
			
			if ( isSelected ) {
				filtersToApply.add(filterI);
			}
        	
        }
        
        HttpSession session = request.getSession();
        session.setAttribute("FORM_FILTER_OPTIONS", filtersToApply);
        
        if ( filtersToApply.size() > 0 ) {
        	return ( true );
        }
        else {
        	return ( false );
        }
        
    }
	
    public HashMap <String, Object> processFormFilterOptions (long formID, HttpServletRequest request, DbUserSession sessionUser ) throws FilterException {
    	
    	HttpSession session = request.getSession();
        ArrayList <FilterInterface> filtersToApply = (ArrayList) session.getAttribute("FORM_FILTER_OPTIONS");
        
        HashMap <String, Object> map = new HashMap <String, Object> ();
        
        for ( FilterInterface filter :  filtersToApply ) {
        	map.putAll( filter.processReportGenerationSubmit(request) );
        }
        
        return ( map );       
    }
	
}