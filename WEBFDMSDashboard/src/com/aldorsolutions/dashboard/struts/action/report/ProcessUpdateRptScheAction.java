/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 * CJongs
 */
package com.aldorsolutions.dashboard.struts.action.report;

import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import com.aldorassist.webfdms.model.LocaleDTO;
import com.aldorassist.webfdms.model.ReportSchedulingDTO;
import com.aldorassist.webfdms.model.ShowReportSchedulingDTO;
import com.aldorsolutions.dashboard.struts.form.report.ReportForm;
import com.aldorsolutions.dashboard.struts.form.report.ReportSchedulingForm;
import com.aldorsolutions.dashboard.struts.form.report.ReportSchedulingListForm;
import com.aldorsolutions.dashboard.struts.form.report.UpdateRptScheForm;
import com.aldorsolutions.webfdms.beans.DbFormsAvailable;
import com.aldorsolutions.webfdms.beans.DbLocation;
import com.aldorsolutions.webfdms.beans.DbUser;
import com.aldorsolutions.webfdms.beans.DbUserSession;
import com.aldorsolutions.webfdms.beans.FdmsDb;
import com.aldorsolutions.webfdms.beans.display.CheckListBean;
import com.aldorsolutions.webfdms.common.Constants;
import com.aldorsolutions.webfdms.database.DatabaseTransaction;
import com.aldorsolutions.webfdms.database.PersistenceException;
import com.aldorsolutions.webfdms.forms.dao.FormsAvailableDAO;
import com.aldorsolutions.webfdms.locale.bean.LocaleManagerBean;
import com.aldorsolutions.webfdms.reporting.dao.ReportSchedulingDAO;
import com.aldorsolutions.webfdms.util.FormatDate;
import com.aldorsolutions.webfdms.util.FormatNumber;
import com.aldorsolutions.webfdms.util.OptionsList;
import com.aldorsolutions.webfdms.util.SessionValueKeys;
import com.aldorsolutions.webfdms.util.UtilSingleton;
import java.util.Timer;
import java.util.TimerTask;

/** 
 * MyEclipse Struts
 * Creation date: 04-17-2007
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 * @struts.action-forward name="failed" path="/login.jsp"
 * @struts.action-forward name="success" path="/main.jsp"
 */
public class ProcessUpdateRptScheAction extends Action {
	/*
	 * Generated Methods
	 */
	private ArrayList formErrors;
	private Logger logger = Logger.getLogger(ProcessUpdateRptScheAction.class.getName());

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		
 		HttpSession session =  request.getSession();
        DbUserSession user = (DbUserSession) session.getAttribute(SessionValueKeys.DB_USER);
        UpdateRptScheForm reportForm = (UpdateRptScheForm) form;
		ActionMessages errors = new ActionMessages();
		formErrors = new ArrayList();
		if (reportForm.getRequestType().compareToIgnoreCase("update") == 0) {
			
			ReportSchedulingDTO rptSche = new ReportSchedulingDTO();
			ReportSchedulingDAO reportScheDAo = new ReportSchedulingDAO(user);
			rptSche = reportScheDAo.getReportScheduling(Integer.valueOf(reportForm.getScheID()));
			
			String fromDate = "";
			try {
				fromDate = FormatDate.convertToDateYYYYMMDD(reportForm.getFromDate());
			} catch (Exception e) {
				errors.add(ActionMessages.GLOBAL_MESSAGE,
						new ActionMessage("error.date.fromdate"));

				formErrors.add("fromDate");
			}
			java.util.Date fDate = FormatDate.convertToDateYYMMDD(fromDate);
			try {
				rptSche.setFromDate(new java.sql.Date(fDate.getTime()));
			} catch (Exception e) {
				errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(
						"error.date.fromdate"));
				formErrors.add("fromDate");
			}
			
			String toDate = "";
			try {
				toDate = FormatDate.convertToDateYYYYMMDD(reportForm.getToDate());
			} catch (Exception e) {
				errors.add(ActionMessages.GLOBAL_MESSAGE,
						new ActionMessage("error.date.todate"));

				formErrors.add("toDate");
			}
			java.util.Date tDate = FormatDate.convertToDateYYMMDD(toDate);
			try {
				rptSche.setToDate(new java.sql.Date(tDate.getTime()));
			} catch (Exception e) {
				errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(
						"error.date.todate"));
				formErrors.add("toDate");
			}
			
			String runDate = "";
			try {
				runDate = FormatDate.convertToDateYYYYMMDD(reportForm.getRunDate());
			} catch (Exception e) {
				errors.add(ActionMessages.GLOBAL_MESSAGE,
						new ActionMessage("error.date.rundate"));

				formErrors.add("runDate");
			}
			java.util.Date rDate = FormatDate.convertToDateYYMMDD(runDate);
			try {
				rptSche.setRunDate(new java.sql.Date(rDate.getTime()));
			} catch (Exception e) {
				errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(
						"error.date.rundate"));
				formErrors.add("runDate");
			}
			
			String emailTo = "";
			emailTo = reportForm.getRecipientsTo().replace(':', ';');
			emailTo = emailTo.replace(' ', ';');
			emailTo = emailTo.replace(',', ';');
			rptSche.setEmailTo(emailTo);
			String emailCC = "";
			emailCC = reportForm.getRecipientsCC().replace(':', ';');
			emailCC = emailCC.replace(' ', ';');
			emailCC = emailCC.replace(',', ';');
			rptSche.setEmailCC(emailCC);
			
			try {
				reportScheDAo.updateReportScheduling(rptSche);
			}catch (Exception pe) {

			}
			
		}

		return ( mapping.findForward("success") );
	}
	
	
}