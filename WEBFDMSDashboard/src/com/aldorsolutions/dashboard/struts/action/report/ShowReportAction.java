/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 * CJongs
 */
package com.aldorsolutions.dashboard.struts.action.report;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionError;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import com.aldorassist.webfdms.model.LocaleDTO;
import com.aldorsolutions.dashboard.struts.form.report.ReportForm;
import com.aldorsolutions.webfdms.beans.DbApAccount;
import com.aldorsolutions.webfdms.beans.DbLocation;
import com.aldorsolutions.webfdms.beans.DbUser;
import com.aldorsolutions.webfdms.beans.DbUserSession;
import com.aldorsolutions.webfdms.beans.FdmsDb;
import com.aldorsolutions.webfdms.beans.display.CheckListBean;
import com.aldorsolutions.webfdms.common.Constants;
import com.aldorsolutions.webfdms.database.DatabaseTransaction;
import com.aldorsolutions.webfdms.database.PersistenceException;
import com.aldorsolutions.webfdms.locale.bean.LocaleManagerBean;
import com.aldorsolutions.webfdms.util.FormatDate;
import com.aldorsolutions.webfdms.util.FormatNumber;
import com.aldorsolutions.webfdms.util.OptionsList;
import com.aldorsolutions.webfdms.util.SessionValueKeys;
import com.aldorsolutions.webfdms.util.UtilSingleton;


import java.util.Timer;
import java.util.TimerTask;

/** 
 * MyEclipse Struts
 * Creation date: 04-17-2007
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 * @struts.action-forward name="failed" path="/login.jsp"
 * @struts.action-forward name="success" path="/main.jsp"
 */
public class ShowReportAction extends Action {
	/*
	 * Generated Methods
	 */
	
	private Logger logger = Logger.getLogger(ShowReportAction.class.getName());

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		
		HttpSession session =  request.getSession();
        DbUserSession user = (DbUserSession) session.getAttribute(SessionValueKeys.DB_USER);
		ReportForm reportForm = (ReportForm) form;
		ActionMessages errors = new ActionMessages();
		
		reportForm.setFromDate(FormatDate.getCurrentDateFormatedMMDDYYYY());
        reportForm.setToDate(FormatDate.getCurrentDateFormatedMMDDYYYY());
        reportForm.setRunDate(FormatDate.getCurrentDateFormatedMMDDYYYY());
        reportForm.setReportURL("");
        
        // for array of locals and locations.
        ArrayList <OptionsList> reports = new ArrayList <OptionsList>();
        reports.add( new OptionsList( "0" ,"--Select--"));
        request.setAttribute("reports",reports);
        // end array of locals and locations.
        
        if (request.getParameter("type") != null) {
    		reportForm.setListType(request.getParameter("type"));	
    	} else {
    		reportForm.setListType(request.getParameter("all"));	
    	}
        String emailName = "";
        if (user.getEmailAddr() != null && user.getEmailAddr().length() > 0) {
        	emailName = user.getEmailAddr()+";";
        }
        reportForm.setRecipientsTo(emailName);
        
        setReport(reportForm, user, session,  errors, request);
        
        // for array of locals and locations
        setList(user, reportForm, request,errors);
        // end array
        
        session.setAttribute("reportForm", reportForm);
		return ( mapping.findForward("success") );
	}
	
	private void setReport(ReportForm form, DbUserSession sessionUser, HttpSession session, ActionMessages errors, HttpServletRequest request) {
		ArrayList <OptionsList> reports = new ArrayList<OptionsList>();
		 DatabaseTransaction t = null;
		try {
            t = (DatabaseTransaction)DatabaseTransaction.getTransaction(sessionUser);
            // 18 = Dashboard Reports - Accounting
//            if (form.getCategory().compareToIgnoreCase("-1")!= 0) {
//	            com.aldorsolutions.webfdms.beans.DbFormsAvailable[] list = FdmsDb.getInstance().getFormsAvailableForLocale(t,Integer.parseInt(form.getUserLocaleId()), 18);
	            com.aldorsolutions.webfdms.beans.DbFormsAvailable[] list = FdmsDb.getInstance().getFormsAvailableForLocale(t,0, 18);
//	            reports.add( new OptionsList( "0" ,"--Select--"));
	            for (int i=0; i<list.length; i++){
	                reports.add( new OptionsList(Integer.toString(list[i].getFormId()) ,list[i].getDescription()));
	            }
//            }
//            else {
//            	reports.add( new OptionsList( "0" ,"--Select--"));
//            }
            request.setAttribute("reports",reports);
		} catch (PersistenceException ex){
			errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.internal"));
            saveErrors(request, errors);
			logger.error("Persistence Exception in PrintReportAction.do Perform. ", ex);
            
           
        } finally {
            if (t != null) t.closeConnection();
        }   
		
	}
	
    private void setList(DbUserSession sessionUser, ReportForm editform, HttpServletRequest request,ActionMessages errors){
    	DatabaseTransaction t = null;
    	try {
        	t = (DatabaseTransaction)DatabaseTransaction.getTransaction(sessionUser);
    	
    	// we are going to set the js for locale and locationlist.
		DbLocation dbLocations[] = FdmsDb.getInstance().getLocationsForCompany(t,
				(int) sessionUser.getCompanyID());

		ArrayList locationList = new ArrayList();
		// Populate the Location List
		for (int i = 0; i < dbLocations.length; i++) {
			DbLocation location = (DbLocation) dbLocations[i];
			locationList.add(location);
		}
		editform.setLocations(locationList);
		ArrayList <LocaleDTO> locales = FdmsDb.getInstance().getLocalesForCompany(sessionUser.getDbLookup(),
				(int) sessionUser.getCompanyID());
        ArrayList localeList = new ArrayList();
        
        // Populate the Locale List
        
        for ( LocaleDTO locale : locales ) {
        	localeList.add(new OptionsList(String.valueOf(locale.getLocaleID()), locale.getName()));
        }
        
        editform.setLocales(localeList);
        request.getSession().setAttribute("localesSize", new Integer(localeList.size()));
		request.getSession().setAttribute("locationsSize", new Integer(locationList.size()));
		editform.setLocationIds(null);
		editform.setLocaleIds(null);
		editform.setType(getType());
		
		String js = createLocaleJavascript(dbLocations, editform.getLocationIds());
		editform.setLocaleMapJavascript(js);
    	} catch (PersistenceException ex){
			errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.internal"));
            saveErrors(request, errors);
			logger.error("Persistence Exception in PrintReportAction.do Perform. ", ex);
            
           
        } finally {
            if (t != null) t.closeConnection();
        }   
		
    }
	private static String[] getLocations(ArrayList <DbApAccount> lists) {

		Map locations = new HashMap();
		for (DbApAccount list: lists ) {
			locations.put(new Integer(list.getLocationID()).toString(),
					new Integer(list.getLocationID()).toString());
		}

		return (String[]) locations.keySet().toArray(new String[locations.keySet().size()]);

	}
	private static String[] getLocale(ArrayList <DbApAccount> lists) {

		Map locale = new HashMap();
		for (DbApAccount list: lists ) {
			locale.put(new Integer(list.getLocaleID()).toString(), new Integer(list
					.getLocaleID()).toString());
		}

		return (String[]) locale.keySet().toArray(new String[locale.keySet().size()]);
	}
	private static String getType(){
		return Constants.GLOBAL_LOCALE_STRING;
	}
	private static String createLocaleJavascript(DbLocation[] dbLocations, String[] locationIds) {

		String js = "\n";

		js += "\tlocList = new Array(" + dbLocations.length + ");\n";

		for (int j = 0; j < dbLocations.length; j++) {
			DbLocation dbLocation = (DbLocation) dbLocations[j];

			int localeID = dbLocation.getLocaleNumber();
			int locationID = dbLocation.getId();
			String locName = dbLocation.getName();
			boolean selected = false;

			if (locationIds != null) {
				for (int x = 0; x < locationIds.length; x++) {
					int aLocID = Integer.parseInt(locationIds[x]);

					if (aLocID == locationID) {
						selected = true;
					}
				}
			}
			
			js += "\tlocList[" + j + "] = new Array(" + localeID + ", " + locationID + ", \"" + locName
					+ "\", " + selected + ");\n";

		}

		return (js);

	}
}