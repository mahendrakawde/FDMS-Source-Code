/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 * CJongs
 */
package com.aldorsolutions.dashboard.struts.action.report;

import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import com.aldorassist.webfdms.model.LocaleDTO;
import com.aldorassist.webfdms.model.ReportSchedulingDTO;
import com.aldorassist.webfdms.model.ShowReportSchedulingDTO;
import com.aldorsolutions.dashboard.struts.form.report.ReportForm;
import com.aldorsolutions.dashboard.struts.form.report.ReportSchedulingForm;
import com.aldorsolutions.dashboard.struts.form.report.ReportSchedulingListForm;
import com.aldorsolutions.webfdms.beans.DbFormsAvailable;
import com.aldorsolutions.webfdms.beans.DbLocation;
import com.aldorsolutions.webfdms.beans.DbUser;
import com.aldorsolutions.webfdms.beans.DbUserSession;
import com.aldorsolutions.webfdms.beans.FdmsDb;
import com.aldorsolutions.webfdms.beans.display.CheckListBean;
import com.aldorsolutions.webfdms.common.Constants;
import com.aldorsolutions.webfdms.database.DatabaseTransaction;
import com.aldorsolutions.webfdms.database.PersistenceException;
import com.aldorsolutions.webfdms.forms.dao.FormsAvailableDAO;
import com.aldorsolutions.webfdms.locale.bean.LocaleManagerBean;
import com.aldorsolutions.webfdms.reporting.dao.ReportSchedulingDAO;
import com.aldorsolutions.webfdms.util.FormatDate;
import com.aldorsolutions.webfdms.util.FormatNumber;
import com.aldorsolutions.webfdms.util.OptionsList;
import com.aldorsolutions.webfdms.util.SessionValueKeys;
import com.aldorsolutions.webfdms.util.UtilSingleton;
import java.util.Timer;
import java.util.TimerTask;

/** 
 * MyEclipse Struts
 * Creation date: 04-17-2007
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 * @struts.action-forward name="failed" path="/login.jsp"
 * @struts.action-forward name="success" path="/main.jsp"
 */
public class ShowReportSchedulingListAction extends Action {
	/*
	 * Generated Methods
	 */
	
	private Logger logger = Logger.getLogger(ShowReportSchedulingListAction.class.getName());

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		
		HttpSession session =  request.getSession();
        DbUserSession user = (DbUserSession) session.getAttribute(SessionValueKeys.DB_USER);
		ReportSchedulingForm reportForm = (ReportSchedulingForm) form;
		ActionMessages errors = new ActionMessages();
		ReportSchedulingListForm aForm = null;
		String rptURL = request.getParameter("reportURL");
		String direction = request.getParameter("direction");
		reportForm.setDirection("");
		if (direction != null){
			reportForm.setDirection(direction);
		}
		DatabaseTransaction t = null;
		
		if (rptURL == null || rptURL.length()== 0) {
			
			
			String scheID = request.getParameter("rmID");
			if (scheID != null && Integer.valueOf(scheID) > 0) {
				ReportSchedulingDTO rptScheList = new ReportSchedulingDTO();
				ReportSchedulingDAO reportScheDAo = new ReportSchedulingDAO(user);
				rptScheList = reportScheDAo.getReportScheduling(Integer.valueOf(scheID));
				rptScheList.setStatus("D");
				long createdTimestamp = System.currentTimeMillis();
				rptScheList.setStopDateTime(createdTimestamp);
				try {
					reportScheDAo.updateReportScheduling(rptScheList);
				}catch (Exception pe) {
	
				}
				reportForm.setDirection("future");
			}
		
			aForm = new ReportSchedulingListForm();
			
			String formLocale = reportForm.getUserLocaleId();
			ArrayList <ReportSchedulingDTO> rptScheList = new ArrayList <ReportSchedulingDTO> ();
			ArrayList <ShowReportSchedulingDTO> showList = new ArrayList <ShowReportSchedulingDTO> ();
			ReportSchedulingDAO reportScheDAo = new ReportSchedulingDAO(user);
//			rptScheList = reportScheDAo.getReportScheduling(ReportSchedulingDTO.REPORT_TYPE_SCHEDULING);
			rptScheList = reportScheDAo.getReportSchedulingQ(user.getId());
			
//			if (formLocale.compareToIgnoreCase("0") ==0) {
//				aForm.setLocaleName("All");
//			} else if (formLocale.compareToIgnoreCase("All") ==0) {
//				aForm.setLocaleName("All");
//				formLocale = "0";
//			}else {
//				LocaleDTO dbLocale = new LocaleDTO();
//				dbLocale = FdmsDb.getInstance().getLocale(user.getDbLookup(), Integer.parseInt(formLocale));
//				aForm.setLocaleName(dbLocale.getName());
//			}

			
			ArrayList <DbFormsAvailable> formsAvailables = new ArrayList <DbFormsAvailable>();
	        FormsAvailableDAO formsAvailableDAo = new FormsAvailableDAO(user);
	        DbFormsAvailable formsAvailable = null; 
			
	        String tmpLocale = "";
			for (ReportSchedulingDTO rptSche : rptScheList) {
				ShowReportSchedulingDTO showInfo = new ShowReportSchedulingDTO();
//				tmpLocale = rptSche.getLocale();
//				if (tmpLocale.compareToIgnoreCase("All") == 0){
//					tmpLocale = "0";
//				}
//				if ( tmpLocale.compareToIgnoreCase(formLocale) == 0) {
					
					long  currentTimestamp = System.currentTimeMillis();
					java.util.Date rDate = (java.util.Date) rptSche.getRunDate();
					long rTimeStamp = rDate.getTime();
					
					formsAvailable = formsAvailableDAo.getFormsAvailable(rptSche.getFormID());
					if (formsAvailable != null) {
					
							//show only the future task
							if (reportForm.getDirection().compareToIgnoreCase("future") == 0) {
								aForm.setDirection("future");
								showInfo.setSchedulingID(rptSche.getSchedulingID());
								showInfo.setFormName(formsAvailable.getDescription());
								showInfo.setFromDate(FormatDate.convertDateToMM_DD_YYYY((java.util.Date) rptSche.getFromDate()));
								showInfo.setToDate(FormatDate.convertDateToMM_DD_YYYY((java.util.Date) rptSche.getToDate()));
								showInfo.setRunDate(FormatDate.convertDateToMM_DD_YYYY((java.util.Date) rptSche.getRunDate()));
								showInfo.setShortName("");
								// get locale.
								if (rptSche.getLocale().compareToIgnoreCase("0") ==0) {
									showInfo.setLocaleName("All");
								} else if (rptSche.getLocale().compareToIgnoreCase("All") ==0) {
									showInfo.setLocaleName("All");
								} else if (rptSche.getLocale().compareToIgnoreCase("9999") ==0) {
										showInfo.setLocaleName("All");
								}else {
									LocaleDTO dbLocale = new LocaleDTO();
									dbLocale = FdmsDb.getInstance().getLocale(user.getDbLookup(), Integer.parseInt(rptSche.getLocale()));
									showInfo.setLocaleName(dbLocale.getName());
								}
								// get location.
								try {
									if (rptSche.getLocation().compareToIgnoreCase("0") == 0) {
										showInfo.setLocationName("All");
									} else if (rptSche.getLocation().compareToIgnoreCase("All") ==0) {
										showInfo.setLocationName("All");	
									}else {
										t = (DatabaseTransaction)DatabaseTransaction.getTransaction(user);
										DbLocation dbLocation = new DbLocation();
										dbLocation = FdmsDb.getInstance().getLocation(t,Integer.parseInt(rptSche.getLocation()));
										showInfo.setLocationName(dbLocation.getName());
									}
								} catch(PersistenceException pe) {
						            logger.error("Persistence Exception in ShowReportPrintedListAction.doPerform. " + pe);
						        } catch(Exception pe) {
						            logger.error("Exception in  ShowReportPrintedListAction.doPerform. ", pe);
						        } finally {
						            if (t != null) t.closeConnection();
						        }
								if ((rTimeStamp > currentTimestamp) && (rptSche.getStatus().compareToIgnoreCase("Q") == 0)) {
									showInfo.setRmName("Remove");
									showInfo.setUdName("Edit");
									showInfo.setStatus("Schedule");
									
								}else if ((rptSche.getStatus().compareToIgnoreCase("R") == 0)){
									showInfo.setRmName("");
									showInfo.setUdName(" ");
									showInfo.setStatus("Running");
								}
								showList.add(showInfo);
							} else if (reportForm.getDirection().compareToIgnoreCase("history") == 0) {
								aForm.setDirection("H");
								if ((rTimeStamp < currentTimestamp) && (rptSche.getStatus().compareToIgnoreCase("S") == 0)) {
														
									showInfo.setSchedulingID(rptSche.getSchedulingID());
									showInfo.setFormName(formsAvailable.getDescription());
									showInfo.setFromDate(FormatDate.convertDateToMM_DD_YYYY((java.util.Date) rptSche.getFromDate()));
									showInfo.setToDate(FormatDate.convertDateToMM_DD_YYYY((java.util.Date) rptSche.getToDate()));
									showInfo.setRunDate(FormatDate.convertDateToMM_DD_YYYY((java.util.Date) rptSche.getRunDate()));
									showInfo.setReportName(rptSche.getReportName());
								    int pos = rptSche.getReportName().lastIndexOf("/");
								    if (pos < 0) pos = 0;
									String sName = rptSche.getReportName().substring((pos+1),rptSche.getReportName().length());
									showInfo.setRmName("Remove");
									showInfo.setShortName(sName);
									showInfo.setUdName("Edit");
									showList.add(showInfo);
								}
							} else {
								//do nothing
							}
					}	
//				}
			}
			aForm.setRptSche(showList);
			aForm.setReportURL("");
			session.setAttribute("reportSchedulingListForm", aForm);
		}
			else {
			aForm = (ReportSchedulingListForm) session.getAttribute("reportSchedulingListForm");
			aForm.setReportURL(rptURL);
			session.setAttribute("reportSchedulingListForm", aForm);
		}
		return ( mapping.findForward("success"));
	}
	
	
}