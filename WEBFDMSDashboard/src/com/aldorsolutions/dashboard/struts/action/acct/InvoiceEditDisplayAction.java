/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.aldorsolutions.dashboard.struts.action.acct;

import java.util.ArrayList;
import java.util.Calendar;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.apache.struts.util.LabelValueBean;

import com.aldorassist.webfdms.dao.InvoiceDAO;
import com.aldorassist.webfdms.dao.InvoiceItemDAO;
import com.aldorassist.webfdms.dao.LocationDAO;
import com.aldorassist.webfdms.model.InvoiceDTO;
import com.aldorassist.webfdms.model.InvoiceItemDTO;
import com.aldorassist.webfdms.model.LocationDTO;
import com.aldorassist.webfdms.model.notpersisted.InvoiceInventoryItemLinePO;
import com.aldorsolutions.dashboard.struts.form.acct.InvoiceEditDisplayForm;
import com.aldorsolutions.webfdms.admin.user.bean.UserManagerBean;
import com.aldorsolutions.webfdms.admin.user.dao.UserDAO;
import com.aldorsolutions.webfdms.admin.user.model.UserLocationDTO;
import com.aldorsolutions.webfdms.beans.DbSpeedData;
import com.aldorsolutions.webfdms.beans.DbUserSession;
import com.aldorsolutions.webfdms.beans.FdmsDb;
import com.aldorsolutions.webfdms.checkwriter.dao.ApVendorDAO;
import com.aldorsolutions.webfdms.checkwriter.dao.ApVendorLocationDAO;
import com.aldorsolutions.webfdms.checkwriter.model.ApVendorDTO;
import com.aldorsolutions.webfdms.checkwriter.model.ApVendorLocationDTO;
import com.aldorsolutions.webfdms.common.Constants;
import com.aldorsolutions.webfdms.util.CsvTable;
import com.aldorsolutions.webfdms.util.DateUtility;
import com.aldorsolutions.webfdms.util.FormatDate;
import com.aldorsolutions.webfdms.util.OptionsList;
import com.aldorsolutions.webfdms.util.SessionValueKeys;

/** 
 * MyEclipse Struts
 * Creation date: 09-24-2007
 * 
 * XDoclet definition:
 * @struts.action path="/invoiceEditDisplay" name="invoiceEditDisplayForm" scope="request" validate="true"
 */
public class InvoiceEditDisplayAction extends Action {
	
	private Logger logger = Logger.getLogger(InvoiceEditDisplayAction.class.getName());
	
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		HttpSession session = request.getSession();
		DbUserSession user = (DbUserSession) session.getAttribute(SessionValueKeys.DB_USER);
		
		int invoiceID = -1; 
		InvoiceEditDisplayForm invoiceEditDisplayForm = null;

		invoiceEditDisplayForm = (InvoiceEditDisplayForm) form;				
		if ( invoiceEditDisplayForm != null ) {
			invoiceID = invoiceEditDisplayForm.getInvoiceID();
		}		
		
		ActionMessages errors = new ActionMessages();
		
				
		try {
			String addInvoice = request.getParameter("addInvoice");		
			if ( addInvoice != null && addInvoice.equals("true") ) {
			//if ( addInvoice.equals("true") ) {
				// Add New Invoice

				loadForm(invoiceEditDisplayForm, -1, user, session );

			} 
			else {
				
				if ( invoiceID <= 0 ) {
					errors.add ( ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.int", "Invoice ID") );
					saveErrors(request, errors);
						
					return ( mapping.findForward("showList") );
				}

				loadForm(invoiceEditDisplayForm, invoiceID, user, session);
				if(request.getHeader("referer") == null || request.getHeader("referer").contains("invoiceList")){
					invoiceEditDisplayForm.setUpdateInvoice(true);
				}else{
					invoiceEditDisplayForm.setUpdateInvoice(false);
				}
			}
			
		} catch ( Exception e ) {
			logger.debug(e.getMessage(), e);
		}
		
		return ( mapping.findForward("showEdit") );
	}
	
	private void loadForm (InvoiceEditDisplayForm form, long invoiceID, DbUserSession user, 
			HttpSession session ) throws Exception {
		
		LocationDAO locationDAO = new LocationDAO(user);
		ApVendorDAO vendorDao = new ApVendorDAO(user);
		
		ApVendorLocationDAO apVendorLocationDao = new ApVendorLocationDAO(user);

		//ArrayList <LocationDTO> locationList = locationDAO.getLocations(user.getCompanyID(), true);
	
		// get the locations for the user
		UserDAO userDao = new UserDAO();
		ArrayList  <UserLocationDTO> userLocations = userDao.getUserLocations(user.getId());
		ArrayList <LocationDTO> allLocations = locationDAO.getLocations(user.getCompanyID(), true);	
		ArrayList <LocationDTO> locations = new ArrayList <LocationDTO>();
		
		for(LocationDTO location: allLocations ){
			for (UserLocationDTO userLocation : userLocations){
				if (userLocation.getLocationId()==location.getLocationID()){
					locations.add(location);
					break;
				}
			}
		}	
		
		if (locations.size() == 1) {
			form.setLocationID((int)((LocationDTO)locations.get(0)).getLocationID());
		}
		//end getting locations
		
		// get the vender for user
//		UserManagerBean uMgr = new UserManagerBean();	
//		String [] stringLocationIDs = uMgr.getUserLocationIds(user.getId());
//		ArrayList<Long> locationIDs = new ArrayList<Long>();
//		for(int i=0;i<stringLocationIDs.length;i++){
//			locationIDs.add( Long.parseLong(stringLocationIDs[i]));
//		}
//		ArrayList <ApVendorLocationDTO> apVendorLocationList = apVendorLocationDao.getApVendorLocationByLocationIDs(locationIDs);
//		ArrayList<Long> vendorIDs = new ArrayList<Long>();
//		for ( ApVendorLocationDTO apVendorLocation : apVendorLocationList ) {
//			vendorIDs.add(apVendorLocation.getVendorID());
//		}
//		ArrayList <ApVendorDTO> vendorList = vendorDao.getApVendorByVendorIDs(true,vendorIDs);
		// end getting vender for user	
		

		//Chai comment - not use webfdmsdata1 but dblookup of user.
		ArrayList <OptionsList> stateList = FdmsDb.getInstance().getStateList();
//		ArrayList <OptionsList> stateList = FdmsDb.getInstance().getStateList(user.getDbLookup());
		
		if(form.getInvoiceDate()==null)
			form.setInvoiceDate( FormatDate.convertDateToMM_DD_YYYY(DateUtility.getCurrentDate()) );
		// Calculate 30 days out
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(DateUtility.getCurrentDate());
		calendar.add(Calendar.MONTH, 1);
		
		if(form.getInvoiceDueDate()==null)
			form.setInvoiceDueDate(FormatDate.convertDateToMM_DD_YYYY(calendar.getTime()));

		form.setTotalDiscount(0);
		form.setInvoiceStatus("");
		if ( invoiceID > 0 ) {
			InvoiceDAO invoiceDAO = new InvoiceDAO(user);
			InvoiceItemDAO invoiceItemDAO = new InvoiceItemDAO(user);
			
			InvoiceDTO invoice = invoiceDAO.getInvoice(invoiceID);

			form.setInvoiceStatus(invoice.getInvoiceStatus());
			form.setAmountOfInvoice(invoice.getAmountOfInvoice());
			form.setCheckingAccount(invoice.getCheckingAccount());
			form.setCheckingStatus(invoice.getCheckingStatus());
			form.setDescription(invoice.getDescription());
			form.setDiscountAmount(invoice.getDiscountAmount());
			form.setDiscountDollars(invoice.getDiscountDollars());
			form.setDiscountFlag(invoice.isDiscountFlag());
			form.setDiscountDue(invoice.getDiscountDue());
			form.setDiscountDueDate(FormatDate.convertDateToMM_DD_YYYY(invoice.getDiscountDueDate()));
			form.setDiscountDueDatePrint(FormatDate.convertDateToMM_DD_YYYY(invoice.getDiscountDueDate()));
			form.setDiscountDueFreq(invoice.getDiscountDueFreq());
			form.setDiscountPercent(invoice.getDiscountPercent());
			form.setDiscountSubjectAmount(invoice.getDiscountSubjectAmount());
			form.setGlCategory(invoice.getGlcategory());
			form.setInvoice1099Amount(invoice.getInvoice1099Amount());
			form.setInvoice1099Type(invoice.getInvoice1099Type());
			form.setInvoiceDate(FormatDate.convertDateToMM_DD_YYYY(invoice.getInvoiceDate()));
			form.setInvoiceDueDate(FormatDate.convertDateToMM_DD_YYYY(invoice.getInvoiceDueDate()));
			form.setInvoiceID(invoice.getInvoiceID());
			form.setInvoiceNumber(invoice.getInvoiceNumber());
			//form.setInvoiceNumber(Integer.toString(invoice.getInvoiceID()));
			form.setInvoicePaid(invoice.isInvoicePaid());
			form.setLocationID(invoice.getLocationID());
			form.setRecurringCount(invoice.getRecurringCount());
			form.setRecurringFlag(invoice.isRecurringFlag());
			form.setRecurringFreq(invoice.getRecurringFreq());
			form.setRecurringFreqCode(invoice.getRecurringFreqCode());
			form.setVendorID(invoice.getVendorID());
			form.setCheckCreated(invoice.isCheckCreated());
					
			ArrayList <InvoiceItemDTO> invoiceInvItems = invoiceItemDAO.getInvoiceItems(invoiceID);
			ArrayList <InvoiceInventoryItemLinePO> itemInvArray = new ArrayList <InvoiceInventoryItemLinePO>();
			
			double itemTotalCost = 0.0;
			double debitTotal = 0.0;
			double creditTotal = 0.0;
			
			
			for ( int i = 0; i < invoiceInvItems.size(); i++ ) {
				InvoiceItemDTO item = invoiceInvItems.get(i);
				InvoiceInventoryItemLinePO invItem = new InvoiceInventoryItemLinePO(item);
				itemTotalCost += invItem.getItemCost();
				itemInvArray.add(invItem);
			}
			
			
			form.setInvoiceInvItems(itemInvArray);
			form.setItemTotalCost(itemTotalCost);
			form.setDebitTotal(debitTotal);
			form.setCreditTotal(creditTotal);
			
//			for ( ApVendorDTO vendor : vendorList ) {
//				
//				if ( vendor.getVendorID() == invoice.getVendorID() ) {
//					form.setVendorAddress(vendor.getAddr1());
//					form.setVendorAddress2(vendor.getAddr2());
//					form.setVendorCity(vendor.getCityState());
//					form.setVendorName(vendor.getName());
//					form.setVendorState(vendor.getVendorState());
//					form.setVendorZip(vendor.getPostalCode());
//					form.setDiscountPercentage(vendor.getDiscountPercentage());
//					break;
//				}
//			}
			
			form.setTotalDiscount((itemTotalCost-invoice.getDiscountAmount()) );
			
			if (invoice.getInvoiceStatus().equalsIgnoreCase(InvoiceDTO.INVOICE_CREATE) || invoice.getInvoiceStatus().equals(InvoiceDTO.INVOICE_DENY)) {
				form.setUpdateInvoice(false);
			} else {
				form.setUpdateInvoice(true);
			}							
			
		} else {
			form.setUpdateInvoice(false);
		}
		
		// get the vender for user
		UserManagerBean uMgr = new UserManagerBean();	
		ArrayList<Long> locationIDs = new ArrayList<Long>();
		
		ArrayList <ApVendorDTO> vendorList = new ArrayList  <ApVendorDTO> ();
		

		
		
		if (form.getLocationID() == 0) {
			//vendorList = null;
//			String [] stringLocationIDs = uMgr.getUserLocationIds(user.getId());
//			for(int i=0;i<stringLocationIDs.length;i++){
//				locationIDs.add( Long.parseLong(stringLocationIDs[i]));
//			}
//			ArrayList <ApVendorLocationDTO> apVendorLocationList = apVendorLocationDao.getApVendorLocationByLocationIDs(locationIDs);
//			ArrayList<Long> vendorIDs = new ArrayList<Long>();
//			for ( ApVendorLocationDTO apVendorLocation : apVendorLocationList ) {
//				vendorIDs.add(apVendorLocation.getVendorID());
//			}
//		//	vendorIDs.add(null);
//		 vendorInfoList = vendorDao.getApVendorByVendorIDs(true,vendorIDs);
				
		}
		else {
			locationIDs.add( form.getLocationID());
			ArrayList <ApVendorLocationDTO> apVendorLocationList = apVendorLocationDao.getApVendorLocationByLocationIDs(locationIDs);
			ArrayList<Long> vendorIDs = new ArrayList<Long>();
			for ( ApVendorLocationDTO apVendorLocation : apVendorLocationList ) {
				vendorIDs.add(apVendorLocation.getVendorID());
			}
			vendorList = vendorDao.getApVendorByVendorIDs(true,vendorIDs);
		}
		// end getting vender for user		
		
		
//		if (vendorList.size() == 1) {
//			form.setVendorID((int)((ApVendorDTO)vendorList.get(0)).getVendorID());
//		}
		
		DbSpeedData[] speedData = FdmsDb.getInstance().getSpeedData(user.getDbLookup(), user.getRegion(), "PLCATGRY");
		form.setGlCategories(getGLCategory ( speedData ));
		//form.setCheckingStatusList(getCheckingStatus(form));
		form.setType1099Values(get1099Types());
		
		//session.setAttribute("vendorListAll", vendorList);
		session.setAttribute("vendorListAll", vendorList);
		session.setAttribute("locationListAll", locations);	
		session.setAttribute("stateList", stateList);
		
		//get the data to the vendor info
		ArrayList <ApVendorDTO> vendorInfoList = new ArrayList  <ApVendorDTO> ();
		{
			String [] stringLocationIDs = uMgr.getUserLocationIds(user.getId());
			for(int i=0;i<stringLocationIDs.length;i++){
				locationIDs.add( Long.parseLong(stringLocationIDs[i]));
			}
			ArrayList <ApVendorLocationDTO> apVendorLocationList = apVendorLocationDao.getApVendorLocationByLocationIDs(locationIDs);
			ArrayList<Long> vendorIDs = new ArrayList<Long>();
			for ( ApVendorLocationDTO apVendorLocation : apVendorLocationList ) {
				vendorIDs.add(apVendorLocation.getVendorID());
			}
			
			vendorInfoList = vendorDao.getApVendorByVendorIDs(true,vendorIDs);		
			
			for (ApVendorDTO vendor: vendorInfoList) {
				vendor.setName(vendor.getName().replace("\"", "'"));
				if (vendor.getAddr1() != null ){
					vendor.setAddr1(vendor.getAddr1().replace("\"", "'"));
				} else {
					vendor.setAddr1("");
				}
				if (vendor.getAddr2() != null) {
					vendor.setAddr2(vendor.getAddr2().replace("\"", "'"));
				}	else {
					vendor.setAddr2("");
				}
				if (vendor.getCityState() != null) {
					vendor.setCityState(vendor.getCityState().replace("\"", "'"));
				} else {
					vendor.setCityState("");
				}
				if (vendor.getVendorState() != null) {
					vendor.setVendorState(vendor.getVendorState().replace("\"", "'"));
				}else {
					vendor.setVendorState("");
				}
				if (vendor.getPostalCode() != null) {
					vendor.setPostalCode(vendor.getPostalCode().replace("\"", "'"));
				} else {
					vendor.setPostalCode("");
				}
			}
		}
		session.setAttribute("vendorInfoList", vendorInfoList);
		
		
		
		// get the vender for user
		String [] stringLocationIDs = uMgr.getUserLocationIds(user.getId());
		ArrayList<Long> locationAllIDs = new ArrayList<Long>();
		for(int i=0;i<stringLocationIDs.length;i++){
			locationAllIDs.add( Long.parseLong(stringLocationIDs[i]));
		}
		ArrayList <ApVendorLocationDTO> apVendorLocationListAll = apVendorLocationDao.getApVendorLocationByLocationIDs(locationAllIDs);
//		ArrayList<Long> vendorAllIDs = new ArrayList<Long>();
//		for ( ApVendorLocationDTO apVendorLocation : apVendorLocationListAll ) {
//			vendorAllIDs.add(apVendorLocation.getVendorID());
//		}
//		ArrayList <ApVendorDTO> vendorListAll = vendorDao.getApVendorByVendorIDs(true,vendorAllIDs);
		// end getting vender for user	
		String [] jsVendorIDs = new String[1];
		if (form.getLocationID() == 0) {
			 jsVendorIDs[0] = "0";
		}else {
			 jsVendorIDs[0] = String.valueOf(form.getVendorID());
		}
		String js = uMgr.createLocationWithVendorJavascript ( apVendorLocationListAll, jsVendorIDs, user );
		form.setLocationVendorMapJavascript(js);	
		
	}
	
	private ArrayList <LabelValueBean> getGLCategory( DbSpeedData[] speedData ) {
		
		ArrayList <LabelValueBean> array = new ArrayList <LabelValueBean> ();
		
		for ( DbSpeedData data : speedData ) {
			LabelValueBean lvb = new LabelValueBean();
			String listValue = CsvTable.getField(data.getData(), 2);
			String listLabel = CsvTable.getField(data.getData(), 1);
			lvb.setLabel(listValue);
			lvb.setValue(listLabel);
			array.add(lvb);
		}
		
		return ( array );		
	}
	
	
//	private ArrayList <LabelValueBean> getCheckingStatus( InvoiceEditDisplayForm invoice ) {
//		
//		ArrayList <LabelValueBean> array = new ArrayList <LabelValueBean> ();
//
//		LabelValueBean lvb3 = new LabelValueBean("Save Invoice", "3");
//		LabelValueBean lvb1 = new LabelValueBean("Print Check Now", "1");
//		LabelValueBean lvb1_done = new LabelValueBean("Check Already Created", "1");
//		LabelValueBean lvb2 = new LabelValueBean("Check Generated Manually", "2");
//		
//		if ( invoice.isCheckCreated() ) {
//			
//			switch ( invoice.getCheckingStatus() ) {
//				case 1 :
//					array.add(lvb1_done);
//					break;
//				case 2 :
//					array.add(lvb2);
//					break;
//				case 3 :	
//					array.add(lvb3);
//					break;
//				default : 
//					array.add(lvb3);
//					break;
//			}
//			
//		} else {
//			array.add(lvb3);
//			array.add(lvb1);
//			array.add(lvb2);
//		}
//		
//		return ( array );		
//	}

	private ArrayList <LabelValueBean> get1099Types( ) {
		
		ArrayList <LabelValueBean> array = new ArrayList <LabelValueBean> ();

//		array.add ( new LabelValueBean("1099-A",Integer.toString(Constants.TYPE_1099_A) ) );
//		array.add ( new LabelValueBean("1099-B",Integer.toString(Constants.TYPE_1099_B) ) );
//		array.add ( new LabelValueBean("1099-C",Integer.toString(Constants.TYPE_1099_C) ) );
//		array.add ( new LabelValueBean("1099-CAP",Integer.toString(Constants.TYPE_1099_CAP) ) );
//		array.add ( new LabelValueBean("1099-DIV",Integer.toString(Constants.TYPE_1099_DIV) ) );
//		array.add ( new LabelValueBean("1099-G",Integer.toString(Constants.TYPE_1099_G) ) );
//		array.add ( new LabelValueBean("1099-H",Integer.toString(Constants.TYPE_1099_H) ) );
//		array.add ( new LabelValueBean("1099-INT",Integer.toString(Constants.TYPE_1099_INT) ) );
//		array.add ( new LabelValueBean("1099-LTC",Integer.toString(Constants.TYPE_1099_LTC) ) );
		array.add ( new LabelValueBean("1099-MISC",Integer.toString(Constants.TYPE_1099_MISC) ) );
//		array.add ( new LabelValueBean("1099-OID", Integer.toString(Constants.TYPE_1099_OID) ) );
//		array.add ( new LabelValueBean("1099-PART",Integer.toString(Constants.TYPE_1099_PART) ) );
//		array.add ( new LabelValueBean("1099-Q",Integer.toString(Constants.TYPE_1099_Q) ) );
//		array.add ( new LabelValueBean("1099-R",Integer.toString(Constants.TYPE_1099_R) ) );
//		array.add ( new LabelValueBean("1099-S",Integer.toString(Constants.TYPE_1099_S) ) );
//		array.add ( new LabelValueBean("1099-SA",Integer.toString(Constants.TYPE_1099_SA) ) );
		
		return ( array );		
	}
	
}