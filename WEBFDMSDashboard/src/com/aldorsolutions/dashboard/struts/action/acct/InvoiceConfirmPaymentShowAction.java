/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.aldorsolutions.dashboard.struts.action.acct;

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Date;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;

import com.aldorassist.webfdms.dao.InvoiceDAO;
import com.aldorassist.webfdms.dao.LocationDAO;
import com.aldorassist.webfdms.model.InvoiceDTO;
import com.aldorassist.webfdms.model.LocationDTO;
import com.aldorsolutions.dashboard.struts.form.acct.InvoiceConfirmPaymentForm;
import com.aldorsolutions.webfdms.beans.DbUserSession;
import com.aldorsolutions.webfdms.beans.display.InvoiceConfirmPaymentBean;
import com.aldorsolutions.webfdms.checkwriter.dao.ApVendorDAO;
import com.aldorsolutions.webfdms.checkwriter.model.ApVendorDTO;
import com.aldorsolutions.webfdms.util.FormatDate;
import com.aldorsolutions.webfdms.util.FormatNumber;
import com.aldorsolutions.webfdms.util.SessionValueKeys;

/** 
 * MyEclipse Struts
 * Creation date: 09-24-2007
 * 
 * XDoclet definition:
 * @struts.action path="/invoiceConfirmPayment" name="invoiceConfirmPaymentForm" scope="request" validate="true"
 */
public class InvoiceConfirmPaymentShowAction extends Action {
	
	private Logger logger = Logger.getLogger(InvoiceConfirmPaymentShowAction.class.getName());


	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		InvoiceConfirmPaymentForm invoiceConfirmPaymentForm = (InvoiceConfirmPaymentForm) form;// TODO Auto-generated method stub
		ActionMessages errors = new ActionMessages();	
		HttpSession session =  request.getSession();
        DbUserSession user = (DbUserSession) session.getAttribute(SessionValueKeys.DB_USER);
        
		ApVendorDAO vendorDao = new ApVendorDAO(user);
		LocationDAO locationDao = new LocationDAO(user);
        InvoiceDAO invoiceDAO = new InvoiceDAO(user);
 		InvoiceConfirmPaymentBean bean = null;
		String [] selectedInvoices = (String [])request.getAttribute("SELECTEDINVOICES");
		ArrayList <ApVendorDTO> vendors = vendorDao.getApVendor(true);
		ArrayList <InvoiceConfirmPaymentBean> confirmBean = new ArrayList <InvoiceConfirmPaymentBean> ();
		ArrayList <LocationDTO> locations = new ArrayList <LocationDTO> ();
		ArrayList <InvoiceDTO> confirmInvoices = new ArrayList <InvoiceDTO> ();
		
			// get our location record
		try {
			locations = locationDao.getLocations(user.getCompanyID(), false);
		} catch ( Exception e ) {
			logger.debug(e.getMessage(), e);
			errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.exception", e.getMessage()) );
			saveMessages(request, errors);
		}

		confirmInvoices = invoiceDAO.getInvoices(selectedInvoices);
		
		
			// Go thru the array list and pull the invoice data.
		for ( InvoiceDTO confirmInvoice : confirmInvoices) {
			
//			if ( confirmInvoice.isInvoicePaid() ) {
//				errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.acct.invoicePaid", confirmInvoice.getInvoiceID()) );
//				continue;
//			}
			
			bean = new InvoiceConfirmPaymentBean();
			double netInvoice = 0;
			bean.setInvoiceID(confirmInvoice.getInvoiceID());
			bean.setInvoiceNumber(confirmInvoice.getInvoiceNumber());
			bean.setDiscountAmount(0.0);
			netInvoice = confirmInvoice.getAmountOfInvoice();
			if (confirmInvoice.isDiscountFlag() == true) {
				netInvoice = confirmInvoice.getAmountOfInvoice() - confirmInvoice.getDiscountAmount();
				bean.setDiscountAmount(confirmInvoice.getDiscountAmount());
			}
			
			
			//long dollars = ((int)confirmInvoice.getAmountOfInvoice());
			//double cents = (confirmInvoice.getAmountOfInvoice() - dollars)*100.0;
			long dollars = ((int) netInvoice);
			double cents = (netInvoice - dollars)*100.0;
			
			DecimalFormat dollarFormat = new DecimalFormat("#,##0");
			DecimalFormat centsFormat = new DecimalFormat(" and #0");
			String longFormat = dollarFormat.format(dollars) + centsFormat.format(cents) + "/100";
			
			bean.setAmountOfInvoiceLong(longFormat);
			bean.setCheckCreated( confirmInvoice.isCheckCreated() );
			bean.setAmountOfInvoice(confirmInvoice.getAmountOfInvoice());
			bean.setNetInvoice(netInvoice);
			bean.setInvoiceDate(FormatDate.convertDateToMM_DD_YYYY(confirmInvoice.getInvoiceDate()));
			bean.setInvoiceDueDate(FormatDate.convertDateToMM_DD_YYYY(confirmInvoice.getInvoiceDueDate()));			
			bean.setInvoiceDiscountDueDate(FormatDate.convertDateToMM_DD_YYYY(confirmInvoice.getDiscountDueDate()));
			
			for ( ApVendorDTO vendor : vendors ) {
				if ( vendor.getVendorID() == confirmInvoice.getVendorID() ) {
					//bean.setVendorCode(Integer.toString(vendor.getDefaultAcct()));
					bean.setVendorCode(vendor.getVendorCode());
					bean.setPayee(vendor.getName());
					break;
				}
			}
			
			
			for ( LocationDTO location : locations ) {
				if ( location.getLocationID() == confirmInvoice.getLocationID() ) {
					bean.setCheckNumber(location.getNextCheckNumber());
						// Add one to the check number so that the next check number is correct
					location.setNextCheckNumber(location.getNextCheckNumber() + 1);
						// The balance that we want to display is the new balance after we have
					    // subtracted this invoice.
					long cashBalance = location.getCashBalance() - FormatNumber.round(confirmInvoice.getAmountOfInvoice());
					
					location.setCashBalance(cashBalance);
					bean.setBalance( (cashBalance /100.0) );
					break; 
				}
			}

			bean.setCheckDate(FormatDate.convertDateToMM_DD_YYYY(new Date()));
			bean.setSignature(user.getFirstName() + " " + user.getLastName() );
			bean.setMemo(confirmInvoice.getDescription());
			
			confirmBean.add(bean);
		}
		
		if ( errors.isEmpty() == false ) {
			saveErrors(request, errors);
		}
		
		invoiceConfirmPaymentForm.setInvoices(confirmBean);		
		return mapping.findForward("showConfirmPage");
		
	}
}