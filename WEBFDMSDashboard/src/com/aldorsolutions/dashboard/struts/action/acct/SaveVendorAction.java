/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 * CJongs
 */
package com.aldorsolutions.dashboard.struts.action.acct;

import java.util.ArrayList;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.apache.struts.action.ActionRedirect;

import com.aldorassist.webfdms.delegate.InvoiceManager;
import com.aldorsolutions.dashboard.struts.form.acct.InvoiceEditDisplayForm;
import com.aldorsolutions.dashboard.struts.form.acct.VendorForm;
import com.aldorsolutions.webfdms.admin.user.model.UserLocaleDTO;
import com.aldorsolutions.webfdms.admin.user.model.UserLocationDTO;
import com.aldorsolutions.webfdms.beans.DbApAccount;
import com.aldorsolutions.webfdms.beans.DbUserSession;
import com.aldorsolutions.webfdms.checkwriter.dao.ApVendorDAO;
import com.aldorsolutions.webfdms.checkwriter.dao.ApVendorLocationDAO;
import com.aldorsolutions.webfdms.checkwriter.model.ApVendorDTO;
import com.aldorsolutions.webfdms.checkwriter.model.ApVendorLocationDTO;
import com.aldorsolutions.webfdms.checkwriter.model.ApVendorLocationDisplayDTO;
import com.aldorsolutions.webfdms.util.FormatNumber;
import com.aldorsolutions.webfdms.util.SessionValueKeys;


/** 
 * MyEclipse Struts
 * Creation date: 06-25-2007
 * 
 * XDoclet definition:
 * @struts.action path="/acctSaveVendors" name="acctEditVendorsForm" input="/acct/acctEditVendors.jsp" scope="request" validate="true"
 * @struts.action-forward name="vendorList" path="/acct/acctListVendors.jsp" redirect="true"
 */
public class SaveVendorAction extends Action {
	/*
	 * Generated Methods
	 */

	private Logger logger = Logger.getLogger(AcctVendorsEditAction.class.getName());
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		
		VendorForm vendorsForm = (VendorForm) form;
		HttpSession session =  request.getSession();
        DbUserSession user = (DbUserSession) session.getAttribute(SessionValueKeys.DB_USER);
        ActionMessages errors = new ActionMessages();
		if ( "Cancel".equals(vendorsForm.getSubmitType() ) ) {
			//session.removeAttribute("acctListVendorsSearchForm");
			//ActionForward fwd = mapping.findForward("vendorListSearch");
			//return new ActionForward(mapping.getInput());	
			return mapping.findForward("invoiceEdit");	
		} else if ( "Delete".equals(vendorsForm.getSubmitType()) || "Inactive".equals(vendorsForm.getSubmitType()) ) {
			long vendorID = vendorsForm.getVendorID();
			if ( vendorID <=0 ) {
				
				String missingLoc = getResources(request).getMessage("error.acct.vendor.missingVendor");
				
				errors.add ( ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.exception", missingLoc) );
				saveErrors(request, errors);
				
				return ( mapping.findForward("vendorEdit") );
			}
			else {
				ApVendorDAO vendorDao = new ApVendorDAO(user);
				 ApVendorDTO vendor = new ApVendorDTO();
				 
				 vendor = vendorDao.getApVendor(vendorsForm.getVendorID());
				 vendor.setDeleteCode("D");
				 vendorDao.updateApVendor(vendor);
				 
				
			}
			session.removeAttribute("acctListVendorsSearchForm");
			session.removeAttribute("acctEditVendorsForm");
			return mapping.findForward("vendorListSearch");
		}
		
		
		
		
		if ( "Add Location".equals(vendorsForm.getSubmitType()) ) {
			
			try {	
				saveLocation ( vendorsForm, user, session, request, errors ); 
			}
			 catch ( Exception e ) {
					logger.debug(e.getMessage(), e);
			}
			return mapping.getInputForward();
		}
		
		if ( "Remove Location".equals(vendorsForm.getDirection()) ) {
			
			try {	
				String vendorLocationIDStr = vendorsForm.getRemoveVendorLocationID();
				long vendorLocID = FormatNumber.parseLong(vendorLocationIDStr);
				removeLocation ( vendorsForm, user, session, request, errors, vendorLocID ); 
			}
			 catch ( Exception e ) {
					logger.debug(e.getMessage(), e);
			}
			//return mapping.getInputForward();
			
			ActionRedirect forward = new ActionRedirect (mapping.findForward("showVendorEdit")); 	
			forward.addParameter("vendorID", String.valueOf(vendorsForm.getVendorID()) );
			return ( forward );
		}
		
		//ApVendorDAO vendorDao = new ApVendorDAO(user);
		long vendorID = vendorsForm.getVendorID();
		
		
		if ( vendorID <0 ) {
			String missingLoc = getResources(request).getMessage("error.acct.vendor.missingVendor");
			
			errors.add ( ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.exception", missingLoc) );
			saveErrors(request, errors);
			
			return ( mapping.findForward("vendorEdit") );
		}
		    
		if (vendorID == 0) {
			try {	
				vendorID = saveLocation ( vendorsForm, user, session, request, errors ); 
			}
			 catch ( Exception e ) {
					logger.debug(e.getMessage(), e);
			}
		}
		else {
			try {
				vendorID = saveVendor(vendorsForm, user, session, request, errors);
			}
			 catch ( Exception e ) {
					logger.debug(e.getMessage(), e);
			}
		}
		if (!errors.isEmpty()){
			ActionForward fwd = mapping.findForward("vendorEdit");
			return new ActionForward(mapping.getInput());
		}
		
		ApVendorLocationDAO apVendorLocationDao = new ApVendorLocationDAO(user);
		ArrayList<Long> locationIDs = new ArrayList<Long>();
		locationIDs.add( (long) user.getLocationId());
		ArrayList <ApVendorLocationDTO> apVendorLocationList = apVendorLocationDao.getApVendorLocationByLocationIDs(locationIDs);
		ArrayList<Long> vendorIDs = new ArrayList<Long>();
		for ( ApVendorLocationDTO apVendorLocation : apVendorLocationList ) {
			vendorIDs.add(apVendorLocation.getVendorID());
		}
		ApVendorDAO vendorDao = new ApVendorDAO(user);
		ArrayList <ApVendorDTO> vendorList = new ArrayList  <ApVendorDTO> ();
		vendorList = vendorDao.getApVendorByVendorIDs(true,vendorIDs);
		session.setAttribute("vendorListAll", vendorList);
		
		InvoiceEditDisplayForm invoiceEditDisplayForm = (InvoiceEditDisplayForm) session.getAttribute("invoiceEditDisplayForm");
		invoiceEditDisplayForm.setVendorID(vendorID);
		session.setAttribute("invoiceEditDisplayForm", invoiceEditDisplayForm);
		
		session.removeAttribute("acctListVendorsSearchForm");
//		session.removeAttribute("acctEditVendorsForm");
//		return mapping.findForward("vendorListSearch");
		//return mapping.findForward("addInvoice");	
		return mapping.findForward("invoiceEdit");	
	}
	
	private int saveVendor (VendorForm vendorsForm, DbUserSession user, 
			HttpSession session, HttpServletRequest request,ActionMessages errors  ) throws Exception {
		
		ApVendorDAO vendorDao = new ApVendorDAO(user);
		//long vendorID = acctEditVendorsForm.getVendorID();	
		
		boolean duplicateCode = false;
		duplicateCode = checkVendorCode(user, vendorsForm);
		boolean containQuote = false;
	    containQuote = (vendorsForm.getName().contains("\'") || vendorsForm.getName().contains("\""));
	    if ( !duplicateCode && !containQuote) {
	    	

	    ApVendorDTO vendor = new ApVendorDTO();
	    
		  vendor.setVendorCode(vendorsForm.getVendorCode());
			vendor.setAddr1(vendorsForm.getAddr1());
			vendor.setAddr2(vendorsForm.getAddr2());
			vendor.setCityState(vendorsForm.getCityState());
			vendor.setVendorState(vendorsForm.getVendorState());	
			vendor.setVendorCountry(vendorsForm.getVendorCountry());			
			vendor.setContactName(vendorsForm.getContactName());
			vendor.setDeleteCode(vendorsForm.getDeleteCode());
			vendor.setEmailAddr(vendorsForm.getEmailAddr());
			vendor.setName(vendorsForm.getName());
			vendor.setNotes(vendorsForm.getNotes());
			vendor.setPhone(vendorsForm.getPhone());
			vendor.setPhone2(vendorsForm.getPhone2());		
			vendor.setPostalCode(vendorsForm.getPostalCode());
			//vendor.setDefaultAcct(FormatNumber.parseInteger(acctEditVendorsForm.getDefaultAcct()));
			vendor.setLocaleID(vendorsForm.getLocaleID());
			vendor.setLocationID(vendorsForm.getLocationID());
		
			
			vendor.setVendorID(vendorsForm.getVendorID());
			vendor.setInternalVendor( Boolean.parseBoolean(vendorsForm.getInternalVendor()) );
			
			vendor.setFax(vendorsForm.getFax());
			vendor.setAccountNumber(vendorsForm.getAccountNumber());
			vendor.setDiscountPercentage(vendorsForm.getDiscountPercentage());
			//vendor.setDiscountIfInDays(acctEditVendorsForm.getDiscountIfInDays());
			//vendor.setDiscountDueInDays(acctEditVendorsForm.getDiscountDueInDays());
			vendor.setDiscountIfInDays(0);
			vendor.setDiscountDueInDays(0);
			vendor.setVendor1099Type(vendorsForm.getVendor1099Type());
			//vendor.setVendor1099Payment(acctEditVendorsForm.getVendor1099Payment());
			float initValue = 0;
			vendor.setVendor1099Payment(initValue);
			vendor.setTaxID(vendorsForm.getTaxID());
			vendor.setApprovedVendor(vendorsForm.getApprovedVendor());
			vendor.setCreditLimit(vendorsForm.getCreditLimit());
			vendor.setDefaultAcctID((int) vendorsForm.getApAccountID());


		    if (vendor.getVendorID() == 0){
				long localeID = 0;
				long locationID = 0;		
//				if ( vendorsForm.getLocaleIds().length > 0 ) {
//					localeID = FormatNumber.parseLong(vendorsForm.getLocaleIds()[0]);
//				}
//				
//				if ( vendorsForm.getLocationIds().length > 0 ) {
//					locationID = FormatNumber.parseLong(vendorsForm.getLocationIds()[0]);
//				}
				localeID = user.getRegion();
				locationID = user.getLocationId();
				vendor.setLocaleID(localeID);
				//vendor.setLocationID(locationID);
				vendor.setLocationID(Long.parseLong(session.getAttribute("locationId").toString()));
		       vendorDao.addApVendor(vendor);	
		    }
		    else {
				vendorDao.updateApVendor(vendor);	
				
				// update each apvendorlocations to have the same defAcctID
		        ApVendorLocationDAO vendorLocDAO = new ApVendorLocationDAO(user);
		        ArrayList <ApVendorLocationDTO> vendorLocs = vendorLocDAO.getApVendorLocationByVendorID(vendor.getVendorID());
		        for (ApVendorLocationDTO vendorLocForUser : vendorLocs) {
		        	vendorLocForUser.setDefaultAcctID(vendor.getDefaultAcctID());
		        	vendorLocDAO.updateApVendorLocation(vendorLocForUser);
		    	  }	  
		    }	
		    return (int) vendor.getVendorID();
	    } else {
			
	    	if (duplicateCode) {
				errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.acct.vendor.DuplicateCode", "") );
			}
			if (containQuote) {
				errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.acct.vendor.Name"));
			}
			saveErrors(request, errors);	
			return 0;
	    }       
		
	   
	}
	
	private int saveLocation (VendorForm vendorsForm, DbUserSession user, 
			HttpSession session, HttpServletRequest request, ActionMessages errors ) throws Exception {
		
		ArrayList vendorLocs = (ArrayList) session.getAttribute("ADMIN_VENDOR_LOCATIONS");
		ArrayList <UserLocaleDTO> locales = (ArrayList) session.getAttribute("ADMIN_LOCALES");
		ArrayList <UserLocationDTO> locations = (ArrayList) session.getAttribute("ADMIN_LOCATIONS");	
	    
		long vendorID = 0;
		long localeID = -1;
		long locationID = -1;	
		
		//long defaultAcctID = FormatNumber.parseLong(acctEditVendorsForm.getNewDefaultAcctNum());
		
//		if ( vendorsForm.getLocaleIds().length > 0 ) {
//			localeID = FormatNumber.parseLong(vendorsForm.getLocaleIds()[0]);
//		}
//		
//		if ( vendorsForm.getLocationIds().length > 0 ) {
//			locationID = FormatNumber.parseLong(vendorsForm.getLocationIds()[0]);
//		}
		
		localeID = user.getRegion();
		locationID = user.getLocationId();
		
		ApVendorLocationDTO vendorLoc = new ApVendorLocationDTO();

		
		boolean hasSet = false;
		if (vendorsForm.getVendorID() != 0){

			ApVendorLocationDAO vendorLocDao = new ApVendorLocationDAO(user);
			ArrayList<ApVendorLocationDTO> locationlist = new ArrayList <ApVendorLocationDTO> (); 
			locationlist = vendorLocDao.getApVendorLocationByVendorID(vendorsForm.getVendorID());
			for (ApVendorLocationDTO location: locationlist ) {
				if (location.getLocaleID() == localeID && location.getLocationID() == locationID) {
					hasSet = true;
					break;
				}
			}
		}
		
		boolean duplicateCode = false;
		duplicateCode = checkVendorCode(user, vendorsForm);
		boolean containQuote = false;
	    containQuote = (vendorsForm.getName().contains("\'") || vendorsForm.getName().contains("\""));
	        
		

		//vendorLoc.setDefaultAcct(vendorLocEditForm.getDefaultAcct());
		// if it is not duplicate locale, location or code.
		if (!hasSet && !duplicateCode && !containQuote) {		
		
			ApVendorDAO vendorDao = new ApVendorDAO(user);
			if (vendorsForm.getVendorID() == 0){
				
				//save the vendor either new vendor or edit it.
				try {
					vendorID = saveVendor(vendorsForm, user, session, request, errors);
				}
				 catch ( Exception e ) {
						logger.debug(e.getMessage(), e);
				}				
				//ArrayList <ApVendorDTO> vendors = vendorDao.getApVendorByName(true,acctEditVendorsForm.getName());
				ArrayList <ApVendorDTO> vendors = vendorDao.getApVendorByCode(true,vendorsForm.getVendorCode());
//				long vendorID = 0;
				for (ApVendorDTO vendor : vendors) {
					vendorID = vendor.getVendorID();
				}
				vendorLoc.setVendorID(vendorID);
			}
			else {
			        vendorLoc.setVendorID(vendorsForm.getVendorID());	
			}	
		
	        vendorLoc.setDefaultAcctID((int) vendorsForm.getApAccountID());
	        vendorLoc.setLocaleID(localeID);
	        //    vendorLoc.setLocationID(locationID);
	        vendorLoc.setLocationID(Long.parseLong(session.getAttribute("locationId").toString()));
	        vendorLoc.setVendorLocationID(0);
	    
			ApVendorLocationDisplayDTO display = new ApVendorLocationDisplayDTO();
	    	display.setVendorLocationID( vendorLoc.getVendorLocationID() );
	    	
	    	InvoiceManager imvMgr = new InvoiceManager();
	    	DbApAccount account = imvMgr.getAccount(request, vendorLoc.getDefaultAcctID());
	    	
	    	if (account == null) {
	    		display.setDefaultAcct( "");
	    	}else {
	    		display.setDefaultAcct( account.getAccountNumber() );
	    	}
	
	    	display.setLocaleName( String.valueOf(vendorLoc.getLocaleID()) );
	    	display.setLocationName( String.valueOf(vendorLoc.getLocationID()) );
	    	  	
	    	for ( UserLocationDTO loc : locations ) {
	    		long locID = loc.getLocationId();
	    		if ( locID == vendorLoc.getLocationID() ) {
	    			display.setLocationName(loc.getName());
	    			break;
	    		}
	    	}
	    	
	    	for ( UserLocaleDTO loc : locales ) {
	    		long locID = FormatNumber.parseLong(loc.getLocaleId());
	    		if ( locID == vendorLoc.getLocaleID() ) {
	    			display.setLocaleName(loc.getName());
	    			break;
	    		}
	    	}
	    	
	    	//This is for preset the default account Number to the default of vendor for all location
			try {
				//InvoiceManager imvMgr = new InvoiceManager();
				
				account = imvMgr.getAccount(request, vendorsForm.getApAccountID());
				vendorLoc.setDefaultAcctID((int) vendorsForm.getApAccountID());
				if (account == null) {
					display.setDefaultAcct("");
				}
				else {
					display.setDefaultAcct(account.getAccountNumber());
				}
			
			} catch ( Exception e ) {
				logger.debug("Exception: ", e);
				errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.exception", e.getMessage()) );
				saveErrors(request, errors);
			}       	
	    	
	        ApVendorLocationDAO vendorLocDAO = new ApVendorLocationDAO (user);
	        vendorLocDAO.addApVendorLocation(vendorLoc);  
	        ApVendorLocationDTO  vendorLocation = vendorLocDAO.getApVendorLocationByVendorIDLocaleIDLocationID(vendorLoc.getVendorID(),vendorLoc.getLocaleID(),vendorLoc.getLocationID());
	        display.setVendorLocationID(vendorLocation.getVendorLocationID());
	        vendorLocs.add(display);
	        vendorsForm.setNewDefaultAcctNum("");
	        return (int) vendorID;
		}
		else {
			if (hasSet) {
				errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.acct.vendor.DuplicateLocation", "") );
			}
			if (duplicateCode) {
				errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.acct.vendor.DuplicateCode", "") );
			}
			if (containQuote) {
				errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.acct.vendor.Name"));
			}
			saveErrors(request, errors);	
			return 0;
		}
	}
	
	private boolean checkVendorCode(DbUserSession user,VendorForm vendorsForm){
		boolean duplicateCode = false;
		ApVendorDAO vendorDaoC = new ApVendorDAO(user);
		ArrayList<ApVendorDTO> vendorlistC = new ArrayList <ApVendorDTO>();
		vendorlistC =	vendorDaoC.getApVendorByCode(true,vendorsForm.getVendorCode());
		if (vendorlistC.size() > 0) {
			if (vendorsForm.getVendorID() == 0) {
				duplicateCode = true;
			}else {
				for (ApVendorDTO vendor : vendorlistC) {
					if(vendor.getVendorID() == vendorsForm.getVendorID() ) {
						continue;
					} else {
						if(vendor.getVendorCode().compareToIgnoreCase(vendorsForm.getVendorCode())== 0 ){
							duplicateCode = true;
						}
					}
				}
			}	
		}
		return duplicateCode;
	}
	
	private void removeLocation (VendorForm vendorsForm, DbUserSession user, 
			HttpSession session, HttpServletRequest request, ActionMessages errors, long vendorLocID ) throws Exception {

		ApVendorLocationDAO vendorLocDao = new ApVendorLocationDAO(user);

		if (vendorLocID <= 0) {
			String missingLoc = getResources(request).getMessage("error.acct.vendor.missingVendor");

			errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.exception", missingLoc));
			saveErrors(request, errors);	
		} 
			ApVendorLocationDTO vendorLoc = vendorLocDao.getApVendorLocation(vendorLocID);
			
			ArrayList<ApVendorLocationDTO> locationlist = new ArrayList <ApVendorLocationDTO>(); 
			locationlist = vendorLocDao.getApVendorLocationByVendorID(vendorLoc.getVendorID());
			if (locationlist.size() > 1) {
				vendorLocDao.deleteApVendorLocation(vendorLocID);
			}
			else {
				String cannotRemove = getResources(request).getMessage("error.acct.vendor.RemoveLastLocation");
				errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.exception", cannotRemove));			
				saveErrors(request, errors);			
			}
	}
	
}