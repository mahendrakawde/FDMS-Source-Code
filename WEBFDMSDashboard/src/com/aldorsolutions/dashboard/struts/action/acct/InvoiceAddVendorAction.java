/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 * CJongs
 */
package com.aldorsolutions.dashboard.struts.action.acct;

import java.util.ArrayList;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionError;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.apache.struts.util.LabelValueBean;

import com.aldorassist.webfdms.delegate.InvoiceManager;
import com.aldorsolutions.dashboard.struts.form.acct.AcctEditVendorsForm;
import com.aldorsolutions.dashboard.struts.form.acct.VendorForm;
import com.aldorsolutions.webfdms.admin.user.bean.UserManagerBean;
import com.aldorsolutions.webfdms.admin.user.dao.UserDAO;
import com.aldorsolutions.webfdms.admin.user.model.UserLocaleDTO;
import com.aldorsolutions.webfdms.admin.user.model.UserLocationDTO;
import com.aldorsolutions.webfdms.beans.DbApAccount;
import com.aldorsolutions.webfdms.beans.DbUserSession;
import com.aldorsolutions.webfdms.beans.FdmsDb;
import com.aldorsolutions.webfdms.checkwriter.dao.ApVendorDAO;
import com.aldorsolutions.webfdms.checkwriter.dao.ApVendorLocationDAO;
import com.aldorsolutions.webfdms.checkwriter.model.ApVendorDTO;
import com.aldorsolutions.webfdms.checkwriter.model.ApVendorLocationDTO;
import com.aldorsolutions.webfdms.checkwriter.model.ApVendorLocationDisplayDTO;
import com.aldorsolutions.webfdms.common.Constants;
import com.aldorsolutions.webfdms.database.DatabaseTransaction;
import com.aldorsolutions.webfdms.security.bean.SecurityManagerBean;
import com.aldorsolutions.webfdms.security.model.SecurityConfigDTO;
import com.aldorsolutions.webfdms.util.FormatNumber;
import com.aldorsolutions.webfdms.util.SessionHelpers;
import com.aldorsolutions.webfdms.util.SessionValueKeys;

/** 
 * MyEclipse Struts
 * Creation date: 06-25-2007
 * 
 * XDoclet definition:
 * @struts.action path="/acctEditVendors" name="acctEditVendorsForm" input="/acct/acctEditVendors.jsp" scope="request" validate="true"
 * @struts.action-forward name="listVendors" path="/acct/acctListVendors.jsp" redirect="true"
 */
public class InvoiceAddVendorAction extends Action {
	
	private Logger logger = Logger.getLogger(InvoiceAddVendorAction.class.getName());
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		VendorForm vendorForm = (VendorForm) form;

		HttpSession session =  request.getSession();
        DbUserSession user = (DbUserSession) session.getAttribute(SessionValueKeys.DB_USER);
        
        vendorForm.setDef_localeID(String.valueOf(user.getRegion()));
        vendorForm.setDef_locationID(String.valueOf(user.getLocationId()));
		ApVendorDAO vendorDao = new ApVendorDAO(user);
		
		
		ActionMessages errors = new ActionMessages();	
			
			SecurityManagerBean smBean = new SecurityManagerBean();
			SecurityConfigDTO security = smBean.getSecurityConfig(user.getCompanyID());
			vendorForm.setVendorCodeLength(String.valueOf(security.getVendorCodeLength()));
			
			  ApVendorDTO vendor = new ApVendorDTO();
			  
		       UserManagerBean uMgr = new UserManagerBean();
		        ApVendorLocationDAO vendorLocDAO = new ApVendorLocationDAO(user);
		        ArrayList <ApVendorLocationDTO> vendorLocs = vendorLocDAO.getApVendorLocationByVendorID(-1);
		        ArrayList <ApVendorLocationDisplayDTO> vendorDisplayLocs = new ArrayList <ApVendorLocationDisplayDTO> ();
		        ArrayList <UserLocationDTO> locations = uMgr.getLocations( user.getDbLookup(), (int) user.getId(), 
						user.getCompanyID(), user.getRegion() ); 
		        ArrayList <UserLocaleDTO> locales = uMgr.getLocales( user.getDbLookup(), (int) user.getId(), 
						user.getCompanyID(), user.getRegion());	 
		          
		        long localeID = 0;		        
		        for ( ApVendorLocationDTO myVendorLoc : vendorLocs ) {
		        	ApVendorLocationDisplayDTO display = new ApVendorLocationDisplayDTO();
		        	
		        	display.setVendorLocationID( myVendorLoc.getVendorLocationID() );
		        	
					DbApAccount		anAcct = getAnAccount( user,  myVendorLoc.getDefaultAcctID(),  errors);
					if (anAcct == null) {
						display.setDefaultAcct("");
						display.setDefaultAcctDesc("");
					}
					else {
						display.setDefaultAcct(anAcct.getAccountNumber());
						display.setDefaultAcctDesc(anAcct.getDescription());
					}
		        	
		        	
		        	display.setLocaleName( String.valueOf(myVendorLoc.getLocaleID()) );
		        	display.setLocationName( String.valueOf(myVendorLoc.getLocationID()) );
			        
		        
		        	
		        	for ( UserLocationDTO loc : locations ) {
		        		long locID = loc.getLocationId();
		        		if ( locID == myVendorLoc.getLocationID() ) {
		        			display.setLocationName(loc.getName());
		        			break;
		        		}
		        	}
		        	
		        	for ( UserLocaleDTO loc : locales ) {
		        		long locID = FormatNumber.parseLong(loc.getLocaleId());
		        		if ( locID == myVendorLoc.getLocaleID() ) {
		        			localeID = locID;		        			
		        			display.setLocaleName(loc.getName());
		        			break;
		        		}
		        	}
		        	
		        	vendorDisplayLocs.add(display);
		        	
		        }
		        try {
		        	SessionHelpers.setApAccountListInSession(request, user.getLocationId());
		        	
				} catch ( Exception e ) {
					logger.debug("Exception: ", e);
					errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.exception", e.getMessage()) );
					saveErrors(request, errors);
				}
				long apAcctID = 0;
				try {
					InvoiceManager imvMgr = new InvoiceManager();
					ArrayList <DbApAccount> accounts = imvMgr.getAccountList(request, user.getLocationId(),localeID);

					for ( DbApAccount account : accounts ) {
		        		String Id = account.getAccountNumber();
		        		
		        		if (vendor.getDefaultAcct() == null) {
		        			break;
		        		} else {
		        			String IdDefaultAcct = vendor.getDefaultAcct();
			        		if ( IdDefaultAcct.compareToIgnoreCase(Id) == 0  ) {
			        			apAcctID = account.getId();
			        			break;
			        		}
		        		}
		        	}
					
				} catch ( Exception e ) {
					logger.debug("Exception: ", e);
					errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.exception", e.getMessage()) );
					saveErrors(request, errors);
				}			
				

				vendorForm.setApAccountID(apAcctID);		        

		        vendorForm.setType1099Values(get1099Types());
		        

  	            
	            ArrayList <UserLocationDTO> userLocations = uMgr.getLocationsOfUser(
	            		user.getDbLookup(), 
	            		(int) user.getId(), user.getCompanyID(),  user.getRegion());
	            
		        session.setAttribute("ADMIN_LOCATIONS", userLocations);
		        ArrayList <UserLocaleDTO> userLocales = uMgr.getLocalesOfUser(user.getDbLookup(), (int) user.getId(), 
		        		user.getCompanyID(), user.getRegion());
		        
		        session.setAttribute("ADMIN_LOCALES", userLocales);
		        
		        session.setAttribute("ADMIN_VENDOR_LOCATIONS", vendorDisplayLocs);
		    	String js = uMgr.createLocaleJavascript ( locations, vendorForm.getLocationIds() );
		    	vendorForm.setLocaleMapJavascript(js);	

		

		
		
		return mapping.findForward("vendorEdit");
	}	
	
	private ArrayList <LabelValueBean> get1099Types( ) {
		ArrayList <LabelValueBean> array = new ArrayList <LabelValueBean> ();
		array.add ( new LabelValueBean("1099-MISC",Integer.toString(Constants.TYPE_1099_MISC) ) );
		return ( array );		
	}
	private DbApAccount getAnAccount(DbUserSession user, int recid, ActionMessages errors) {
		 DbApAccount		anAcct = null;
		 DatabaseTransaction t = null;
	     
		 try {
	         t = (DatabaseTransaction)DatabaseTransaction.getTransaction(user);
	         anAcct = FdmsDb.getInstance().getApAccount(t, recid);
		 } catch(Exception pe) {
	    		logger.debug("Exception: ", pe);
				errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.exception", pe.getMessage()) );
	            
	        } finally {
	            if (t != null) t.closeConnection();
	     }
		 return anAcct;
	}
	
	
}