/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.aldorsolutions.dashboard.struts.action.acct;

import java.util.ArrayList;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.apache.struts.action.ActionRedirect;

import com.aldorassist.webfdms.delegate.InvoiceManager;
import com.aldorsolutions.dashboard.struts.form.acct.VendorLocEditForm;
import com.aldorsolutions.webfdms.beans.DbApAccount;
import com.aldorsolutions.webfdms.beans.DbUserSession;
import com.aldorsolutions.webfdms.checkwriter.dao.ApVendorDAO;
import com.aldorsolutions.webfdms.checkwriter.dao.ApVendorLocationDAO;
import com.aldorsolutions.webfdms.checkwriter.model.ApVendorDTO;
import com.aldorsolutions.webfdms.checkwriter.model.ApVendorLocationDTO;
import com.aldorsolutions.webfdms.util.FormatNumber;
import com.aldorsolutions.webfdms.util.SessionValueKeys;

/** 
 * MyEclipse Struts
 * Creation date: 06-28-2007
 * 
 * XDoclet definition:
 * @struts.action path="/vendorLocEdit" name="vendorLocEditForm" input="/acct/vendorLocEdit.jsp" scope="request" validate="true"
 */
public class VendorLocSaveAction extends Action {
	/*
	 * Generated Methods
	 */
	private Logger logger = Logger.getLogger(AcctVendorsEditAction.class.getName());
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		VendorLocEditForm vendorLocEditForm = (VendorLocEditForm) form;
		ActionMessages errors = new ActionMessages();
		HttpSession session = request.getSession();
		DbUserSession user = (DbUserSession) session.getAttribute(SessionValueKeys.DB_USER);

		if ( "Cancel".equals(vendorLocEditForm.getSubmitType() ) ) {
			ActionRedirect forward = new ActionRedirect (mapping.findForward("showVendorEdit")); 
			forward.addParameter("vendorID", String.valueOf(vendorLocEditForm.getVendorID()) );
					
			return ( forward );
		}
		
		
		ApVendorLocationDAO vendorLocDao = new ApVendorLocationDAO(user);
		ApVendorLocationDTO vendorLoc = vendorLocDao.getApVendorLocation(vendorLocEditForm.getVendorLocationID());
		
		try {
			//InvoiceManager imvMgr = new InvoiceManager();
			//DbApAccount account = imvMgr.getAccount(request, vendorLocEditForm.getDefaultAcct());
			//vendorLoc.setDefaultAcct(FormatNumber.parseInteger(account.getAccountNumber()));
			
			ApVendorDAO vendorDao = new ApVendorDAO(user);
			ApVendorDTO vendor = vendorDao.getApVendor(vendorLocEditForm.getVendorID());
			vendorLoc.setDefaultAcctID(vendor.getDefaultAcctID());
			
		} catch ( Exception e ) {
			logger.debug("Exception: ", e);
			errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.exception", e.getMessage()) );
			saveErrors(request, errors);
		}		
		
		ArrayList<ApVendorLocationDTO> locationlist = (ArrayList) vendorLocDao.getApVendorLocationByVendorID(vendorLocEditForm.getVendorID());
		
		boolean hasSet = false;
		for (ApVendorLocationDTO location: locationlist ) {
			if (location.getLocaleID() == vendorLocEditForm.getLocaleID() && location.getLocationID() == vendorLocEditForm.getLocationID()) {
				hasSet = true;
				break;
			}
		}
		//vendorLoc.setDefaultAcct(vendorLocEditForm.getDefaultAcct());
		if (!hasSet) {
			vendorLoc.setLocaleID(vendorLocEditForm.getLocaleID());
			vendorLoc.setLocationID(vendorLocEditForm.getLocationID());
			vendorLoc.setVendorID(vendorLocEditForm.getVendorID());
			vendorLoc.setVendorLocationID(vendorLocEditForm.getVendorLocationID());
			vendorLocDao.updateApVendorLocation(vendorLoc);
		}
		else {
			errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.acct.vendor.DuplicateLocation", "") );
			saveErrors(request, errors);
			
			return (mapping.findForward("showLocEdit"));
			
		}
		ActionRedirect forward = new ActionRedirect (mapping.findForward("showVendorEdit")); 
		forward.addParameter("vendorID", String.valueOf(vendorLocEditForm.getVendorID()) );
				
		return ( forward );
	}
}