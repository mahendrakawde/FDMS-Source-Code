/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.aldorsolutions.dashboard.struts.action.acct;

import java.util.ArrayList;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.aldorassist.webfdms.dao.LocaleDAO;
import com.aldorassist.webfdms.dao.LocationDAO;
import com.aldorassist.webfdms.model.LocaleDTO;
import com.aldorassist.webfdms.model.LocationDTO;
import com.aldorassist.webfdms.model.LocationListDTO;
import com.aldorsolutions.dashboard.security.SecurityTag;
import com.aldorsolutions.dashboard.struts.form.acct.AcctLocationListForm;
import com.aldorsolutions.webfdms.admin.user.bean.UserManagerBean;
import com.aldorsolutions.webfdms.admin.user.dao.UserDAO;
import com.aldorsolutions.webfdms.admin.user.model.UserDTO;
import com.aldorsolutions.webfdms.admin.user.model.UserLocationDTO;
import com.aldorsolutions.webfdms.beans.DbUserSession;
import com.aldorsolutions.webfdms.util.SessionValueKeys;

/** 
 * MyEclipse Struts
 * Creation date: 05-07-2007
 * 
 * XDoclet definition:
 * @struts.action path="/acctLocationList" 
 * name="acctLocationListForm" 
 * input="/acct/locationListing.jsp" scope="request" validate="true"
 */
public class AcctLocationListAction extends Action {
	
	Logger logger = Logger.getLogger(AcctLocationListAction.class);
	
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		AcctLocationListForm acctLocationListForm = (AcctLocationListForm) form;
		
        HttpSession session =  request.getSession();
        DbUserSession user = (DbUserSession) session.getAttribute(SessionValueKeys.DB_USER);
        
        ArrayList <LocationListDTO> locationDisplay = new ArrayList <LocationListDTO> ();
        
        try {
        	LocationDAO locationDAO = new LocationDAO(user);
            UserManagerBean uMgr = new UserManagerBean();
            ArrayList <LocationDTO> locations = locationDAO.getLocations(user.getCompanyID(), false);
            
            UserDAO userDAO = new UserDAO();
            
            ArrayList <UserLocationDTO> userLocs = userDAO.getUserLocations(user.getId());
            
            
            /*
             ArrayList locationList = userManagerBean.getLocations(
                		user.getDbLookup(),
						(int) user.getUserId(), 
						user.getCompanyID(),
						user.getRegionId() );
             */
            
            
            ArrayList <UserDTO> users = uMgr.getUsers(UserDAO.ACTIVE);
            LocaleDAO localeDAO = new LocaleDAO(user);
            ArrayList <LocaleDTO> locales = localeDAO.getLocales(true, user.getCompanyID());
            
            boolean isAdmin = SecurityTag.hasAccess("Admin Menu: View", user);
            
            for ( LocationDTO location : locations ) {
            	
            	if ( isAdmin == false ) {
            		if ( location.getAccountantUserID() != user.getId() ) {
            			continue;
            		}
            	}
            	
            	boolean isUserAssignedLoc = false;
            	
            	for ( UserLocationDTO userLoc : userLocs ) {
            		if ( userLoc.getLocationId() == location.getLocationID() && 
            			 userLoc.getRegionId() == location.getLocaleID() ) {
            			isUserAssignedLoc = true;
            			break;
            		}
    			}
            	
            	if ( isUserAssignedLoc == false ) {
            		continue;
            	}
            	
            	LocationListDTO locDisplay = new LocationListDTO();
            	
            	locDisplay.setCompanyID(location.getCompanyID());
            	locDisplay.setLocationID(location.getLocationID());
            	locDisplay.setLocationName(location.getName());
            	locDisplay.setAddress1(location.getAddr1());
            	locDisplay.setPhoneNum( location.getPhone() );
            	
            	for ( UserDTO aUser : users ) {
    				if ( aUser.getUserId() == location.getAccountantUserID() ) {
    					locDisplay.setAccountantName( aUser.getLastName() + ", " + aUser.getFirstName() );
    					break;
    				}
    			}
            	
            	for ( LocaleDTO locale : locales ) {
    				if ( locale.getLocaleID() == location.getLocaleID() ) {
    					locDisplay.setLocaleName( locale.getName() );
    					break;
    				}
    			}
            	
            	locationDisplay.add( locDisplay );
            	
            }
            
        } catch (Exception e) {
            logger.error("Error : ", e);
        } 
        
        acctLocationListForm.setLocations(locationDisplay);
    		
   		return ( mapping.findForward("success") );
	}
}