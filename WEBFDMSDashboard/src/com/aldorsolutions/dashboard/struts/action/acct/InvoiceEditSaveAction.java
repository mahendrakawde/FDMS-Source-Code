/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 * CJongs
 */
package com.aldorsolutions.dashboard.struts.action.acct;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;


import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;

import com.aldorassist.webfdms.dao.InvoiceDAO;
import com.aldorassist.webfdms.dao.InvoiceItemDAO;
import com.aldorassist.webfdms.dao.LocationDAO;
import com.aldorassist.webfdms.dao.LocationEmailDAO;
import com.aldorassist.webfdms.delegate.InvoiceManager;
import com.aldorassist.webfdms.model.InvoiceDTO;
import com.aldorassist.webfdms.model.InvoiceItemDTO;
import com.aldorassist.webfdms.model.InvoiceTransactionHistoryDTO;
import com.aldorassist.webfdms.model.LocationDTO;
import com.aldorassist.webfdms.model.LocationEmailDTO;
import com.aldorassist.webfdms.model.notpersisted.InvoiceInventoryItemLinePO;
import com.aldorsolutions.dashboard.struts.form.acct.InvoiceEditDisplayForm;
import com.aldorsolutions.webfdms.admin.user.dao.UserDAO;
import com.aldorsolutions.webfdms.admin.user.model.UserDTO;
import com.aldorsolutions.webfdms.admin.user.model.UserLocationDTO;
import com.aldorsolutions.webfdms.beans.DbApAccount;
import com.aldorsolutions.webfdms.beans.DbApDistributionHistory;
import com.aldorsolutions.webfdms.beans.DbApMaster;
import com.aldorsolutions.webfdms.beans.DbApVendor;
import com.aldorsolutions.webfdms.beans.DbInvoice;
import com.aldorsolutions.webfdms.beans.DbInvoiceItems;
import com.aldorsolutions.webfdms.beans.DbInvoiceTransHist;
import com.aldorsolutions.webfdms.beans.DbLocation;
import com.aldorsolutions.webfdms.beans.DbUserSession;
import com.aldorsolutions.webfdms.beans.FdmsDb;
import com.aldorsolutions.webfdms.checkwriter.dao.ApMasterDAO;
import com.aldorsolutions.webfdms.checkwriter.model.ApMasterDTO;
import com.aldorsolutions.webfdms.database.DatabaseTransaction;
import com.aldorsolutions.webfdms.util.FormatCurrency;
import com.aldorsolutions.webfdms.util.FormatDate;
import com.aldorsolutions.webfdms.util.FormatNumber;
import com.aldorsolutions.webfdms.util.MailUtil;
import com.aldorsolutions.webfdms.util.SessionValueKeys;

/** 
 * MyEclipse Struts
 * Creation date: 09-24-2007
 * 
 * XDoclet definition:
 * @struts.action path="/invoiceEditSave" name="invoiceEditDisplayForm" scope="request" validate="true"
 */
public class InvoiceEditSaveAction extends Action {
	
	private Logger logger = Logger.getLogger(InvoiceEditSaveAction.class.getName());
	
	/** 
	 * Method execute
	 * @param mapping 
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		InvoiceEditDisplayForm invoiceEditForm = (InvoiceEditDisplayForm) form;
		ActionMessages errors = new ActionMessages();
		HttpSession session = request.getSession();
		
		String submit = invoiceEditForm.getSubmitButton();
		if ( submit != null ) {
			if ( submit.equals("Add Item") ) {
				request.setAttribute("addItem", "true");
				return (mapping.findForward("invoiceInvItemEdit"));
			}else if (submit.equals("Add Vendor")) {
				// code added by haranesh
				session.setAttribute("locationId", (int) invoiceEditForm.getLocationID());
				return (mapping.findForward("invoiceAddVendor"));
			}else if ( submit.equals("Edit Item") ) {
				return (mapping.findForward("invoiceInvItemEdit"));
			} else if ( submit.equals("Cancel") ) {
				session.setAttribute("invoiceEditDisplayForm", null);
				//return (mapping.findForward("invoiceList"));
				
				String listType = (String)session.getAttribute("listType");
				
					// Decide which list to return to					
				if (listType.equalsIgnoreCase("list")) {
					return (mapping.findForward("invoiceList"));
				} else if (listType.equalsIgnoreCase("saved")) {
					return (mapping.findForward("savedList"));
				} else if (listType.equalsIgnoreCase("submitted")) {
					return (mapping.findForward("submittedList"));
				} else if (listType.equalsIgnoreCase("approved")) {
					return (mapping.findForward("approvedList"));
				} else if (listType.equalsIgnoreCase("denied")) {
					return (mapping.findForward("deniedList"));
				}else if (listType.equalsIgnoreCase("search")) {
					return (mapping.findForward("search"));
				}else {  // We are lost so just go back to the in
					return (mapping.findForward("invoiceList"));
				}
				
				
			} else if ( submit.equals("Delete") ) {
				processDeleteInvoice(request, errors, invoiceEditForm);
				if (errors.isEmpty()) {
					String listType = (String)session.getAttribute("listType");
					
						// Decide which list to return to					
					if (listType.equalsIgnoreCase("list")) {
						return (mapping.findForward("invoiceList"));
					} else if (listType.equalsIgnoreCase("saved")) {
						return (mapping.findForward("savedList"));
					} else if (listType.equalsIgnoreCase("submitted")) {
						return (mapping.findForward("submittedList"));
					} else if (listType.equalsIgnoreCase("approved")) {
						return (mapping.findForward("approvedList"));
					} else if (listType.equalsIgnoreCase("denied")) {
						return (mapping.findForward("deniedList"));
					} else {  // We are lost so just go back to the in
						return (mapping.findForward("invoiceList"));
					}
				} else {
					return (mapping.getInputForward());
				}
			}else if (submit.equals("Save")) {
				if (errors.isEmpty()) {
					String listType = (String) session.getAttribute("listType");

					if (listType.equalsIgnoreCase("search")) {
						session.setAttribute("saveSearchListType", "search");
					} else if (listType.equalsIgnoreCase("denied")) {
						session.setAttribute("saveSearchListType", "denied");
					} else if (listType.equalsIgnoreCase("saved")) {
						session.setAttribute("saveSearchListType", "submit");
					}
				}
			} else if (submit.equals("Submit")) {
				if (errors.isEmpty()) {
					String listType = (String) session.getAttribute("listType");

					if (listType.equalsIgnoreCase("denied")) {
						session.setAttribute("saveSearchListType", "denied");
					}
				}
			}

		}
		
		try {
			saveForm ( invoiceEditForm, request, response, errors );
			if (!errors.isEmpty()){
				return (mapping.getInputForward());
			}
			
		} catch ( Exception e ) {
			logger.debug("Exception: ", e);
			errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.exception", e.getMessage()) );
			saveErrors(request, errors);

			return (mapping.getInputForward());
		}
		/*Code Added by Bhavesh #5021 AP module Updates 
		 * */
		
		 if(submit.equals("Next")){
			 
		   InvoiceEditDisplayForm invoiceNextEditForm = new InvoiceEditDisplayForm();
		   invoiceNextEditForm.setLocationID(invoiceEditForm.getLocationID());
		   invoiceNextEditForm.setVendorID(invoiceEditForm.getVendorID());
		   invoiceNextEditForm.setVendorIds(invoiceEditForm.getVendorIds());
		   invoiceNextEditForm.setVendorInfo(invoiceEditForm.getVendorInfo());
		   invoiceNextEditForm.setVendorName(invoiceEditForm.getVendorName());
		   invoiceNextEditForm.setInvoiceDate(invoiceEditForm.getInvoiceDate());
		   invoiceNextEditForm.setInvoiceDueDate(invoiceEditForm.getInvoiceDueDate());
		   invoiceNextEditForm.setLocationVendorMapJavascript(invoiceEditForm.getLocationVendorMapJavascript());
		   invoiceNextEditForm.setType1099Values(invoiceEditForm.getType1099Values());
		   session.setAttribute("invoiceEditDisplayForm", invoiceNextEditForm);
		   
		   return (mapping.findForward("invoiceEdit"));
		  }
		/* finished*/
		session.setAttribute("invoiceEditDisplayForm", null);
		return (mapping.findForward("invoiceList"));
		
//		return (mapping.findForward("invoiceEdit"));
	}
	
	
	private void processDeleteInvoice(HttpServletRequest request, ActionMessages errors, 
		InvoiceEditDisplayForm invoiceEditForm) {
		DbUserSession user = (DbUserSession)request.getSession().getAttribute(SessionValueKeys.DB_USER);
		InvoiceManager invMgr = new InvoiceManager();
		DatabaseTransaction t = null;
		
		try {
	    t = (DatabaseTransaction)DatabaseTransaction.getTransaction(user);
			DbInvoice invoice = FdmsDb.getInstance().getInvoice(t, invoiceEditForm.getInvoiceID());
		
		    // If the invoice is just created the only thing to do is change the status of the invoice.
			if (invoiceEditForm.getInvoiceStatus().equalsIgnoreCase(InvoiceDTO.INVOICE_CREATE)) {
				invMgr.createInvoiceTransHistoryReversal(t, invoice, user);
				invoice.setInvoiceStatus(InvoiceDTO.INVOICE_DELETE);
				t.addPersistent(invoice);
			} else if (invoiceEditForm.getInvoiceStatus().equalsIgnoreCase(InvoiceDTO.INVOICE_SUBMIT) || 
					       invoiceEditForm.getInvoiceStatus().equalsIgnoreCase(InvoiceDTO.INVOICE_DENY) || 
					       invoiceEditForm.getInvoiceStatus().equalsIgnoreCase(InvoiceDTO.INVOICE_APPROVE)) {
				// If we get here we need to reverse the invoice trans history records.
				invMgr.createInvoiceTransHistoryReversal(t, invoice, user);
				
				// send the email out to user telling accountant has denied the invoice.
				HashMap <String, StringBuffer> emailMap = new HashMap<String, StringBuffer>();
				createEmail(invoice, emailMap, user);
				
				//loop for sending email out
				 String emailName = null;
				 String emailMsg = null;
				 String subject = null;
				 
				 subject = "Invoice(s) have been denied.";
				
				 Iterator <String> keys = emailMap.keySet().iterator();
				 while (keys.hasNext()) {
					 emailName = (String) keys.next();
					 emailMsg = (emailMap.get(emailName)).toString();
					 try {
							ArrayList <String> emailArray = new ArrayList <String> ();
							emailArray.add(emailName);
							MailUtil.sendEmail(user, user.getConfigID(), emailArray, null, null, subject, emailMsg);
					 } catch(Exception e) {
						 logger.error("Error Sending email out:" + e.getMessage() );
					 } 
				 }
				 invoice.setInvoiceStatus(InvoiceDTO.INVOICE_DELETE);
				t.addPersistent(invoice);
			} else if (invoiceEditForm.getInvoiceStatus().equalsIgnoreCase(InvoiceDTO.INVOICE_PRINT)) {
				// If we get here we need to reverse the invoice trans history records.
				invMgr.createInvoiceTransHistoryReversal(t, invoice, user);
				invoice.setInvoiceStatus(InvoiceDTO.INVOICE_DELETE);
				createDistributionHistoryReversal(t, invoice, user, request);
				t.addPersistent(invoice);
			}
      
      // Store to DBMS
      t.save();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
      if (t != null) {
      	t.closeConnection();
      	t = null;
      }
		}
	}
	
	private void createEmail(DbInvoice invoice,HashMap<String, StringBuffer> emailMap, DbUserSession user){	
		
		if (invoice.getInvoiceStatus().compareTo(InvoiceDTO.INVOICE_SUBMIT)==0 ){ 
			//this one send the email after the accountant approved the invoice to users.
			//send email to users using locationemail table but if it is empty then use the usersecurity list.

			LocationEmailDAO locEmailDAO = new LocationEmailDAO(user);
			ArrayList <LocationEmailDTO> locEmails = locEmailDAO.getLocationEmailByLocation(invoice.getLocationID());
			
				if ( locEmails != null && locEmails.size() > 0 ) {
				
					for ( LocationEmailDTO locEmail: locEmails ) {
						
						if (isValidEmailAddress(locEmail.getEmailAddress())) {				
							setHashmapEmail ( locEmail.getEmailAddress(), emailMap, user, invoice);
						} 	
					}
				} else {
			        UserDAO userDao = new UserDAO();
		            ArrayList  <UserLocationDTO> usersByLocation  = userDao.getUsersByLocation(invoice.getLocationID());
		            
					ArrayList <UserDTO> users = userDao.getUsersByRoleAssigned(1 , user.getCompanyID(), 2);		
					
					for ( UserDTO aUser : users) {
						for ( UserLocationDTO userByLocation : usersByLocation) {
							if (aUser.getUserId() == userByLocation.getUser_id()){
								if (isValidEmailAddress(aUser.getEmail())){
									setHashmapEmail ( aUser.getEmail(), emailMap, user, invoice);	
								}
							}
						}	
					}					
				}

	
		} else { //If the email submitted status (submitted by user then send the email to accountant.
			//send email to accountant using usersecurity table 
			LocationDAO locManager = new LocationDAO(user);
			try {
				UserDAO userDao = new UserDAO();
				LocationDTO location = locManager.getLocation(invoice.getLocationID());
				long acctID = location.getAccountantUserID();
				UserDTO userInfo  = userDao.getUser(acctID);
				//if (userInfo.getEmail().length() > 6){
				if (userInfo!=null && userInfo.getEmail()!=null && isValidEmailAddress(userInfo.getEmail())){
					setHashmapEmail ( userInfo.getEmail(), emailMap, user, invoice);
				}
				
			}
			catch (Exception e) {
				e.printStackTrace();
				
			}
		}	
		
	}	
	public static boolean isValidEmailAddress(String aEmailAddress){
	    if (aEmailAddress == null) return false;
	    boolean result = true;
	    try {
	      InternetAddress emailAddr = new InternetAddress(aEmailAddress);
	      if ( ! hasNameAndDomain(aEmailAddress) ) {
	        result = false;
	      }
	    }
	    catch (AddressException ex){
	      result = false;
	    }
	    return result;
	  }
	private static boolean hasNameAndDomain(String aEmailAddress){
		    String[] tokens = aEmailAddress.split("@");
		    return 
		     (tokens.length == 2 &&
		     tokens[0].length() > 0  && 
		     tokens[1].length() > 3 ) ;
		  }
		public void setHashmapEmail (String emailAddr, HashMap<String, StringBuffer> emailMap, DbUserSession user, DbInvoice invoice){
			StringBuffer message = null;
			if (emailMap.containsKey(emailAddr)){
				message = (StringBuffer)emailMap.get(emailAddr);
				try {
				message.append(emailMessage( user, invoice));
				} catch (Exception e) {
					logger.error("Error generate invoice content for email:" + e.getMessage() );
				}
				
			} else {
				message = new StringBuffer();
				try {
					message.append(emailMessage( user, invoice));
				} catch (Exception e) {
						logger.error("Error generate invoice content for email:" + e.getMessage() );
				}
				
				emailMap.put(emailAddr, message);
			}		
		}
		
		public StringBuffer emailMessage (DbUserSession user, DbInvoice invoice) throws Exception {

			DatabaseTransaction t = null;
			try {
				t = (DatabaseTransaction) DatabaseTransaction.getTransaction(user);
				
				DbApVendor vendor = FdmsDb.getInstance().getApVendor(t, invoice.getVendorID() );
				DbLocation location = FdmsDb.getInstance().getLocation(t, invoice.getLocationID() );

				String endLine = "\r\n";
				StringBuffer message = new StringBuffer();

				message.append(endLine + endLine);
				message.append("    Invoice Number: " + invoice.getInvoiceNumber() + endLine);
				message.append("      Invoice Date: " + FormatDate.convertDateToMM_DD_YY(invoice.getInvoiceDate()) + endLine);
				message.append("  Invoice Due Date: " + FormatDate.convertDateToMM_DD_YY(invoice.getInvoiceDueDate()) + endLine);
				message.append("    Invoice Amount: " + FormatCurrency.toCurrency(invoice.getAmountOfInvoice()) + endLine);
				message.append(" Discount Due Date: " + FormatDate.convertDateToMM_DD_YY(invoice.getDiscountDueDate()) + endLine);
				message.append("   Discount Amount: " + FormatCurrency.toCurrency(invoice.getDiscountAmount()) + endLine);			
				message.append("     Location Name: " + location.getName() + endLine);
				message.append("            Vendor: " + vendor.getName() + endLine);
				message.append("    Vendor Address: " + vendor.getAddr1() + endLine);
				if (vendor.getAddr2().length()> 0) {
					message.append("                    " + vendor.getAddr2() + endLine);
				}
				message.append("                    " + vendor.getCityState() + endLine);
				message.append("              User: " + user.getFirstName() + " " + user.getLastName() + endLine);
				message.append(endLine + endLine);
				return message;
			} finally {
				if ( t != null ) {
					t.closeConnection();
					t = null;
				}
			}
	    
		}		 
	  
	  
	  
	private void createDistributionHistoryReversal(DatabaseTransaction t, DbInvoice submitedInvoice, DbUserSession user, HttpServletRequest request) {
		int invoiceTotal = 0;
		ApMasterDAO apDao = new ApMasterDAO(user);
		InvoiceDAO invoiceDAO = new InvoiceDAO(user);
		InvoiceItemDAO invoiceItemDAO = new InvoiceItemDAO(user);
		ApMasterDTO apMasterDTO = apDao.getApMasterByInvoiceID(submitedInvoice.getId());
		DbApMaster apMaster = FdmsDb.getInstance().getApCheck(t, apMasterDTO.getMasterID());
		DbApVendor vendor = FdmsDb.getInstance().getApVendor(t, apMasterDTO.getVendorID());
		InvoiceDTO invoice = invoiceDAO.getInvoice( submitedInvoice.getId());
		ArrayList <InvoiceItemDTO> invItems = invoiceItemDAO.getInvoiceItems(invoice.getInvoiceID());

    double discountAmount = 0.0;
  		// Check to see if the discount flag is set
    discountAmount = apMaster.calculateDiscountAmount(invoice, apMaster.getCheckDate());


		try {
			DbApDistributionHistory expenseHistory = new DbApDistributionHistory();
			expenseHistory.setNew();
			expenseHistory.setApMasterID(apMasterDTO.getMasterID());
			//expenseHistory.setApAccountNumber(String.valueOf(vendor.getDefaultAcct()));
			
	    	InvoiceManager imvMgr = new InvoiceManager();
	    	DbApAccount account = imvMgr.getAccount(request, vendor.getDefaultAcctID());
	    	
	    	if (account == null) {
	    		expenseHistory.setApAccountNumber("");
	    	}else {
	    		expenseHistory.setApAccountNumber(account.getAccountNumber() );
	    	}
			
			
			
				// Because we are reversing this transaction we need to make it a negative amount
			expenseHistory.setDiscountAmount((-1 * FormatNumber.round(discountAmount)));
			expenseHistory.setType(DbApDistributionHistory.INVOICE);
			expenseHistory.setMemo(invoice.getDescription());
		
		
//		  // When we get here we are going to go thru every line item and report on it
		  for ( InvoiceItemDTO item : invItems ) {
		  	double itemCostWTax = FormatNumber.roundDoubleDollars(item.getItemCost());
		  	itemCostWTax = FormatNumber.roundDoubleDollars(itemCostWTax);
		
		  	DbApDistributionHistory expense = new DbApDistributionHistory();
		  	expense.setNew();
				
		  	//expense.setNew();
		  	expense.setApMasterID(apMasterDTO.getMasterID());
		  	expense.setApAccountNumber(item.getGlAcctNumber());
		  	expense.setAmount(-1 * FormatNumber.round(itemCostWTax));
		  	expense.setDiscountAmount(0);
		  	expense.setType(DbApDistributionHistory.INVOICE_ITEM);
				t.addPersistent(expense);				
				invoiceTotal += FormatNumber.round(itemCostWTax); 
		  }
		  	// Since this is a reversal we need to display a negative number
  		expenseHistory.setAmount(-1 * invoiceTotal);
  		t.addPersistent(expenseHistory);
		} catch (Exception e) {
		
		}
	}

	
	private void saveForm (InvoiceEditDisplayForm form, HttpServletRequest request, HttpServletResponse response, 
			ActionMessages errors) throws Exception {

		HttpSession session = request.getSession();
		DbUserSession user = (DbUserSession) session.getAttribute(SessionValueKeys.DB_USER);
		ArrayList <InvoiceInventoryItemLinePO> invItems = form.getInvoiceInvItems();
		InvoiceDAO invoiceDAO = new InvoiceDAO(user);
		InvoiceItemDAO invoiceItemDAO = new InvoiceItemDAO(user);

		ArrayList <InvoiceItemDTO> invoiceInventory = new ArrayList <InvoiceItemDTO> ();
		
		long invoiceID = form.getInvoiceID();
		double totalInvoiceItems = 0.0;
		
		for ( InvoiceInventoryItemLinePO item : invItems ) {
			double cost = InvoiceManager.getCostTotal ( item );
			InvoiceItemDTO invoiceItem = new InvoiceItemDTO();
			invoiceItem.setCostPerUnit(item.getUnitCost());
			invoiceItem.setGlAcctNumber(item.getItemGLAccount());
			invoiceItem.setInventoryItem(item.isMerchandise());
			invoiceItem.setItemCode(item.getItemCode());
			invoiceItem.setItemCost(item.getItemCost());
			invoiceItem.setItemDesc(item.getItemDescription());
			invoiceItem.setQuantity(item.getItemQuant());
			invoiceItem.setApAccountID((int)item.getApAccountID());
			invoiceItem.setInvoiceID( (int) invoiceID);
			
			if ( item.isAdded() == false ) {
				invoiceItem.setInvoiceItemID((int) item.getInvoiceInventoryItemID());
			}
			
			totalInvoiceItems += cost;
			invoiceInventory.add(invoiceItem);
		}
			

		DatabaseTransaction trans = (DatabaseTransaction)DatabaseTransaction.getTransaction(user);
		boolean transError = false;
		DbInvoice dbInvoice = new DbInvoice();
		Boolean dulicateInvoiceNumber = false;
		if ( invoiceID > 0 ) {
			dbInvoice = FdmsDb.getInstance().getInvoice(trans,(int) invoiceID);	
		} else {
			ArrayList<InvoiceDTO>  invoices = invoiceDAO.getInvoicesByInvoiceNumber(form.getInvoiceNumber(), true);
			if ( !invoices.isEmpty()){			
				for (InvoiceDTO invoice: invoices ){
					if (invoice.getVendorID() == form.getVendorID()){
						dulicateInvoiceNumber = true;
						break;
					}
				}
			}
			
			if (dulicateInvoiceNumber) {
				errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.acct.invoice.dulicate", form.getInvoiceNumber()) );
				saveErrors(request, errors);

			} else {	
				dbInvoice.setNew();
			}
		}
		 
		//initial data
		 if ( !dulicateInvoiceNumber) {
			 initInvoice(dbInvoice,form);
		 }
		 
		 
		 try {
			trans.addPersistent(dbInvoice);
			trans.save();
		 }
		 catch (Exception e) {
			    transError = true;
			    e.printStackTrace();
		 }
		 finally {
	      if (trans != null) {
	      	trans.closeConnection();
	      	trans = null;
	      }
	   }
		
		 	// If there is no error then we want to save the line items.
		if (!transError) { 
				// Get a new connection
			trans = (DatabaseTransaction)DatabaseTransaction.getTransaction(user);
			dbInvoice = FdmsDb.getInstance().getInvoice(trans,dbInvoice.getId());
			//trans = (DatabaseTransaction)DatabaseTransaction.getTransaction(user); 		
			
			//set real data to invoice and invoiceitems
			if ( !dulicateInvoiceNumber) {
				setDbInvoice(dbInvoice,form,totalInvoiceItems);
				trans.addPersistent(dbInvoice);

				// add invoice to invoicetranshist table. for total of invoice
				DbInvoiceTransHist dbInvoiceTransHist = new DbInvoiceTransHist();
				dbInvoiceTransHist.setNew();
				dbInvoiceTransHist.setInvoiceID(dbInvoice.getId());
				dbInvoiceTransHist.setLocationID(dbInvoice.getLocationID());
				dbInvoiceTransHist.setType(InvoiceTransactionHistoryDTO.INVOICE_TYPE);
				dbInvoiceTransHist.setDescription(dbInvoice.getDescription());
				
				if (dbInvoice.getDiscountFlag()== true ){
					dbInvoiceTransHist.setAmount(FormatNumber.round(dbInvoice.getAmountOfInvoice())-FormatNumber.round(dbInvoice.getDiscountAmount()));
				} else {
					dbInvoiceTransHist.setAmount(FormatNumber.round(dbInvoice.getAmountOfInvoice()));
				}
				
				
				dbInvoiceTransHist.setGlAccount(dbInvoice.getGlcategory());
				dbInvoiceTransHist.setTransactionDate(dbInvoice.getInvoiceDate());
				// Set posted to 'N' so it will be exported
				dbInvoiceTransHist.setPosted('N');
				trans.addPersistent(dbInvoiceTransHist);				
				
				// add to glaccount of discount 40090
				if (dbInvoice.getDiscountFlag()== true ){
					dbInvoiceTransHist = new DbInvoiceTransHist();
					dbInvoiceTransHist.setNew();
					dbInvoiceTransHist.setInvoiceID(dbInvoice.getId());
					dbInvoiceTransHist.setLocationID(dbInvoice.getLocationID());
					dbInvoiceTransHist.setType(InvoiceTransactionHistoryDTO.INVOICE_TYPE);
					dbInvoiceTransHist.setDescription("Discount");
					dbInvoiceTransHist.setAmount(FormatNumber.round(dbInvoice.getDiscountAmount()));	
					dbInvoiceTransHist.setGlAccount("40090");
					dbInvoiceTransHist.setTransactionDate(dbInvoice.getInvoiceDate());
					// Set posted to 'N' so it will be exported
					dbInvoiceTransHist.setPosted('N');
					trans.addPersistent(dbInvoiceTransHist);						
				}
				
				ArrayList <InvoiceItemDTO> existingInvoiceItems = invoiceItemDAO.getInvoiceItems(dbInvoice.getId());
			
				for ( InvoiceItemDTO invoiceItem : invoiceInventory ) {
					DbInvoiceItems dbInvoiceItem = new DbInvoiceItems();
					invoiceItem.setInvoiceID(invoiceID);
					//we comment this one out because we don't do any editing invoice (either delete or add a new invice)
					if ( invoiceItem.getInvoiceItemID() > 0 ) {						
						invoiceItemDAO.updateInvoiceItem(invoiceItem);
						dbInvoiceItem = FdmsDb.getInstance().getInvoiceItem(trans,(int) invoiceItem.getInvoiceItemID());
					} else {
						//invoiceItemDAO.addInvoiceItem(invoiceItem, dbInvoice.getLocationID());
						//dbInvoiceItem.setNew();	
//					}
						dbInvoiceItem.setNew();
						dbInvoiceItem.setCostPerUnit(invoiceItem.getCostPerUnit());
						dbInvoiceItem.setGlAcctNum(invoiceItem.getGlAcctNumber());
						dbInvoiceItem.setInventoryItem(invoiceItem.isInventoryItem());
						dbInvoiceItem.setItemCode(invoiceItem.getItemCode());
						dbInvoiceItem.setItemCost(invoiceItem.getItemCost());
						dbInvoiceItem.setItemDesc(invoiceItem.getItemDesc());
						dbInvoiceItem.setQuantity(invoiceItem.getQuantity());
						dbInvoiceItem.setApAccountID((int)invoiceItem.getApAccountID());
						dbInvoiceItem.setInvoiceID( (int) dbInvoice.getId());
						
						trans.addPersistent(dbInvoiceItem);
						
						// add each item to dbinvoicetranshist
						dbInvoiceTransHist = new DbInvoiceTransHist();
						dbInvoiceTransHist.setNew();			
						dbInvoiceTransHist.setInvoiceID(dbInvoice.getId());
						dbInvoiceTransHist.setLocationID(dbInvoice.getLocationID());
						dbInvoiceTransHist.setType(InvoiceTransactionHistoryDTO.LINEITEM_TYPE);
						dbInvoiceTransHist.setDescription(invoiceItem.getItemDesc());
						dbInvoiceTransHist.setAmount(FormatNumber.round(invoiceItem.getItemCost()));
						dbInvoiceTransHist.setGlAccount(invoiceItem.getGlAcctNumber());
						dbInvoiceTransHist.setTransactionDate(dbInvoice.getInvoiceDate());
						// Set posted to 'N' so it will be exported
						dbInvoiceTransHist.setPosted('N');
						trans.addPersistent(dbInvoiceTransHist);							
					}
				}
				/*
				 * Delete items that were removed
				 */
				boolean found = false;
				
				for ( InvoiceItemDTO existingItem : existingInvoiceItems ) {
					found = false;
					
					for ( InvoiceItemDTO invoiceItem : invoiceInventory ) {
						if ( invoiceItem.getInvoiceItemID() > 0 && 
								existingItem.getInvoiceItemID() == invoiceItem.getInvoiceItemID() ) {
							found = true;
							break;
						}
					}
					
					if ( found == false) {
						//invoiceItemDAO.deleteInvoiceItem((int) existingItem.getInvoiceItemID());
						DbInvoiceItems dbInvoiceItem = FdmsDb.getInstance().getInvoiceItem(trans,(int) existingItem.getInvoiceItemID());
						dbInvoiceItem.remove();
						trans.addPersistent(dbInvoiceItem);
					}		
				}
				
				//add the invoicetranhist in here.
//				InvoiceManager invMgr = new InvoiceManager();
//				invMgr.createInvoiceTransHistory(trans, dbInvoice, user);
				
			}
			
			try {
				trans.save();
			}
			 catch(Exception e ) {
				 e.printStackTrace();
				 
				 /** A CODE TO DELETE THE Temporary INVOICE RECORD, if the real record cannot be saved. **/
				 try {
					 if (trans != null) {
					      	trans.closeConnection();
					      	trans = null;
					 }
					 trans = (DatabaseTransaction)DatabaseTransaction.getTransaction(user);
					 dbInvoice = FdmsDb.getInstance().getInvoice(trans,dbInvoice.getId());
					 dbInvoice.remove();
					 trans.addPersistent(dbInvoice);
					 trans.save();	
				 }
				 catch(Exception err) {
					 err.printStackTrace();
				 }finally {
					 if (trans != null) {
					      	trans.closeConnection();
					      	trans = null;
					      }
				 }
				 
			 }
			 finally {
		      if (trans != null) {
		      	trans.closeConnection();
		      	trans = null;
		      }
			 }
		}
	}
	
	private void initInvoice(DbInvoice dbInvoice, InvoiceEditDisplayForm form) {
		dbInvoice.setAmountOfInvoice(0);
		dbInvoice.setCheckingAccount(0);
	//invoiceDTO.setCheckingStatus(form.getCheckingStatus());
		dbInvoice.setCheckingStatus(InvoiceDTO.CHECK_STATUS_SAVE_INVOICE);
		dbInvoice.setInvoiceStatus(InvoiceDTO.INVOICE_CREATE);
		dbInvoice.setDescription("");
		dbInvoice.setDiscountAmount(0);
		dbInvoice.setDiscountDollars(0);
		dbInvoice.setDiscountDue(0);
		dbInvoice.setDiscountDueDate(null);
		dbInvoice.setDiscountDueFreq(0);
		dbInvoice.setDiscountFlag(false);
		dbInvoice.setDiscountPercent(0);
		dbInvoice.setDiscountSubjectAmount(0);
	//invoiceDTO.setGlcategory(form.getGlCategory());
		dbInvoice.setGlcategory("");
		dbInvoice.setInvoice1099Amount(0);
		dbInvoice.setInvoice1099Type(0);
		dbInvoice.setInvoiceDate(FormatDate.parseDateAsNull(form.getInvoiceDate()));
		dbInvoice.setInvoiceDueDate(FormatDate.parseDateAsNull(form.getInvoiceDueDate()));
//		dbInvoice.setInvoiceID(form.getInvoiceID());
//		dbInvoice.setInvoiceNumber("9xxx9xxx9xxx9");
		dbInvoice.setInvoiceNumber(form.getInvoiceNumber());
		dbInvoice.setInvoicePaid(false);
		dbInvoice.setLocationID(0);
		dbInvoice.setRecurringCount(0);
		dbInvoice.setRecurringFlag(false);
		dbInvoice.setRecurringFreq(0);
		dbInvoice.setRecurringFreqCode(0);
		dbInvoice.setVendorID(0);
		dbInvoice.setCheckCreated(false);
	}
	
	private void setDbInvoice(DbInvoice dbInvoice, InvoiceEditDisplayForm form, double totalInvoiceItems){
		dbInvoice.setAmountOfInvoice(totalInvoiceItems);
		dbInvoice.setCheckingAccount(form.getCheckingAccount());
	//invoiceDTO.setCheckingStatus(form.getCheckingStatus());
		dbInvoice.setCheckingStatus(InvoiceDTO.CHECK_STATUS_SAVE_INVOICE);
		dbInvoice.setInvoiceStatus(InvoiceDTO.INVOICE_CREATE);
		dbInvoice.setDescription(form.getDescription());
		dbInvoice.setDiscountAmount(form.getDiscountAmount());
		dbInvoice.setDiscountDollars(form.getDiscountDollars());
		dbInvoice.setDiscountDue(form.getDiscountDue());
		dbInvoice.setDiscountDueDate(FormatDate.parseDateAsNull(form.getDiscountDueDate()));
		dbInvoice.setDiscountDueFreq(form.getDiscountDueFreq());
		dbInvoice.setDiscountFlag(form.isDiscountFlag());
		dbInvoice.setDiscountPercent(form.getDiscountPercent());
		dbInvoice.setDiscountSubjectAmount(form.getDiscountSubjectAmount());
	//invoiceDTO.setGlcategory(form.getGlCategory());
		dbInvoice.setGlcategory("");
		dbInvoice.setInvoice1099Amount(form.getInvoice1099Amount());
		dbInvoice.setInvoice1099Type(form.getInvoice1099Type());
		dbInvoice.setInvoiceDate(FormatDate.parseDateAsNull(form.getInvoiceDate()));
		dbInvoice.setInvoiceDueDate(FormatDate.parseDateAsNull(form.getInvoiceDueDate()));
		//dbInvoice.setInvoiceID(form.getInvoiceID());
		dbInvoice.setInvoiceNumber(form.getInvoiceNumber());
		dbInvoice.setInvoicePaid(form.isInvoicePaid());
		dbInvoice.setLocationID((int)form.getLocationID());
		dbInvoice.setRecurringCount(form.getRecurringCount());
		dbInvoice.setRecurringFlag(form.isRecurringFlag());
		dbInvoice.setRecurringFreq(form.getRecurringFreq());
		dbInvoice.setRecurringFreqCode(form.getRecurringFreqCode());
		dbInvoice.setVendorID((int)form.getVendorID());
		dbInvoice.setCheckCreated(form.isCheckCreated());
	}
	
	
}