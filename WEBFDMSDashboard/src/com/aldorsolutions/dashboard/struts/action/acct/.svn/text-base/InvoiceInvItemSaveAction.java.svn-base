/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.aldorsolutions.dashboard.struts.action.acct;

import java.util.ArrayList;
import java.util.Calendar;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessages;

import com.aldorassist.webfdms.delegate.InvoiceManager;
import com.aldorassist.webfdms.model.notpersisted.InvoiceInventoryItemLinePO;
import com.aldorsolutions.dashboard.struts.form.acct.InvoiceEditDisplayForm;
import com.aldorsolutions.dashboard.struts.form.acct.InvoiceInvItemEditForm;
import com.aldorsolutions.webfdms.beans.DbApAccount;
import com.aldorsolutions.webfdms.checkwriter.dao.ApVendorDAO;
import com.aldorsolutions.webfdms.checkwriter.model.ApVendorDTO;
import com.aldorsolutions.webfdms.util.FormatNumber;

/** 
 * MyEclipse Struts
 * Creation date: 09-24-2007
 * 
 * XDoclet definition:
 * @struts.action path="/invoiceEditDisplay" name="invoiceEditDisplayForm" scope="request" validate="true"
 */
public class InvoiceInvItemSaveAction extends Action {
	
	private Logger logger = Logger.getLogger(InvoiceInvItemSaveAction.class.getName());
	
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		InvoiceInvItemEditForm invItemEditForm = (InvoiceInvItemEditForm) form;
		ActionMessages errors = new ActionMessages();
		
		if ( invItemEditForm.getSubmitButton().equals("Cancel") ) {
			return ( mapping.findForward("invoiceEdit") );
		} else if ( invItemEditForm.getSubmitButton().equals("Delete") ) {
			invItemEditForm.setRemoved(true);
		} 
		
		try {
			saveForm(invItemEditForm, request);
		} catch ( Exception e ) {
			logger.debug(e.getMessage(), e);
			saveErrors(request, errors);
			return ( mapping.getInputForward() );
		}
		
		if ( errors.size() > 0 ) {
			saveErrors(request, errors);
			return ( mapping.getInputForward() );
		}
		
		return ( mapping.findForward("invoiceEdit") );
	}
	
	/**
	 * 
	 * @param form
	 * @param session
	 * @throws Exception
	 */
	private void saveForm (InvoiceInvItemEditForm form, HttpServletRequest request) throws Exception {
		
		HttpSession session = request.getSession();
		InvoiceEditDisplayForm invoiceEditForm = (InvoiceEditDisplayForm) session.getAttribute("invoiceEditDisplayForm");
		
		ArrayList <InvoiceInventoryItemLinePO> invoiceItems = invoiceEditForm.getInvoiceInvItems();
		ArrayList <InvoiceInventoryItemLinePO> newInvoiceItemList = new ArrayList <InvoiceInventoryItemLinePO> ();
		double totalValue =  0.0;
		double itemCost = 0.0;
		long itemID = form.getInvoiceInventoryItemID();
		
		for ( InvoiceInventoryItemLinePO item : invoiceItems ) {
			if ( item.getInvoiceInventoryItemID() != itemID ) {
				totalValue += InvoiceManager.getCostTotal(item );
				itemCost += item.getItemCost();
				newInvoiceItemList.add(item);
			} 
		}
		
		if ( form.isRemoved() == false ) {
			InvoiceInventoryItemLinePO lineItem = new InvoiceInventoryItemLinePO();
			InvoiceManager imvMgr = new InvoiceManager();
			DbApAccount account = imvMgr.getAccount(request, form.getApAccountID());
			
			lineItem.setAdded(form.isAdded());
			lineItem.setInvoiceInventoryItemID(form.getInvoiceInventoryItemID());
			lineItem.setItemCode(form.getItemCode());
			lineItem.setUnitCost(form.getUnitCost());
			lineItem.setItemDescription(form.getItemDescription());
			lineItem.setItemGLAccount(account.getAccountNumber());
			lineItem.setItemQuant(form.getItemQuant());
			lineItem.setMerchandise(form.isMerchandise());
			lineItem.setApAccountID(form.getApAccountID());
			
			if ( form.isAdded() && form.getInvoiceInventoryItemID() == 0 ) {
				lineItem.setInvoiceInventoryItemID(Calendar.getInstance().getTimeInMillis());
			}
			
			double cost = InvoiceManager.getCostTotal(lineItem );
			totalValue += cost;
			itemCost += lineItem.getItemCost();
			
			newInvoiceItemList.add(lineItem);
		}
		
		totalValue = FormatNumber.roundDoubleDollars(totalValue);
		
		invoiceEditForm.setInvoiceInvItems(newInvoiceItemList);
		invoiceEditForm.setAmountOfInvoice(totalValue);
		invoiceEditForm.setItemTotalCost(itemCost);
		invoiceEditForm.setEditInvItemID("");
		
		invoiceEditForm.setTotalDiscount(itemCost - invoiceEditForm.getDiscountAmount());
		
		
	}
	
}