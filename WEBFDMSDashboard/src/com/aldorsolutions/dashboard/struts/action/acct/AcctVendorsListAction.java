/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.aldorsolutions.dashboard.struts.action.acct;

import java.util.ArrayList;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionError;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.apache.struts.util.LabelValueBean;

import com.aldorsolutions.dashboard.struts.form.acct.AcctListVendorsForm;
import com.aldorsolutions.webfdms.admin.user.bean.UserManagerBean;
import com.aldorsolutions.webfdms.admin.user.model.UserLocaleDTO;
import com.aldorsolutions.webfdms.admin.user.model.UserLocationDTO;
import com.aldorsolutions.webfdms.beans.DbApAccount;
import com.aldorsolutions.webfdms.beans.DbSpeedData;
import com.aldorsolutions.webfdms.beans.DbUserSession;
import com.aldorsolutions.webfdms.beans.FdmsDb;
import com.aldorsolutions.webfdms.checkwriter.dao.ApVendorDAO;
import com.aldorsolutions.webfdms.checkwriter.dao.ApVendorLocationDAO;
import com.aldorsolutions.webfdms.checkwriter.model.ApVendorDTO;
import com.aldorsolutions.webfdms.checkwriter.model.ApVendorLocationDTO;
import com.aldorsolutions.webfdms.database.DatabaseTransaction;
import com.aldorsolutions.webfdms.database.PersistenceException;
import com.aldorsolutions.webfdms.util.CsvTable;
import com.aldorsolutions.webfdms.util.SessionValueKeys;

/** 
 * MyEclipse Struts
 * Creation date: 06-25-2007
 * 
 * XDoclet definition:
 * @struts.action path="/acctListVendors" name="acctListVendorsForm" input="/acct/acctListVendors.jsp" scope="request" validate="true"
 */
public class AcctVendorsListAction extends Action {
	/*
	 * Generated Methods
	 */
	private Logger logger = Logger.getLogger(InvoiceEditSaveAction.class.getName());
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		AcctListVendorsForm acctListVendorsForm = (AcctListVendorsForm) form;
		
		HttpSession session =  request.getSession();
        DbUserSession user = (DbUserSession) session.getAttribute(SessionValueKeys.DB_USER);
        ActionMessages errors = new ActionMessages();
		ApVendorDAO vendorDao = new ApVendorDAO(user);
		DatabaseTransaction t = null;
		
		try {
		t = (DatabaseTransaction)DatabaseTransaction.getTransaction(user);
		
		if ((acctListVendorsForm.getSearchVendorName()== null) || (acctListVendorsForm.getSearchVendorName().compareTo("") == 0)){
			acctListVendorsForm.setSearchVendorName("");
			
			//ArrayList <ApVendorDTO> vendors = vendorDao.getApVendor(true); 
			
			
			// get the vender for user
			ArrayList <Long> vendorIDs = getVendorIDs(user);
			ArrayList <ApVendorDTO> vendorList = vendorDao.getApVendorByVendorIDs(true,vendorIDs);
			
			for ( ApVendorDTO aVendor: vendorList) {
				DbApAccount anAcct = FdmsDb.getInstance().getApAccount(t, aVendor.getDefaultAcctID());
				if (anAcct == null) {
					aVendor.setDefaultAcct("");
					aVendor.setDefaultAcctDesc("");
				}
				else {
					aVendor.setDefaultAcct(anAcct.getAccountNumber());
					aVendor.setDefaultAcctDesc(anAcct.getDescription());
				}
			}
			
			
			
			// end getting vender for user				
			acctListVendorsForm.setVendors(vendorList);
		
		}
		else {
			acctListVendorsForm.setSearchVendorName(acctListVendorsForm.getSearchVendorName());
			
			String searchVendorName = "%"+acctListVendorsForm.getSearchVendorName()+"%";
			//ArrayList <ApVendorDTO> vendors = vendorDao.getApVendorByName(true,searchVendorName);
			ArrayList <Long> vendorIDs = getVendorIDs(user);
			ArrayList <ApVendorDTO> vendorList = vendorDao.getApVendorByVendorIDsName(true,vendorIDs,searchVendorName);	 
			
			for ( ApVendorDTO aVendor: vendorList) {
				DbApAccount anAcct = FdmsDb.getInstance().getApAccount(t, aVendor.getDefaultAcctID());
				if (anAcct == null) {
					aVendor.setDefaultAcct("");
					aVendor.setDefaultAcctDesc("");
				}
				else {
					aVendor.setDefaultAcct(anAcct.getAccountNumber());
					aVendor.setDefaultAcctDesc(anAcct.getDescription());
				}
			}		
			
			
			
			acctListVendorsForm.setVendors(vendorList);
			acctListVendorsForm.setSearchVendorName("");
			
		}

		} catch ( Exception e ) {
			logger.debug("Exception: ", e);
			errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.exception", e.getMessage()) );
			saveErrors(request, errors);
		}  finally {
            if (t != null) {
                try {
					t.closeConnection();
					t = null;
				}  catch (Exception e) {
                    logger.error("Error in closeConnection() : ", e);
                }
            }
        }
		
		return mapping.findForward("vendorList");
	}
	
	
	private ArrayList <Long> getVendorIDs( DbUserSession user ) {
		
		ApVendorLocationDAO apVendorLocationDao = new ApVendorLocationDAO(user);
		UserManagerBean uMgr = new UserManagerBean();	
		String [] stringLocationIDs = uMgr.getUserLocationIds(user.getId());
		ArrayList<Long> locationIDs = new ArrayList<Long>();
		for(int i=0;i<stringLocationIDs.length;i++){
			locationIDs.add( Long.parseLong(stringLocationIDs[i]));
		}
		ArrayList <ApVendorLocationDTO> apVendorLocationList = apVendorLocationDao.getApVendorLocationByLocationIDs(locationIDs);
		ArrayList<Long> vendorIDs = new ArrayList<Long>();
		for ( ApVendorLocationDTO apVendorLocation : apVendorLocationList ) {
			vendorIDs.add(apVendorLocation.getVendorID());
		}
		return (vendorIDs);
	}		
	
	
}