/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 * cjongs
 */
package com.aldorsolutions.dashboard.struts.action.acct;



import java.util.ArrayList;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.Action;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import com.aldorsolutions.dashboard.struts.form.acct.AcctListVendorsSearchForm;
import com.aldorsolutions.webfdms.admin.user.bean.UserManagerBean;
import com.aldorsolutions.webfdms.admin.user.dao.UserDAO;
import com.aldorsolutions.webfdms.admin.user.model.UserLocaleDTO;
import com.aldorsolutions.webfdms.admin.user.model.UserLocationDTO;
import com.aldorsolutions.webfdms.beans.DbApAccount;
import com.aldorsolutions.webfdms.beans.DbLocation;
import com.aldorsolutions.webfdms.beans.DbUserSession;
import com.aldorsolutions.webfdms.beans.FdmsDb;
import com.aldorsolutions.webfdms.checkwriter.dao.ApVendorDAO;
import com.aldorsolutions.webfdms.checkwriter.dao.ApVendorLocationDAO;
import com.aldorsolutions.webfdms.checkwriter.model.ApVendorDTO;
import com.aldorsolutions.webfdms.checkwriter.model.ApVendorLocationDTO;
import com.aldorsolutions.webfdms.database.DatabaseTransaction;
import com.aldorsolutions.webfdms.database.PersistenceException;
import com.aldorsolutions.webfdms.util.SessionValueKeys;


/** 
 * MyEclipse Struts
 * Creation date: 02-16-2009
 * 
 * XDoclet definition:
 * @struts.action path="/acctListVendors" name="acctListVendorsForm" input="/acct/acctListVendors.jsp" scope="request" validate="true"
 */
public class AcctVendorsListSearchAction extends Action {
	/*
	 * Generated Methods
	 */
	private Logger logger = Logger.getLogger(InvoiceEditSaveAction.class.getName());
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session =  request.getSession();
			
		AcctListVendorsSearchForm acctListVendorsSearchForm = (AcctListVendorsSearchForm)session.getAttribute( "acctListVendorsSearchForm" );
		if (acctListVendorsSearchForm==null){
            
			acctListVendorsSearchForm = new AcctListVendorsSearchForm();
        }
		
		 //code done by haranesh on 1-3-2012 for TAB change vendor display table value caching issue..
		  acctListVendorsSearchForm.setVendors(null);
		  //code finish
		  
		//AcctListVendorsSearchForm acctListVendorsSearchForm = (AcctListVendorsSearchForm) form;
		//AcctListVendorsSearchForm acctListVendorsSearchForm = new AcctListVendorsSearchForm();
		

        DbUserSession user = (DbUserSession) session.getAttribute(SessionValueKeys.DB_USER);
        ActionMessages errors = new ActionMessages();
		ApVendorDAO vendorDao = new ApVendorDAO(user);
		DatabaseTransaction t = null;
        
//        if (acctListVendorsSearchForm.getVendors().size() > 0) {
//        	ArrayList <ApVendorDTO> vendorList = new ArrayList <ApVendorDTO>();
//			// end getting vender for user				
//			acctListVendorsSearchForm.setVendors(vendorList);
//        }
        
		if (acctListVendorsSearchForm.getDirection()!= null && acctListVendorsSearchForm.getDirection().compareToIgnoreCase("Search") == 0) {
		try {
			t = (DatabaseTransaction)DatabaseTransaction.getTransaction(user);
			
			if ( (((acctListVendorsSearchForm.getVendorName()== null) || (acctListVendorsSearchForm.getVendorName().compareTo("") == 0))
					&& ((acctListVendorsSearchForm.getVendorCode()== null) || (acctListVendorsSearchForm.getVendorCode().compareTo("") == 0)) )
					&& ((acctListVendorsSearchForm.getLocationID() == 0) && (acctListVendorsSearchForm.getLocaleID() == 0))){
				
				acctListVendorsSearchForm.setVendorName("");

				if (acctListVendorsSearchForm.getIncludeNoLocation() == null) {
					ArrayList <ApVendorDTO> vendorList = new ArrayList <ApVendorDTO>();
					// end getting vender for user				
					acctListVendorsSearchForm.setVendors(vendorList);
				}else {
					if (acctListVendorsSearchForm.getIncludeNoLocation().compareToIgnoreCase("Y")==0) {
						
						ArrayList <ApVendorDTO> vendorList = vendorDao.getUnAssignedLocationApVendor(acctListVendorsSearchForm.getIncludeInactive(),true);
						for ( ApVendorDTO aVendor: vendorList) {
							DbApAccount anAcct = FdmsDb.getInstance().getApAccount(t, aVendor.getDefaultAcctID());
							if (anAcct == null) {
								aVendor.setDefaultAcct("");
								aVendor.setDefaultAcctDesc("");
							}
							else {
								aVendor.setDefaultAcct(anAcct.getAccountNumber());
								aVendor.setDefaultAcctDesc(anAcct.getDescription());
							}
						}
						acctListVendorsSearchForm.setVendors(vendorList);
					}else {
						ArrayList <ApVendorDTO> vendorList = new ArrayList <ApVendorDTO>();
						// end getting vender for user				
						acctListVendorsSearchForm.setVendors(vendorList);
					}
				}
			
			}
			else {
				//acctListVendorsSearchForm.setVendorName(acctListVendorsSearchForm.getVendorName());
				//acctListVendorsSearchForm.setLocationID(locationID)
				long locationID = acctListVendorsSearchForm.getLocationID();
				long localeID = acctListVendorsSearchForm.getLocaleID();			
				String searchVendorName ="";
				if (acctListVendorsSearchForm.isExactName()){
					searchVendorName = acctListVendorsSearchForm.getVendorName();
				}
				else {
				    searchVendorName = "%"+acctListVendorsSearchForm.getVendorName()+"%";
				}
				String searchVendorCode = "";
				if (acctListVendorsSearchForm.isExactCode()){
				    searchVendorCode = acctListVendorsSearchForm.getVendorCode();
				}
				else {
					searchVendorCode = "%"+acctListVendorsSearchForm.getVendorCode()+"%";
				}
				//ArrayList <ApVendorDTO> vendors = vendorDao.getApVendorByName(true,searchVendorName);
				ArrayList <Long> vendorIDs = getVendorIDs(user,locationID, localeID, acctListVendorsSearchForm.getIncludeInactive(), acctListVendorsSearchForm.getIncludeNoLocation());
				ArrayList <ApVendorDTO> vendorList = vendorDao.getApVendorByVendorIDsName(acctListVendorsSearchForm.getIncludeInactive(),vendorIDs,searchVendorName,searchVendorCode);	 
				
				for ( ApVendorDTO aVendor: vendorList) {
					DbApAccount anAcct = FdmsDb.getInstance().getApAccount(t, aVendor.getDefaultAcctID());
					if (anAcct == null) {
						aVendor.setDefaultAcct("");
						aVendor.setDefaultAcctDesc("");
					}
					else {
						aVendor.setDefaultAcct(anAcct.getAccountNumber());
						aVendor.setDefaultAcctDesc(anAcct.getDescription());
					}
				}		
				
				
				acctListVendorsSearchForm.setVendors(vendorList);

			}
			

			acctListVendorsSearchForm.setVendorName("");
			acctListVendorsSearchForm.setVendorCode("");
			acctListVendorsSearchForm.setIncludeInactive("A");
			acctListVendorsSearchForm.setIncludeNoLocation("N");
			acctListVendorsSearchForm.setLocationID(0);
			acctListVendorsSearchForm.setLocaleID(0);
			acctListVendorsSearchForm.setExactCode(false);
			acctListVendorsSearchForm.setExactName(false);

			} catch ( Exception e ) {
				logger.debug("Exception: ", e);
				errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.exception", e.getMessage()) );
				saveErrors(request, errors);
			}  finally {
	            if (t != null) {
	                try {
						t.closeConnection();
						t = null;
					}  catch (Exception e) {
	                    logger.error("Error in closeConnection() : ", e);
	                }
	            }
	        }
			acctListVendorsSearchForm.setDirection("");
		}
		
        
        
        createLocaleLocationList( request);
        session.setAttribute("acctListVendorsSearchForm", acctListVendorsSearchForm);
        
		return mapping.findForward("vendorListSearch");
	}
	
	private ArrayList <Long> getVendorIDs( DbUserSession user, long locationID, long localeID, String vendorStatus, String noLocation ) {
		
		ApVendorLocationDAO apVendorLocationDao = new ApVendorLocationDAO(user);
		ArrayList<Long> locationIDs = new ArrayList<Long>();
		DatabaseTransaction t = null;
		if (locationID == 0) {
			if (localeID ==0) {
				UserManagerBean uMgr = new UserManagerBean();	
				String [] stringLocationIDs = uMgr.getUserLocationIds(user.getId());
				for(int i=0;i<stringLocationIDs.length;i++){
					locationIDs.add( Long.parseLong(stringLocationIDs[i]));
				}
			}else {
			try {
			    t = (DatabaseTransaction)DatabaseTransaction.getTransaction(user);
				DbLocation[] dbLocations = FdmsDb.getInstance().getLocationsForRegion(t, (int)localeID); 
				for (DbLocation dbLocation: dbLocations) {
					locationIDs.add((long)dbLocation.getId());
				}
			
			} catch(PersistenceException pe) {
	            // AppLog.criticalError("Persistence Exception in NewAtNeed.doPerform. "+pe.getCause());
	            
	            
	        } catch(Exception pe) {
	            // AppLog.criticalError("Exception in BilltoAddChange .doPerform. "+pe);
	            // pe.printStackTrace();
	           
	        } finally {
	            if (t != null) {
	                try {
						t.closeConnection();
						t = null;
					}  catch (Exception e) {
	                    logger.error("Error in closeConnection() : ", e);
	                }
	            }
	        }
			}
			
		}
		else {
			locationIDs.add(locationID);
		}
		
		ArrayList <ApVendorLocationDTO> apVendorLocationList = apVendorLocationDao.getApVendorLocationByLocationIDs(vendorStatus,locationIDs, noLocation);
		ArrayList<Long> vendorIDs = new ArrayList<Long>();
		for ( ApVendorLocationDTO apVendorLocation : apVendorLocationList ) {
			vendorIDs.add(apVendorLocation.getVendorID());
		}
		return (vendorIDs);
	}		
	
	private void createLocaleLocationList(HttpServletRequest request) {
        UserDAO userDAO = new UserDAO();
		HttpSession session =  request.getSession();
        DbUserSession user = (DbUserSession) session.getAttribute(SessionValueKeys.DB_USER);
	    UserManagerBean uMgr = new UserManagerBean();
//        ArrayList <UserLocationDTO> locations = uMgr.getLocations( user.getDbLookup(), (int) user.getId(), 
//				user.getCompanyID(), user.getRegion() ); 
//        ArrayList <UserLocationDTO> userLocations = userDAO.getUserLocations(user.getId());
//        ArrayList <UserLocationDTO> rUserLocations = new ArrayList<UserLocationDTO>();
//        for (UserLocationDTO userLocation: userLocations) {
//        	for (UserLocationDTO location: locations) {
//        		if (location.getLocationId() == userLocation.getLocationId()){
//        			rUserLocations.add(location);
//        			break;
//        		}
//        	}
//        } 
//        session.setAttribute("ADMIN_LOCATIONS", rUserLocations);
//        
//        ArrayList <UserLocaleDTO> locales = uMgr.getLocalesOfUser( user.getDbLookup(), (int) user.getId(), 
//				user.getCompanyID(), user.getRegion());
//
//        ArrayList <UserLocaleDTO> userLocales = userDAO.getUserLocales(user.getId());
//        ArrayList <UserLocaleDTO> rUserLocales = new ArrayList<UserLocaleDTO>();
//        for (UserLocaleDTO locale: locales){
//        	for (UserLocaleDTO userLocale: userLocales ){
//        		  if ( userLocale.getLocaleId().equalsIgnoreCase(locale.getLocaleId()) ){
//        			  userLocale.setName(locale.getName());
//        			  userLocale.setCompanyId(locale.getCompanyId());
//        			  rUserLocales.add(userLocale);
//        			  break;
//        		  }
//        	}
//        }
//        session.setAttribute("ADMIN_LOCALES", rUserLocales);
	    
	    
	       ArrayList <UserLocationDTO> userLocations = uMgr.getLocationsOfUser(
	        		user.getDbLookup(), 
	        		(int) user.getId(), user.getCompanyID(),  user.getRegion());	
	        
	        
	        session.setAttribute("ADMIN_LOCATIONS", userLocations);
	        ArrayList <UserLocaleDTO> userLocales = uMgr.getLocalesOfUser(user.getDbLookup(), (int) user.getId(), 
	        		user.getCompanyID(), user.getRegion());
	        
	        session.setAttribute("ADMIN_LOCALES", userLocales);
	    
	    
	    
	}
	
}