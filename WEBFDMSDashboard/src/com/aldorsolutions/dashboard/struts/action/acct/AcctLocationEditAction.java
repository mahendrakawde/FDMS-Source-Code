/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.aldorsolutions.dashboard.struts.action.acct;

import java.util.ArrayList;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;

import com.aldorassist.webfdms.dao.LocationDAO;
import com.aldorassist.webfdms.dao.LocationEmailDAO;
import com.aldorassist.webfdms.model.LocationDTO;
import com.aldorassist.webfdms.model.LocationEmailDTO;
import com.aldorsolutions.dashboard.struts.form.acct.AcctLocationEditForm;
import com.aldorsolutions.webfdms.admin.user.bean.UserManagerBean;
import com.aldorsolutions.webfdms.admin.user.model.UserDTO;
import com.aldorsolutions.webfdms.beans.DbUserSession;
import com.aldorsolutions.webfdms.ums.bean.RolesMembershipManager;
import com.aldorsolutions.webfdms.ums.model.RolesDTO;
import com.aldorsolutions.webfdms.ums.model.RolesMembershipDTO;
import com.aldorsolutions.webfdms.util.FormatNumber;
import com.aldorsolutions.webfdms.util.SessionValueKeys;

/** 
 * MyEclipse Struts
 * Creation date: 05-07-2007
 * 
 * XDoclet definition:
 * @struts.action path="/acctLocationEdit" name="acctLocationEditForm" input="/acct/locationEditing.jsp" scope="request" validate="true"
 */
public class AcctLocationEditAction extends Action {
	/*
	 * Generated Methods
	 */
	Logger logger = Logger.getLogger(AcctLocationEditAction.class);

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		AcctLocationEditForm acctForm = (AcctLocationEditForm) form;
		
		String locIDStr = request.getParameter("locationID");
		ActionMessages errors = new ActionMessages();
		
		long locID = FormatNumber.parseLong(locIDStr);	
		
		if ( locID <= 0 ) {
			String missingLoc = getResources(request).getMessage("error.acct.location.missingLoc");
			
			errors.add ( ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.exception", missingLoc) );
			saveErrors(request, errors);
			
			return ( mapping.findForward("locationList") );
		}
		
        HttpSession session =  request.getSession();
        DbUserSession user = (DbUserSession) session.getAttribute(SessionValueKeys.DB_USER);
        UserManagerBean uMgr = new UserManagerBean();
        LocationDAO locManager = new LocationDAO(user);
        LocationEmailDAO locEmailDAO = new LocationEmailDAO(user);
        RolesMembershipManager rolesMgr = RolesMembershipManager.getInstance();
        
        try {
        	LocationDTO location = locManager.getLocation(locID);
            ArrayList <LocationEmailDTO> locationEmails = locEmailDAO.getLocationEmailByLocation(locID);

            acctForm.setAddress1(location.getAddr1());
            acctForm.setAddress2(location.getAddr2());
            acctForm.setAddress3(location.getAddr3());
            acctForm.setCity(location.getCity());
            acctForm.setLocationID(location.getLocationID());
            acctForm.setLocationName(location.getName());
            acctForm.setState(location.getState());
            acctForm.setZipcode(location.getZip());
            acctForm.setAccountantUserID(location.getAccountantUserID());
            
            acctForm.setInternalVendorLimit(location.getInternalVendorLimit());
            acctForm.setExternalVendorLimit(location.getExternalVendorLimit());
            
            ArrayList <UserDTO> users = uMgr.getUsersByCompany(user.getCompanyID());
            ArrayList <UserDTO> accountants = new ArrayList <UserDTO> ();
            
            ArrayList <RolesMembershipDTO> roleMembers = rolesMgr.getMembershipByRole(user.getCompanyID(), 
            		RolesDTO.ROLE_DASHBOARD_ACCT);
            
        	for ( UserDTO aUser : users ) {
        		
        		for ( RolesMembershipDTO role : roleMembers ) {
        			
        			if ( role.getUserID() == aUser.getUserId() ) {
        				accountants.add(aUser); 
        				break;
        			}
        		}
    		}
            
            acctForm.setAccountantUsers(accountants);
            acctForm.setLocationEmails(locationEmails);
        	
        } catch ( Exception e ) {
        	errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.exception", e.getMessage()) );
			saveMessages(request, errors);
			e.printStackTrace();
			return (mapping.getInputForward());
        }
        	
   		return ( mapping.findForward("success") );
		
	}
}