/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.aldorsolutions.dashboard.struts.action.acct;

import java.text.DecimalFormat;
import java.text.ParseException;
import java.util.StringTokenizer;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;

import com.aldorassist.webfdms.dao.LocationDAO;
import com.aldorassist.webfdms.dao.LocationEmailDAO;
import com.aldorassist.webfdms.model.LocationDTO;
import com.aldorassist.webfdms.model.LocationEmailDTO;
import com.aldorsolutions.dashboard.struts.form.acct.AcctLocationEditForm;
import com.aldorsolutions.webfdms.beans.DbUserSession;
import com.aldorsolutions.webfdms.util.FormatCurrency;
import com.aldorsolutions.webfdms.util.SessionValueKeys;

/** 
 * MyEclipse Struts
 * Creation date: 05-07-2007
 * 
 * XDoclet definition:
 * @struts.action path="/acctLocationSave" name="acctLocationEditForm" input="/acct/locationEditing.jsp" scope="request" validate="true"
 */
public class AcctLocationSaveAction extends Action {
	/*
	 * Generated Methods
	 */
	Logger logger = Logger.getLogger(AcctLocationSaveAction.class);

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		AcctLocationEditForm acctForm = (AcctLocationEditForm) form;
		
		ActionMessages errors = new ActionMessages();
		
		if ( acctForm == null ) {
			errors.add ( ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.exception", "Form was null") );
			saveErrors(request, errors);
			
			return ( mapping.getInputForward() );
		}
		
        HttpSession session =  request.getSession();
        DbUserSession user = (DbUserSession) session.getAttribute(SessionValueKeys.DB_USER);
        LocationDAO locManager = new LocationDAO(user);
        LocationEmailDAO locEmailDAO = new LocationEmailDAO(user);
        
        try {

            LocationDTO location = locManager.getLocation(acctForm.getLocationID() );
            
            location.setAccountantUserID(acctForm.getAccountantUserID());
            location.setAddr1(acctForm.getAddress1());
            location.setAddr2(acctForm.getAddress2());
            location.setAddr3(acctForm.getAddress3());
            location.setCity(acctForm.getCity());
            location.setName(acctForm.getLocationName());
            location.setState(acctForm.getState());
            location.setZip(acctForm.getZipcode());
            
            DecimalFormat df = new DecimalFormat ("$#,##0.00");
            double internalVendor = 0.0;
//    		try { 
//
//    			internalVendor = df.parse(acctForm.getInternalVendorLimit()).doubleValue();
//    			
//    		} catch ( ParseException nfe ) {
//    			errors.add ( ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.decimalFormat", "Internal Vendor Amount") );
//    			internalVendor = 0.0;
//    		}
    		
    		double externalVendor = 0.0;
//    		try { 
//    			externalVendor = df.parse(acctForm.getExternalVendorLimit()).doubleValue();
//    			
//    		} catch ( ParseException nfe ) {
//    			errors.add ( ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.decimalFormat", "External Vendor Amount") );
//    			externalVendor = 0.0;
//    		}
    		internalVendor = (FormatCurrency.convertToCurrencyDbl(acctForm.getInternalVendorLimit()));
    		externalVendor = (FormatCurrency.convertToCurrencyDbl(acctForm.getExternalVendorLimit()));
            location.setExternalVendorLimit(externalVendor);
            location.setInternalVendorLimit(internalVendor);
            
            locManager.updateLocation(location);
            
        	String emailAddy = acctForm.getNewEmailAddress();
        	
        	if ( emailAddy != null && emailAddy.length() > 0 ) {
        		String recipients = emailAddy;
        		recipients = recipients.replace(":", ";");
        		recipients = recipients.replace(",",";");
        		recipients = recipients.replace(" ", ";");
        		
        		StringTokenizer token = new StringTokenizer(recipients,";");
        		String emailName = "";
        		while (token.hasMoreElements()) {
        			emailName = token.nextToken();
        			
					LocationEmailDTO email = new LocationEmailDTO();
					
					email.setCompanyID(location.getCompanyID());
					email.setLocaleID(location.getLocaleID());
					email.setLocationID(location.getLocationID());
					email.setEmailType(acctForm.getNewEmailType());

					email.setEmailAddress(emailName);

					locEmailDAO.addLocationEmail(email);
				}
        		acctForm.setNewEmailAddress(null);
        		acctForm.setNewEmailType(LocationEmailDTO.EMAIL_TYPE_TO);
        	}
        	
        } catch ( Exception e ) {
        	errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.exception", e.getMessage()) );
			saveMessages(request, errors);
			e.printStackTrace();
			return (mapping.getInputForward());
        }
        
   		return ( mapping.findForward("success") );
		
	}
}