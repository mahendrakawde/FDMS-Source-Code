/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.aldorsolutions.dashboard.struts.action.acct;

import java.sql.Date;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.StringTokenizer;
import java.util.TreeMap;

import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.xml.registry.infomodel.EmailAddress;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.math.NumberUtils;
import org.apache.commons.lang.text.StrLookup;
import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;

import com.aldorassist.webfdms.dao.InvoiceDAO;
import com.aldorassist.webfdms.dao.InvoiceItemDAO;
import com.aldorassist.webfdms.dao.LocaleDAO;
import com.aldorassist.webfdms.dao.LocationDAO;
import com.aldorassist.webfdms.dao.LocationEmailDAO;
import com.aldorassist.webfdms.delegate.CompanyOptionsManager;
import com.aldorassist.webfdms.delegate.InvoiceManager;
import com.aldorassist.webfdms.model.CompanyOptionsDTO;
import com.aldorassist.webfdms.model.InvoiceDTO;
import com.aldorassist.webfdms.model.InvoiceItemDTO;
import com.aldorassist.webfdms.model.LocaleDTO;
import com.aldorassist.webfdms.model.LocationDTO;
import com.aldorassist.webfdms.model.LocationEmailDTO;
import com.aldorsolutions.dashboard.struts.form.acct.InvoiceListForm;
import com.aldorsolutions.webfdms.admin.user.bean.UserManagerBean;
import com.aldorsolutions.webfdms.admin.user.dao.UserDAO;
import com.aldorsolutions.webfdms.admin.user.model.UserDTO;
import com.aldorsolutions.webfdms.admin.user.model.UserLocaleDTO;
import com.aldorsolutions.webfdms.admin.user.model.UserLocationDTO;
import com.aldorsolutions.webfdms.beans.DbApMaster;
import com.aldorsolutions.webfdms.beans.DbApVendor;
import com.aldorsolutions.webfdms.beans.DbInvoice;
import com.aldorsolutions.webfdms.beans.DbLocation;
import com.aldorsolutions.webfdms.beans.DbUserSession;
import com.aldorsolutions.webfdms.beans.FdmsDb;
import com.aldorsolutions.webfdms.beans.display.CheckListBean;
import com.aldorsolutions.webfdms.beans.display.InvoiceListBean;
import com.aldorsolutions.webfdms.checkwriter.dao.ApMasterDAO;
import com.aldorsolutions.webfdms.checkwriter.dao.ApVendorDAO;
import com.aldorsolutions.webfdms.checkwriter.dao.ApVendorLocationDAO;
import com.aldorsolutions.webfdms.checkwriter.model.ApMasterDTO;
import com.aldorsolutions.webfdms.checkwriter.model.ApVendorDTO;
import com.aldorsolutions.webfdms.checkwriter.model.ApVendorLocationDTO;
import com.aldorsolutions.webfdms.database.DatabaseTransaction;
import com.aldorsolutions.webfdms.database.PersistenceException;
import com.aldorsolutions.webfdms.ums.model.RolesMembershipDTO;
import com.aldorsolutions.webfdms.util.DateUtility;
import com.aldorsolutions.webfdms.util.EmailLogDTO;
import com.aldorsolutions.webfdms.util.EmailLogger;
import com.aldorsolutions.webfdms.util.FormatCurrency;
import com.aldorsolutions.webfdms.util.FormatDate;
import com.aldorsolutions.webfdms.util.MailUtil;
import com.aldorsolutions.webfdms.util.SessionValueKeys;

/**
 * MyEclipse Struts Creation date: 09-24-2007
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/invoiceList" name="invoiceListForm" scope="request"
 *                validate="true"
 * @struts.action-forward name="showList" path="/acct/invoiceList.jsp"
 */
public class InvoiceListAction extends Action {

	private Logger logger = Logger.getLogger(InvoiceListAction.class.getName());

	private StringBuffer emailLinkURL = null;

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
		InvoiceListForm invoiceListForm = (InvoiceListForm) form;// TODO
		// Auto-generated
		// method stub

		HttpSession session = request.getSession();
		InvoiceManager invMgr = new InvoiceManager();
		DbUserSession user = (DbUserSession) session.getAttribute(SessionValueKeys.DB_USER);

		emailLinkURL = request.getRequestURL();

		// If the type is not specified then use the one already supplied in the
		// form.
		if (request.getParameter("type") != null) {
			invoiceListForm.setListType(request.getParameter("type"));
			session.setAttribute("listType", request.getParameter("type"));

		}

		// start initial for search form.
		// if ((request.getParameter("type") != null) &&
		// (request.getParameter("type").compareToIgnoreCase("search") == 0)) {
		if (invoiceListForm.getListType().equals("search")) {
			ApVendorLocationDAO apVendorLocationDao = new ApVendorLocationDAO(user);
			UserManagerBean uMgr = new UserManagerBean();

			Boolean isSpecificLoc = (Boolean) session.getAttribute(SessionValueKeys.ISSPECIFICLOC);
			boolean onlyOneLoc = false;
			if (isSpecificLoc == null) {
				onlyOneLoc = false;
			} else {
				onlyOneLoc = isSpecificLoc;
			}

			ArrayList<Long> locationIDs = new ArrayList<Long>();
			ArrayList<UserLocationDTO> locations = new ArrayList<UserLocationDTO>();

			if (onlyOneLoc) {
				locationIDs.add((long) user.getLocationId());
				locations = uMgr.getLocationOfUser(user.getDbLookup(), (int) user.getId(), user.getCompanyID(), user.getRegion(), (long) user
						.getLocationId());

			} else {
				locations = uMgr.getLocationsOfUser(user.getDbLookup(), (int) user.getId(), user.getCompanyID(), user.getRegion());

				// ArrayList<Long> locationIDs = new ArrayList<Long>();
				for (UserLocationDTO userLocation : locations) {
					locationIDs.add(userLocation.getLocationId());
				}
			}

			ArrayList<ApVendorLocationDTO> apVendorLocationList = apVendorLocationDao.getApVendorLocationByLocationIDs(locationIDs);
			ArrayList<Long> vendorIDs = new ArrayList<Long>();
			for (ApVendorLocationDTO apVendorLocation : apVendorLocationList) {
				vendorIDs.add(apVendorLocation.getVendorID());
			}

			ApVendorDAO apVendorDao = new ApVendorDAO(user);
			ArrayList<ApVendorDTO> vendorList = new ArrayList<ApVendorDTO>();
			vendorList = apVendorDao.getApVendorByVendorIDs(true, vendorIDs);

			session.setAttribute("vendorListAll", vendorList);

			// this generate javascript to match between vendor and location
			// ArrayList <ApVendorLocationDTO> apVendorLocationListAll =
			// apVendorLocationDao.getApVendorLocationByLocationIDs(locationAllIDs);
			// ArrayList <ApVendorLocationDTO> apVendorLocationListAll =
			// apVendorLocationDao.getApVendorLocationByLocationIDs(locationIDs);

			String[] jsVendorIDs = new String[1];
			if (invoiceListForm.getLocationID() == 0) {
				jsVendorIDs[0] = "0";
			} else {
				jsVendorIDs[0] = String.valueOf(invoiceListForm.getVendorID());
			}
			// String js = uMgr.createLocationWithVendorJavascript (
			// apVendorLocationListAll, jsVendorIDs, user, vendorList );
			String js = uMgr.createLocationWithVendorJavascript(apVendorLocationList, jsVendorIDs, user, vendorList);
			invoiceListForm.setLocationVendorMapJavascript(js);

			if (invoiceListForm.getEarliestDateSearchVendor() == null || invoiceListForm.getEarliestDateSearchVendor().length() != 10) {
				invoiceListForm.setEarliestDateSearchVendor(FormatDate.convertDateToMM_DD_YYYY(DateUtility.getCurrentDate()));
			}
			if (invoiceListForm.getLatestDateSearchVendor() == null || invoiceListForm.getLatestDateSearchVendor().length() != 10) {
				invoiceListForm.setLatestDateSearchVendor(FormatDate.convertDateToMM_DD_YYYY(DateUtility.getCurrentDate()));
			}
			if (invoiceListForm.getEarliestDateSearchInvoice() == null || invoiceListForm.getEarliestDateSearchInvoice().length() != 10) {
				invoiceListForm.setEarliestDateSearchInvoice(FormatDate.convertDateToMM_DD_YYYY(DateUtility.getCurrentDate()));
			}
			if (invoiceListForm.getLatestDateSearchInvoice() == null || invoiceListForm.getLatestDateSearchInvoice().length() != 10) {
				invoiceListForm.setLatestDateSearchInvoice(FormatDate.convertDateToMM_DD_YYYY(DateUtility.getCurrentDate()));
			}

			String[] locationID = new String[1];
			if (onlyOneLoc) {
				locationID[0] = String.valueOf(user.getLocationId());
			} else {
				locationID[0] = String.valueOf(invoiceListForm.getLocationID());
			}
			String localeJs = uMgr.createLocaleJavascriptAll(locations, locationID, !onlyOneLoc);
			invoiceListForm.setLocaleLocationMapJs(localeJs);

			// this for setting initial location on javascript
			String initLocationJs = uMgr.createInitialLocation(locations, !onlyOneLoc);
			invoiceListForm.setInitLocationJs(initLocationJs);

			// end initial for search form
		}

		ArrayList<CheckListBean> checkURL = new ArrayList<CheckListBean>();
		session.setAttribute("checkURL", checkURL);
		String checks = new String();
		TreeMap<String, Integer> checkTree = new TreeMap<String, Integer>();

		if (invoiceListForm != null
				&& invoiceListForm.getFormSubmit() != null
				&& ((invoiceListForm.getFormSubmit().compareTo("submitInvoice") == 0) || (invoiceListForm.getFormSubmit().compareTo("addInvoice") == 0))) // not
		// used
		{
			invoiceListForm.validate(mapping, request);

			if ((invoiceListForm.getFormSubmit().compareTo("addInvoice") == 0)) {
				return new ActionForward(mapping.findForward("addInvoice"));
			} else if ((invoiceListForm.getFormSubmit().compareTo("approveInvoice") == 0)) {
				request.setAttribute("SELECTEDINVOICES", invoiceListForm.getSelectedInvoices());
				return new ActionForward(mapping.findForward("showConfirmPage"));
			} else if ((invoiceListForm.getFormSubmit().compareTo("submitInvoice") == 0)) {
				invoiceListForm.setFormSubmit("");
				InvoiceDAO invoiceDAO = new InvoiceDAO(user);
				ArrayList<InvoiceDTO> confirmInvoices = null;
				String[] submitedInvoices = invoiceListForm.getSubmitedInvoices();
				confirmInvoices = invoiceDAO.getInvoices(submitedInvoices);    
				
				ActionMessages errors = new ActionMessages();
				ServletContext context = this.getServlet().getServletContext();
				DatabaseTransaction trans = null;

				long startingCheckNumber = 0;
				long appLocaleID = 0;
				long appLocationID = 0;

				HashMap<String, StringBuffer> emailMap = new HashMap<String, StringBuffer>();
				TreeMap<String, InvoiceDTO> checkMap = new TreeMap<String, InvoiceDTO>();
				TreeMap<String, ArrayList<String>> invoiceMap = new TreeMap<String, ArrayList<String>>();
				ArrayList<Integer> logids = new ArrayList<Integer>();
				String subject = null; // for email subject
				if (invoiceListForm.getListType().equalsIgnoreCase("saved")) {
					subject = "Invoice(s) have been submitted.";
				} else if (invoiceListForm.getListType().equalsIgnoreCase("submitted")) {
					subject = "Invoice(s) have been approved.";
					//subject = "Invoice(s) is waiting for your approval";
				} else if (invoiceListForm.getListType().equalsIgnoreCase("approved")) {
					subject = "Invoice(s) have been printed";
				}

				// check sequence checknumber.
				if (invoiceListForm.getListType().equalsIgnoreCase("approved")) {
					startingCheckNumber = invoiceListForm.getCheckNumber();
					appLocationID = ((InvoiceDTO) confirmInvoices.get(0)).getLocationID();
					appLocaleID = getLocaleID((int) appLocationID, user);

					if (startingCheckNumber < 1) {
						errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.acct.checknumber.lessthanone"));
						saveErrors(request, errors);
					} else {
						isSequenceCheckNumber((int) appLocaleID, (int) appLocationID, startingCheckNumber, user, errors, request, confirmInvoices);
					}
				}

				if (errors.size() == 0) {

					try {
						trans = (DatabaseTransaction) DatabaseTransaction.getTransaction(user);
						for (InvoiceDTO submitedInvoice : confirmInvoices) {

							DbInvoice dbInvoice = FdmsDb.getInstance().getInvoice(trans, submitedInvoice.getInvoiceID());

							// If we are on the saved menu then the only thing
							// they can do is submit invoices
							if (invoiceListForm.getListType().equalsIgnoreCase("saved")) {

								dbInvoice.setInvoiceStatus(InvoiceDTO.INVOICE_SUBMIT);
								// Set the invoice to submitted and wait for
								// approval
								submitedInvoice.setInvoiceStatus(InvoiceDTO.INVOICE_SUBMIT);

							} else if (invoiceListForm.getListType().equalsIgnoreCase("submitted")) {
								// Only submitted can be approved.

								dbInvoice.setInvoiceStatus(InvoiceDTO.INVOICE_APPROVE);
								// set invoice to approval and wait for print
								submitedInvoice.setInvoiceStatus(InvoiceDTO.INVOICE_APPROVE);

							} else if (invoiceListForm.getListType().equalsIgnoreCase("approved")) {
								// If the check is approved then when we get
								// here we want to print the checks.

								if (errors.isEmpty()) {
									try {
										// create the check and print it.
										// submitedInvoice.setCheckNumber(startingCheckNumber);

										// Create the invoice
										// create a set of check which combine
										// the same vendor to the same check.
										setHashmapCheck(checkMap, submitedInvoice, user);
										setHashmapInvoice(invoiceMap, submitedInvoice);

										dbInvoice.setCheckCreated(true);
										dbInvoice.setInvoicePaid(true);
										dbInvoice.setInvoiceStatus(InvoiceDTO.INVOICE_PRINT);

										submitedInvoice.setCheckCreated(true);
										submitedInvoice.setInvoicePaid(true);
										submitedInvoice.setInvoiceStatus(InvoiceDTO.INVOICE_PRINT);

									} catch (Exception e) {
										e.printStackTrace();
										logger.debug(e.getMessage(), e);
										errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.exception", e.getMessage()));
										saveErrors(request, errors);
									}

								}

							} // this is end approved.
							else if (invoiceListForm.getListType().equalsIgnoreCase("deny")) {
								// If the check is approved then when we get
								// here we want to print the checks.

								if (errors.isEmpty()) {
									try {

										dbInvoice.setCheckCreated(false);
										dbInvoice.setInvoicePaid(false);
										dbInvoice.setInvoiceStatus(InvoiceDTO.INVOICE_DENY);

										submitedInvoice.setCheckCreated(false);
										submitedInvoice.setInvoicePaid(false);
										submitedInvoice.setInvoiceStatus(InvoiceDTO.INVOICE_DENY);

									} catch (Exception e) {
										e.printStackTrace();
										logger.debug(e.getMessage(), e);
										errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.exception", e.getMessage()));
										saveErrors(request, errors);
									}

								}

							}

							// Now update the invoice status.
							trans.addPersistent(dbInvoice);

							if ((invoiceListForm.getListType().equalsIgnoreCase("saved"))
									|| (invoiceListForm.getListType().equalsIgnoreCase("submitted"))) {
								createEmail(submitedInvoice, emailMap, user, subject, logids);
							}

						} // end for
						trans.save();
					} catch (Exception e) {
						e.printStackTrace();
						logger.debug(e.getMessage(), e);
						errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.exception", e.getMessage()));
						saveErrors(request, errors);

					} finally {
						if (trans != null) {
							trans.closeConnection();
							trans = null;
						}
					}

				}
				// now we are going to go through all of checks to be printed
				// group by vendorID
				// we are print the check out order by vendorname+code
				if (errors.size() == 0) {
					if (invoiceListForm.getListType().equalsIgnoreCase("approved")) {

						InvoiceDTO anInvoice = null;
						String key = "";
						String vendorID = "";
						Iterator<String> keys = checkMap.keySet().iterator();
						ArrayList<String> data = null;
						// String invoiceID = "";
						DatabaseTransaction t = null;
						try {
							t = (DatabaseTransaction) DatabaseTransaction.getTransaction(user);
							while (keys.hasNext()) {
								// vendorID = keys.next();
								key = keys.next();

								StringTokenizer token = new StringTokenizer(key, ":");
								String[] mapKey = new String[3];
								int i = 0;
								while (token.hasMoreElements()) {
									mapKey[i++] = token.nextToken();
								}

								vendorID = mapKey[2];

								anInvoice = checkMap.get(key);
								anInvoice.setCheckNumber(startingCheckNumber);

								ApVendorDAO apVendorDao = new ApVendorDAO(user);
								ApVendorDTO aVendor = new ApVendorDTO();
								aVendor = apVendorDao.getApVendor(Long.parseLong(vendorID));

								try {
									// create check
									DbApMaster apMaster = invMgr.createInvoicesCheck(user, anInvoice, invoiceMap, aVendor);

									// Now create a list of checks to print
									// later
									if (checks.length() > 0) {
										checks += ",";
									}
									checks += String.valueOf(apMaster.getId());

									checkTree
											.put((aVendor.getName() + ":" + aVendor.getVendorCode() + ":" + aVendor.getVendorID()), apMaster.getId());

									updateCheckNumber(startingCheckNumber, (int) (anInvoice.getAmountOfInvoice() * 100), user, (int) appLocationID);
									startingCheckNumber = startingCheckNumber + 1;

									// save this for reverse the ap module.
									// set the table apInvoicesForCheck
									data = invoiceMap.get(vendorID);
									for (String invoiceID : data) {

										DbInvoice dbInvoice = FdmsDb.getInstance().getInvoice(t, Integer.parseInt(invoiceID));
										dbInvoice.setApMasterID(apMaster.getId());
										t.addPersistent(dbInvoice);
									}

								} catch (Exception e) {
									e.printStackTrace();
									logger.debug(e.getMessage(), e);
									errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.exception", e.getMessage()));
									saveErrors(request, errors);
								}
							}
							t.save();
						} catch (Exception e) {
							e.printStackTrace();
							logger.debug(e.getMessage(), e);
							errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.exception", e.getMessage()));
							saveErrors(request, errors);

						} finally {
							if (t != null) {
								t.closeConnection();
								t = null;
							}
						}
					}
				}

				// loop for sending email out
				String emailName = null;
				String emailMsg = null;
				// String subject = null;
				// if (invoiceListForm.getListType().equalsIgnoreCase("saved"))
				// {
				// subject = "Invoice(s) have been submitted.";
				// }else if
				// (invoiceListForm.getListType().equalsIgnoreCase("submitted"))
				// {
				// subject = "Invoice(s) have been approved.";
				// } else if
				// (invoiceListForm.getListType().equalsIgnoreCase("approved"))
				// {
				// subject = "Invoice(s) have been printed";
				// }
				Iterator<String> keys = emailMap.keySet().iterator();

				ArrayList<String> emailNameArray = new ArrayList<String>();
				boolean duplicateEmail = false;
				while (keys.hasNext()) {
					emailName = (String) keys.next();

					for (String name : emailNameArray) {
						if (emailName.trim().compareToIgnoreCase(name.trim()) == 0) {
							duplicateEmail = true;
						}
					}
					if (!duplicateEmail) {
						if (emailMap.containsKey(emailName)) {
							emailMsg = (emailMap.get(emailName)).toString();
							try {
								ArrayList<String> emailArray = new ArrayList<String>();
								emailArray.add(emailName);
								MailUtil.sendEmail(user, user.getConfigID(), emailArray, null, null, subject, emailMsg);

								// log it when we send out the email
								CompanyOptionsManager coMgr = new CompanyOptionsManager();
								int emailLogOption = coMgr.getCompanyOptionValueForCompany(user.getCompanyID(),
										CompanyOptionsDTO.COMPANY_OPTION_EMAIL_LOG);
								if (emailLogOption == 1) {
									EmailLogDTO emailData = new EmailLogDTO();
									EmailLogger emailLoger = new EmailLogger(user);
									emailData = emailLoger.getLog(logids, emailName);
									long stopTime = System.currentTimeMillis();
									emailData.setStopTime(stopTime);
									java.sql.Timestamp tmpStartTime = new java.sql.Timestamp(emailData.getStartTime());
									emailData.setExecuteTime((int) (stopTime - emailData.getStartTime()));
									emailData.setEmailBody(emailMsg);
									emailLoger.updateEmailLog(emailData);
								}

							} catch (Exception e) {
								logger.error("Error Sending email out:" + e.getMessage());
							}

						}
					} else {
						duplicateEmail = false;
					}
					emailNameArray.add(emailName);
					emailMap.remove(emailName);
					keys = emailMap.keySet().iterator();
				}

				if (!emailMap.isEmpty() || emailMap.size() > 0) {
					emailMap.clear();
					try {
						ArrayList<String> emailArray = new ArrayList<String>();
						// emailArray.add("cjongs@aldorsolutions.com");
						emailArray.add("bshah@aldorsolutions.com");
						MailUtil.sendEmail(user, user.getConfigID(), emailArray, null, null, "Error on Send out email Dashboard",
								"Error on Send out email Dashboard");
					} catch (Exception e) {
						logger.error("Error Sending email out:" + e.getMessage());
					}
				}
				// print each check to screen
				if (invoiceListForm.getListType().equalsIgnoreCase("approved")) {

					invoiceListForm.setCheckNumber(getCheckNumber((int) appLocationID, user));
					if (errors.isEmpty()) {

						Iterator it = checkTree.entrySet().iterator();
						String checkPrint = "";
						while (it.hasNext()) {
							Map.Entry entry = (Map.Entry) it.next();
							String VName = (String) entry.getKey();
							Integer checkID = (Integer) entry.getValue();
							if (checkPrint.length() > 0) {
								checkPrint += ",";
							}
							checkPrint = checkPrint + checkID;
						}

						// String checkWriterURL =
						// invMgr.printInvoiceChecks(request, response, context,
						// errors, checks);
						String checkWriterURL = invMgr.printInvoiceChecks(request, response, context, errors, checkPrint);
						CheckListBean tmpBean = new CheckListBean();
						tmpBean.setURL(checkWriterURL);
						checkURL.add(tmpBean);
						session.setAttribute("checkWriterURL", checkWriterURL);
						session.setAttribute("checkURL", checkURL);
					}

				}

			} else {
			}
		}

		String requestType = invoiceListForm.getMRequestType();
		if (requestType == null) {
			requestType = "";
		} else if (requestType.compareToIgnoreCase("changeFilter") == 0 && invoiceListForm.getFilterText().compareToIgnoreCase("Locale") == 0) {

		}

		String checkWriterURL = (String) session.getAttribute("checkWriterURL");
		invoiceListForm.setCheckWriterURL(checkWriterURL);
		setLocations(user, invoiceListForm, request);

		// get invoicelist.
		invoiceListForm.setInvoices(createList(request, user, invoiceListForm));

		if (invoiceListForm.getListType().equalsIgnoreCase("deny")) {
			invoiceListForm.setListType("submitted");
		}
		String listType = (String) session.getAttribute("saveSearchListType");

		if (listType != null) {
			if (listType.equalsIgnoreCase("search")) {
				session.removeAttribute("saveSearchListType");
				return (mapping.findForward("search"));
			}
			if (listType.equalsIgnoreCase("denied")) {
				session.removeAttribute("saveSearchListType");
				return (mapping.findForward("deniedList"));
			}
			if (listType.equalsIgnoreCase("submit")) {
				session.removeAttribute("saveSearchListType");
				return (mapping.findForward("submitList"));
			}
		}

		session.removeAttribute("checkWriterURL");
		session.setAttribute("invoiceEditDisplayForm", null);
		createLocaleLocationList(request);
		return mapping.findForward("showList");

	}

	private ArrayList<UserLocationDTO> getUserLocationsFromLocale(HttpServletRequest request, long localeID) {
		UserDAO userDAO = new UserDAO();
		HttpSession session = request.getSession();
		DbUserSession user = (DbUserSession) session.getAttribute(SessionValueKeys.DB_USER);
		ArrayList<UserLocationDTO> userLocations = new ArrayList<UserLocationDTO>();
		if (localeID == 0) {
			userLocations = userDAO.getUserLocations(user.getId());
		} else {
			userLocations = userDAO.getUserLocations(user.getId(), (int) localeID);
		}
		return userLocations;
	}

	private void createLocaleLocationList(HttpServletRequest request) {
		UserDAO userDAO = new UserDAO();
		HttpSession session = request.getSession();
		DbUserSession user = (DbUserSession) session.getAttribute(SessionValueKeys.DB_USER);
		UserManagerBean uMgr = new UserManagerBean();
		// ArrayList <UserLocationDTO> locations = uMgr.getLocations(
		// user.getDbLookup(), (int) user.getId(),
		// user.getCompanyID(), user.getRegion() );
		// ArrayList <UserLocationDTO> userLocations =
		// userDAO.getUserLocations(user.getId());
		// ArrayList <UserLocationDTO> rUserLocations = new
		// ArrayList<UserLocationDTO>();
		// for (UserLocationDTO userLocation: userLocations) {
		// for (UserLocationDTO location: locations) {
		// if (location.getLocationId() == userLocation.getLocationId()){
		// rUserLocations.add(location);
		// break;
		// }
		// }
		// }
		//        
		//        
		// session.setAttribute("ADMIN_LOCATIONS", rUserLocations);
		//        
		// ArrayList <UserLocaleDTO> locales = uMgr.getLocalesOfUser(
		// user.getDbLookup(), (int) user.getId(),
		// user.getCompanyID(), user.getRegion());
		//
		// ArrayList <UserLocaleDTO> userLocales =
		// userDAO.getUserLocales(user.getId());
		// ArrayList <UserLocaleDTO> rUserLocales = new
		// ArrayList<UserLocaleDTO>();
		// for (UserLocaleDTO locale: locales){
		// for (UserLocaleDTO userLocale: userLocales ){
		// if ( userLocale.getLocaleId().equalsIgnoreCase(locale.getLocaleId())
		// ){
		// userLocale.setName(locale.getName());
		// userLocale.setCompanyId(locale.getCompanyId());
		// rUserLocales.add(userLocale);
		// break;
		// }
		// }
		// }
		//        

		Boolean isSpecificLoc = (Boolean) session.getAttribute(SessionValueKeys.ISSPECIFICLOC);
		boolean onlyOneLoc = false;
		if (isSpecificLoc == null) {
			onlyOneLoc = false;
		} else {
			onlyOneLoc = isSpecificLoc;
		}
		ArrayList<UserLocationDTO> userLocations = new ArrayList<UserLocationDTO>();
		ArrayList<UserLocaleDTO> userLocales = new ArrayList<UserLocaleDTO>();
		if (onlyOneLoc) {

			userLocations = uMgr.getLocationOfUser(user.getDbLookup(), (int) user.getId(), user.getCompanyID(), user.getRegion(), (long) user
					.getLocationId());
			session.setAttribute("ADMIN_LOCATIONS", userLocations);
			userLocales = uMgr.getLocaleOfUser(user.getDbLookup(), (int) user.getId(), user.getCompanyID(), user.getRegion());
			session.setAttribute("ADMIN_LOCALES", userLocales);
		} else {
			userLocations = uMgr.getLocationsOfUser(user.getDbLookup(), (int) user.getId(), user.getCompanyID(), user.getRegion());

			UserLocationDTO locDto = new UserLocationDTO();
			locDto.setLocationId(0);
			locDto.setName("*** ALL ***");
			locDto.setRegionId(0);
			userLocations.add(0, locDto);
			session.setAttribute("ADMIN_LOCATIONS", userLocations);
			userLocales = uMgr.getLocalesOfUser(user.getDbLookup(), (int) user.getId(), user.getCompanyID(), user.getRegion());

			UserLocaleDTO localeDto = new UserLocaleDTO();
			localeDto.setLocaleId("0");
			localeDto.setName("*** ALL ***");
			userLocales.add(0, localeDto);
			session.setAttribute("ADMIN_LOCALES", userLocales);
		}

	}

	private Date parseDate(String dateStr) {

		Date date = null;

		if (dateStr != null || dateStr.length() > 0) {
			try {
				date = FormatDate.convertToSQLDate(dateStr);
			} catch (Exception e) {
				// logger.debug(e.getMessage(), e);
			}
		} else {
			try {
				long currentTime = System.currentTimeMillis();

				date = new java.sql.Date(currentTime);
			} catch (Exception e) {
				// logger.debug(e.getMessage(), e);
			}
		}

		return (date);
	}

	private void updateCheckNumber(long startingCheckNumber, int amount, DbUserSession user, int locationID) {
		DatabaseTransaction t = null;
		try {
			t = (DatabaseTransaction) DatabaseTransaction.getTransaction(user);
			DbLocation aloc = FdmsDb.getInstance().getLocation(t, locationID);
			if (aloc == null) {
				// error no location
			}
			if ((aloc.getNextCheckNumber() == startingCheckNumber) || (aloc.getNextCheckNumber() < startingCheckNumber)) {
				aloc.setNextCheckNumber(startingCheckNumber + 1);
			}

			// form.setCheckNumber( String.valueOf(checknumber+1 ))
			// aloc.setCashBalance( aloc.getCashBalance() - amount);
			t.save();
		} catch (Exception e) {
			logger.error("Error : ", e);
		} finally {
			if (t != null) {
				t.closeConnection();
				t = null;
			}
		}
	}

	private boolean isSequenceCheckNumber(int appLocaleID, int appLocationID, long startingCheckNumber, DbUserSession user, ActionMessages errors,
			HttpServletRequest request, ArrayList<InvoiceDTO> confirmInvoices) {

		boolean sequenceCheckNumber = true;
		long startCheckNumber = startingCheckNumber;
		int invoiceSize = 0;
		Integer count = 0;
		HashMap<String, Integer> numVendors = new HashMap<String, Integer>();
		for (InvoiceDTO submitedInvoice : confirmInvoices) {
			if (numVendors.containsKey(String.valueOf(submitedInvoice.getVendorID()))) {
				count = numVendors.get(String.valueOf(submitedInvoice.getVendorID()));
				count = count + 1;

			} else {
				count = 1;
				numVendors.put(String.valueOf(submitedInvoice.getVendorID()), count);
			}
		}
		invoiceSize = numVendors.size();
		for (int i = 0; i < invoiceSize; i++) {
			if (isDuplicateCheck(appLocaleID, appLocationID, startCheckNumber, user, errors, request)) {
				sequenceCheckNumber = false;
				errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.acct.checknumber.notSequence"));
				saveErrors(request, errors);
				break;
			} else {
				startCheckNumber++;
			}
		}

		return sequenceCheckNumber;
	}

	private boolean isDuplicateCheck(int appLocaleID, int appLocationID, long startingCheckNumber, DbUserSession user, ActionMessages errors,
			HttpServletRequest request) {

		boolean duplicate = false;
		DatabaseTransaction t = null;

		try {

			// Make sure this check number not already used
			t = (DatabaseTransaction) DatabaseTransaction.getTransaction(user);

			// getApCheckSet(DatabaseTransaction t, int locale, int location,
			// long checknumber, boolean includeVoids)
			// checks = FdmsDb.getInstance().getApCheckSet(t,
			// sessionUser.getRegion(),0,checknumber,false);
			DbApMaster[] duplicatedChecks = null;
			duplicatedChecks = FdmsDb.getInstance().getApCheckSet(t, (int) appLocaleID, (int) appLocationID, startingCheckNumber, false, null);
			if (duplicatedChecks.length > 0) {
				errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.acct.checknumber.exist", String.valueOf(startingCheckNumber)));
				saveErrors(request, errors);
				duplicate = true;
			} else {
				duplicate = false;
			}

		} catch (Exception e) {
			logger.error("Error : ", e);
		} finally {
			if (t != null) {
				t.closeConnection();
				t = null;
			}
		}

		return duplicate;
	}

	// Generate Email list for each invoice
	private void createEmail(InvoiceDTO invoice, HashMap<String, StringBuffer> emailMap, DbUserSession user, String subject, ArrayList<Integer> logids) {

		if (invoice.getInvoiceStatus().compareTo(InvoiceDTO.INVOICE_APPROVE) == 0) {
			// this one send the email after the accountant approved the invoice
			// to users.
			// send email to users using locationemail table but if it is empty
			// then use the usersecurity list.

			LocationEmailDAO locEmailDAO = new LocationEmailDAO(user);
			ArrayList<LocationEmailDTO> locEmails = locEmailDAO.getLocationEmailByLocation(invoice.getLocationID());

			if (locEmails != null && locEmails.size() > 0) {

				for (LocationEmailDTO locEmail : locEmails) {

					if (isValidEmailAddress(locEmail.getEmailAddress())) {
						setHashmapEmail(locEmail.getEmailAddress(), emailMap, user, invoice, subject, logids);
					}
				}
			} else {
				UserDAO userDao = new UserDAO();
				ArrayList<UserLocationDTO> usersByLocation = userDao.getUsersByLocation(invoice.getLocationID());

				ArrayList<UserDTO> users = userDao.getUsersByRoleAssigned(1, user.getCompanyID(), 2);

				for (UserDTO aUser : users) {
					for (UserLocationDTO userByLocation : usersByLocation) {
						if (aUser.getUserId() == userByLocation.getUser_id()) {
							if (isValidEmailAddress(aUser.getEmail())) {
								setHashmapEmail(aUser.getEmail(), emailMap, user, invoice, subject, logids);
							}
						}
					}
				}
			}

		} else { // If the email submitted status (submitted by user then send
			// the email to accountant.
			// send email to accountant using usersecurity table

			// send email to the accountant
			LocationDAO locManager = new LocationDAO(user);
			String accountantEmail = "";
			try {
				UserDAO userDao = new UserDAO();
				LocationDTO location = locManager.getLocation(invoice.getLocationID());
				long acctID = location.getAccountantUserID();
				UserDTO userInfo = userDao.getUser(acctID);
				// if (userInfo.getEmail().length() > 6){
				if (userInfo != null && userInfo.getEmail() != null && isValidEmailAddress(userInfo.getEmail())) {
					accountantEmail = userInfo.getEmail();
					setHashmapEmail(userInfo.getEmail(), emailMap, user, invoice, subject, logids);
					setHashmapEmail("fbarrett@aldorsolutions.com", emailMap, user, invoice, subject, logids);
				}

			} catch (Exception e) {
				e.printStackTrace();

			}

			// send email to the director and so on in the locationemail table.
			LocationEmailDAO locEmailDAO = new LocationEmailDAO(user);
			ArrayList<LocationEmailDTO> locEmails = locEmailDAO.getLocationEmailByLocation(invoice.getLocationID());

			if (locEmails != null && locEmails.size() > 0) {

				for (LocationEmailDTO locEmail : locEmails) {
					// eliminate the duplicate email setup if the accountant
					// email was set in the locatinemail table.
					if (locEmail.getEmailAddress().compareToIgnoreCase(accountantEmail) != 0) {
						if (isValidEmailAddress(locEmail.getEmailAddress())) {
							setHashmapEmail(locEmail.getEmailAddress(), emailMap, user, invoice, subject, logids);
						}
					}
				}
			}

		}

	}

	public static boolean isValidEmailAddress(String aEmailAddress) {
		if (aEmailAddress == null)
			return false;
		boolean result = true;
		try {
			InternetAddress emailAddr = new InternetAddress(aEmailAddress);
			if (!hasNameAndDomain(aEmailAddress)) {
				result = false;
			}
		} catch (AddressException ex) {
			result = false;
		}
		return result;
	}

	private static boolean hasNameAndDomain(String aEmailAddress) {
		String[] tokens = aEmailAddress.split("@");
		return (tokens.length == 2 && tokens[0].length() > 0 && tokens[1].length() > 3);
	}

	public void setHashmapEmail(String emailAddr, HashMap<String, StringBuffer> emailMap, DbUserSession user, InvoiceDTO invoice, String subject,
			ArrayList<Integer> IDs) {
		StringBuffer message = null;
		if (emailMap.containsKey(emailAddr)) { // append email body
			message = (StringBuffer) emailMap.get(emailAddr);
			try {
				message.append(emailMessage(user, invoice,emailAddr));
			} catch (Exception e) {
				logger.error("Error generate invoice content for email:" + e.getMessage());
			}

		} else { // create a new email
			message = new StringBuffer();
			try {
				message.append(emailMessage(user, invoice,emailAddr));
			} catch (Exception e) {
				logger.error("Error generate invoice content for email:" + e.getMessage());
			}

			emailMap.put(emailAddr, message);

			// now we are going to log it
			CompanyOptionsManager coMgr = new CompanyOptionsManager();
			int emailLogOption = coMgr.getCompanyOptionValueForCompany(user.getCompanyID(), CompanyOptionsDTO.COMPANY_OPTION_EMAIL_LOG);
			if (emailLogOption == 1) {
				EmailLogDTO emailData = new EmailLogDTO();
				EmailLogger emailLoger = new EmailLogger(user);
				long startTime = System.currentTimeMillis();
				emailData.setStartTime(startTime);
				emailData.setStopTime(0);
				emailData.setExecuteTime(0);
				emailData.setEmailTo(emailAddr);
				emailData.setEmailSubject(subject);
				emailData.setEmailBody(message.toString());
				emailLoger.emailLog(emailData);
				int ID = emailData.getLogID();
				IDs.add(ID);
			}
		}
	}

	public StringBuffer emailMessage(DbUserSession user, InvoiceDTO invoice,String emailAddr) throws Exception {

		DatabaseTransaction t = null;
		try {
			t = (DatabaseTransaction) DatabaseTransaction.getTransaction(user);

			DbApVendor vendor = FdmsDb.getInstance().getApVendor(t, invoice.getVendorID());
			DbLocation location = FdmsDb.getInstance().getLocation(t, invoice.getLocationID());

			String endLine = "\r\n";
			StringBuffer message = new StringBuffer();

			message.append(endLine + endLine);
			if (location.getAccountantUserID() > 0) {
				UserDAO userDao = new UserDAO();
				UserDTO userInfo = userDao.getUser(location.getAccountantUserID());
				if (userInfo.getEmail().equalsIgnoreCase(emailAddr)) {
					message.append("Invoice #" + invoice.getInvoiceNumber()
							+ " is waiting for your Approval. please click on below link for Approve / Denied Invoice(s)");
					message.append(endLine + emailLinkURL + "?type=submitted" + endLine);
				}
			}
			message.append("      Invoice Number: " + invoice.getInvoiceNumber() + endLine);
			message.append("        Invoice Date: " + FormatDate.convertDateToMM_DD_YY(invoice.getInvoiceDate()) + endLine);
			message.append("    Invoice Due Date: " + FormatDate.convertDateToMM_DD_YY(invoice.getInvoiceDueDate()) + endLine);
			message.append("      Invoice Amount: " + FormatCurrency.toCurrency(invoice.getAmountOfInvoice()) + endLine);
			message.append("   Discount Due Date: " + FormatDate.convertDateToMM_DD_YY(invoice.getDiscountDueDate()) + endLine);
			message.append(" Invoice Discription: " + invoice.getDescription() + endLine);
			message.append("     Discount Amount: " + FormatCurrency.toCurrency(invoice.getDiscountAmount()) + endLine);
			message.append("       Location Name: " + location.getName() + endLine);
			message.append("              Vendor: " + vendor.getName() + endLine);
			message.append("      Vendor Address: " + vendor.getAddr1() + endLine);
			if (vendor.getAddr2().length() > 0) {
				message.append("                      " + vendor.getAddr2() + endLine);
			}
			message.append("                      " + vendor.getCityState() + endLine);
			message.append("                User: " + user.getFirstName() + " " + user.getLastName() + endLine);
			message.append(endLine + endLine);
			InvoiceItemDAO invoiceItemDAO = new InvoiceItemDAO(user);
			ArrayList<InvoiceItemDTO> invoiceInvItems = invoiceItemDAO.getInvoiceItems(invoice.getInvoiceID());
			for (InvoiceItemDTO item : invoiceInvItems) {
				message.append("      	   Item Name: " + item.getItemDesc() + endLine);
				message.append("  Item Cost per Unit: " + item.getCostPerUnit() + endLine);
				message.append("       Item Quantity: " + item.getQuantity() + endLine);
				message.append("           Item Cost: " + item.getItemCost() + endLine);
				message.append("          GL Account: " + item.getGlAcctNumber() + endLine);
				message.append(endLine + endLine);
			}
			message.append("-------------------------------------------------------------------------------------" + endLine + endLine);

			return message;
		} finally {
			if (t != null) {
				t.closeConnection();
				t = null;
			}
		}

	}

	/**
	 * 
	 * @param request
	 * @param user
	 * @param invoiceListForm
	 * @return
	 */
	private ArrayList<InvoiceListBean> createList(HttpServletRequest request, DbUserSession user, InvoiceListForm invoiceListForm) {

		InvoiceDAO invoiceDao = new InvoiceDAO(user);
		ApVendorDAO vendorDao = new ApVendorDAO(user);
		LocationDAO locationDao = new LocationDAO(user);
		LocaleDAO localeDao = new LocaleDAO(user);
		HttpSession session = request.getSession();
		ActionErrors errors = new ActionErrors();

		String filterText = invoiceListForm.getFilterText();

		String orderBy = invoiceListForm.getOrderBy();
		String filterValue = "";
		long currentTime = System.currentTimeMillis();

		Date filterValueDate = new java.sql.Date(currentTime);
		Date earliestDateSearch = new java.sql.Date(currentTime);
		Date latestDateSearch = new java.sql.Date(currentTime);
		String strApMasterID = "";
		String strVendorIDs = "";
		ArrayList<Integer> apMasterIDs = new ArrayList<Integer>();
		String invSelectType = invoiceListForm.getInvSelectType();

		if (filterText == null) {
			filterText = "None";
		} else {
			filterValue = invoiceListForm.getFilterValue();
			filterValueDate = parseDate(invoiceListForm.getFilterValueDate());
		}
		if (orderBy == null) {
			orderBy = "None";
		}

		double invoiceTotalAmount = 0;

		ArrayList<RolesMembershipDTO> roles = user.getRoles();

		// ArrayList <InvoiceDTO> invoices = invoiceDao.getInvoices(true, true
		// );

		if (invoiceListForm.getListType().equalsIgnoreCase("approved")) {
			session.setAttribute("listType", invoiceListForm.getListType());
			filterText = "Location";
			// filterValue =
			// Long.toString(invoiceListForm.getApprovedLocationID());
			filterValue = "(" + Long.toString(invoiceListForm.getLocationID()) + ")";
			invoiceListForm.setCheckNumber(getCheckNumber((int) invoiceListForm.getLocationID(), user));
			invoiceListForm.setLocaleID(getLocaleID((int) invoiceListForm.getLocationID(), user));
			user.setRegion((int) invoiceListForm.getLocaleID());
			user.setLocationId((int) invoiceListForm.getLocationID());

		} else if (filterText.equalsIgnoreCase("Location")) {
			// filterValue = Long.toString(invoiceListForm.getLocationID());
			if (invoiceListForm.getLocationID() == 0) {
				ArrayList<UserLocationDTO> userLocations = getUserLocationsFromLocale(request, invoiceListForm.getLocationID());
				String strLocations = "(";
				int locationOrderNumber = 1;
				for (UserLocationDTO location : userLocations) {
					strLocations = strLocations + location.getLocationId();
					if (locationOrderNumber == userLocations.size()) {
						strLocations = strLocations + ")";
					} else {
						strLocations = strLocations + ",";
						locationOrderNumber++;
					}

				}
				filterValue = strLocations;
			} else {
				filterValue = "(" + invoiceListForm.getLocationID() + ")";
				long localeid = getLocaleID((int) invoiceListForm.getLocationID(), user);
				user.setRegion((int) localeid);
				user.setLocationId((int) invoiceListForm.getLocationID());
			}

		} else if (filterText.equalsIgnoreCase("Locale")) {

			ArrayList<UserLocationDTO> userLocations = getUserLocationsFromLocale(request, invoiceListForm.getLocaleID());
			String strLocations = "(";
			int locationOrderNumber = 1;
			for (UserLocationDTO location : userLocations) {
				strLocations = strLocations + location.getLocationId();
				if (locationOrderNumber == userLocations.size()) {
					strLocations = strLocations + ")";
				} else {
					strLocations = strLocations + ",";
					locationOrderNumber++;
				}

			}
			filterValue = strLocations;
		} else if (filterText.equalsIgnoreCase("vendorHistory")) {
			long locationid = invoiceListForm.getLocationID();
			int vendorID = invoiceListForm.getVendorID();
			earliestDateSearch = parseDate(invoiceListForm.getEarliestDateSearchVendor());
			latestDateSearch = parseDate(invoiceListForm.getLatestDateSearchVendor());

			ArrayList<Long> locationIDs = new ArrayList<Long>();
			filterValue = setStrLocationIDs(invoiceListForm.getLocationID(), locationIDs, user);
			ArrayList<Long> vendorIDs = new ArrayList<Long>();
			strVendorIDs = setStrVendorIDs(vendorID, vendorIDs, user);

		} else if (filterText.equalsIgnoreCase("unpaidInvoice")) {
			long localeid = invoiceListForm.getLocaleID();
			long locationid = invoiceListForm.getLocationID();
			earliestDateSearch = parseDate(invoiceListForm.getEarliestDateSearchInvoice());
			latestDateSearch = parseDate(invoiceListForm.getLatestDateSearchInvoice());

			ArrayList<Long> locationIDs = new ArrayList<Long>();
			if (locationid != 0) { // for only one location
				filterValue = setStrLocationIDs(invoiceListForm.getLocationID(), locationIDs, user);
			} else {
				if (localeid == 0) { // for all locations that belong to the
					// user.
					filterValue = setStrLocationIDs(invoiceListForm.getLocationID(), locationIDs, user);
				} else { // for all locations that belong to the locale selected
					UserManagerBean uMgr = new UserManagerBean();
					String[] userLocations = uMgr.getUserLocationIds(user.getId(), (int) localeid);

					int locationOrderNumber = 1;
					String strLocations = "(";
					for (int j = 0; j < userLocations.length; j++) {
						strLocations = strLocations + userLocations[j];
						if (locationOrderNumber == userLocations.length) {
							strLocations = strLocations + ")";
						} else {
							strLocations = strLocations + ",";
							locationOrderNumber++;
						}
					}
					filterValue = strLocations;
				}
			}

		} else if (filterText.equalsIgnoreCase("checkNumber")) {
			// int checkNumber =
			// Integer.parseInt(invoiceListForm.getSearchCheckNumber());

			// code added by Bhavesh for search by invoice check number
			int checkNumber = "".equals(invoiceListForm.getSearchCheckNumber()) ? 0 : Integer.parseInt(invoiceListForm.getSearchCheckNumber());
			// finished
			ArrayList<Long> locationIDs = new ArrayList<Long>();
			ArrayList<Long> localeIDs = new ArrayList<Long>();
			filterValue = setStrLocationIDs(invoiceListForm.getLocationID(), locationIDs, user);
			ApMasterDAO apMasterDao = new ApMasterDAO(user);
			ArrayList<ApMasterDTO> checks = new ArrayList<ApMasterDTO>();
			checks = apMasterDao.getApMaster(locationIDs, localeIDs, checkNumber);

			strApMasterID = "(";
			int size = 1;
			for (ApMasterDTO check : checks) {
				apMasterIDs.add(check.getMasterID());
				strApMasterID = strApMasterID + check.getMasterID();
				if (size == checks.size()) {
					strApMasterID = strApMasterID + ")";
				} else {
					strApMasterID = strApMasterID + ",";
					size++;
				}
			}
		} /*
		 * else if (filterText.equalsIgnoreCase("paid") ||
		 * filterText.equalsIgnoreCase("notPaid")) {
		 * 
		 * //ArrayList <Long> locationIDs = new ArrayList <Long>();
		 * //filterValue = setStrLocationIDs(invoiceListForm.getLocationID(),
		 * locationIDs, user); earliestDateSearch =
		 * parseDate(invoiceListForm.getEarliestDateSearchVendor());
		 * latestDateSearch =
		 * parseDate(invoiceListForm.getLatestDateSearchVendor()); ArrayList
		 * <Long> locationIDs = new ArrayList <Long>(); filterValue =
		 * setStrLocationIDs(invoiceListForm.getLocationID(), locationIDs,
		 * user); ArrayList <Long> vendorIDs = new ArrayList <Long>();
		 * strVendorIDs = setStrVendorIDs ( invoiceListForm.getVendorID(),
		 * vendorIDs, user ); }
		 */
		else if (filterText.equalsIgnoreCase("Status")) {

			long locationid = invoiceListForm.getLocationID();
			int vendorID = invoiceListForm.getVendorID();
			earliestDateSearch = parseDate(invoiceListForm.getEarliestDateSearchVendor());
			latestDateSearch = parseDate(invoiceListForm.getLatestDateSearchVendor());

			ArrayList<Long> locationIDs = new ArrayList<Long>();
			filterValue = setStrLocationIDs(invoiceListForm.getLocationID(), locationIDs, user);
			ArrayList<Long> vendorIDs = new ArrayList<Long>();
			strVendorIDs = setStrVendorIDs(vendorID, vendorIDs, user);

		}

		ArrayList<InvoiceDTO> invoices = new ArrayList<InvoiceDTO>();

		long localeID = 0;
		// ArrayList<Long> locationIDs = new ArrayList<Long>();
		String strLocationID = "";
		try {
			// long userID = -1;
			// userID = user.getId();
			// ArrayList <LocationDTO> locationList =
			// locationDAO.getLocationsByAccountant(user.getCompanyID(),
			// userID);
			//			
			//
			// for (LocationDTO location: locationList){
			// locationIDs.add(location.getLocationID());
			// }

			UserManagerBean uMgr = new UserManagerBean();
			String[] stringLocationIDs = uMgr.getUserLocationIds(user.getId());
			strLocationID = StringUtils.join(stringLocationIDs, ',');
			/*
			 * for (int i = 0; i < stringLocationIDs.length; i++) {
			 * locationIDs.add(Long.parseLong(stringLocationIDs[i])); }
			 */

		} catch (Exception e) {
			logger.debug(e.getMessage(), e);
		}
		int pageNumber = 1;
		if (request.getParameter("d-1337519-p") != null && request.getParameter("submitButton") == null) {
			pageNumber = NumberUtils.toInt(request.getParameter("d-1337519-p"), 1);
			//if(request.getParameter("allChecked")!=null && request.getParameter("allChecked")=="all")
			
			System.out.println("Page Number :: " + pageNumber );
		}
		// if (invoiceListForm.getListType().compareToIgnoreCase("list")== 0 &&
		// filterText.equalsIgnoreCase("checkNumber")) {
		//		
		// } else
		if (invoiceListForm.getListType().compareToIgnoreCase("list") == 0 || invoiceListForm.getListType().compareToIgnoreCase("approved") == 0
				|| invoiceListForm.getListType().compareToIgnoreCase("search") == 0 || invoiceListForm.getListType() == null) {

			// if search by vendorCode we need to change from vendorcode to
			// vendorid
			if (filterText.compareToIgnoreCase("vendorCode") == 0) {
				ArrayList<ApVendorDTO> vendors = vendorDao.getApVendorByCode(false, filterValue);
				filterText = "vendorID";
				filterValue = Long.toString(vendors.get(0).getVendorID());
			}
			if (invoiceListForm.getListType().compareToIgnoreCase("approved") == 0) {
				invSelectType = InvoiceDTO.INVOICE_APPROVE;
			}
			invoices = invoiceDao.getFilterInvoices(filterText, filterValue, filterValueDate, orderBy, roles, strApMasterID, strVendorIDs,
					earliestDateSearch, latestDateSearch, invSelectType, pageNumber, strLocationID);
			invoiceListForm.setResultSize(invoiceDao.getTotalRows());
		} else {
			String status = "";
			Date fromDueDate = null;
			Date toDueDate = null;
			if (invoiceListForm.getListType().compareToIgnoreCase("saved") == 0) {
				status = "'" + InvoiceDTO.INVOICE_CREATE + "'";
			} else if (invoiceListForm.getListType().compareToIgnoreCase("submitted") == 0
					|| invoiceListForm.getListType().compareToIgnoreCase("deny") == 0) {
				status = "'" + InvoiceDTO.INVOICE_SUBMIT + "'";
			} else {
				// status = "'"+InvoiceDTO.INVOICE_DENY + "' , '" +
				// InvoiceDTO.INVOICE_DELETE + "' , '" +
				// InvoiceDTO.INVOICE_VOID+"'";
				status = "'" + InvoiceDTO.INVOICE_DENY + "'";
			}

			if (invoiceListForm.getEarliestDateSearchInvoice() != null && invoiceListForm.getLatestDateSearchInvoice() != null) {
				try {
					fromDueDate = FormatDate.convertToSQLDate(invoiceListForm.getEarliestDateSearchInvoice());
					toDueDate = FormatDate.convertToSQLDate(invoiceListForm.getLatestDateSearchInvoice());
				} catch (Exception e) {
					logger.debug(e.getMessage(), e);
				}
			}

			// code Added by Bhavesh for Ticket #5584 Submit Invoice change
			// location
			if (invoiceListForm.getLocationID() > 0) {

				invoices = invoiceDao.getInvoicesByStatus(status, fromDueDate, toDueDate, Long.toString(invoiceListForm.getLocationID()), pageNumber);
				invoiceListForm.setResultSize(invoiceDao.getTotalRows());
			} else {
				UserManagerBean uMgr = new UserManagerBean();
				String[] stringLocationIDs = uMgr.getUserLocationIds(user.getId());
				String strLocations = StringUtils.join(stringLocationIDs, ',');
				invoices = invoiceDao.getInvoicesByStatus(status, fromDueDate, toDueDate, strLocations, pageNumber);
				invoiceListForm.setResultSize(invoiceDao.getTotalRows());
			}
			// invoices = invoiceDao.getInvoicesByStatus(status);
		}

		ArrayList<InvoiceListBean> beanList = new ArrayList<InvoiceListBean>();
		// ArrayList<ApVendorDTO> vendors = vendorDao.getApVendor(true);
		ArrayList<ApVendorDTO> vendors = vendorDao.getVendorsForUser(true, user);

		ArrayList<LocationDTO> locations = new ArrayList<LocationDTO>();
		try {
			locations = locationDao.getLocations(user.getCompanyID(), false);
		} catch (Exception e) {
			logger.debug(e.getMessage(), e);
			errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.exception", e.getMessage()));
			saveMessages(request, errors);
		}

		ArrayList<LocaleDTO> locales = new ArrayList<LocaleDTO>();
		try {
			locales = localeDao.getLocales(false, user.getCompanyID());
		} catch (Exception e) {
			logger.debug(e.getMessage(), e);
			errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.exception", e.getMessage()));
			saveMessages(request, errors);
		}

		for (InvoiceDTO invoice : invoices) {
			// boolean canOperate = false;
			/*
			 * for (Long ID : locationIDs) { if (ID == invoice.getLocationID())
			 * { canOperate = true; } }
			 */

			if (invoice.getInvoiceStatus().equalsIgnoreCase(InvoiceDTO.INVOICE_SUBMIT)
					|| invoice.getInvoiceStatus().equalsIgnoreCase(InvoiceDTO.INVOICE_APPROVE)
					|| invoice.getInvoiceStatus().equalsIgnoreCase(InvoiceDTO.INVOICE_PRINT)) {
				invoice.setSubmitInvoice(true);
			} else {
				invoice.setSubmitInvoice(false);
			}

			if (invoice.getInvoiceStatus().equalsIgnoreCase(InvoiceDTO.INVOICE_SUBMIT)) {
				invoice.setApproveInvoice(true);
			} else {
				invoice.setApproveInvoice(false);
			}

			if (invoice.getInvoiceStatus().equalsIgnoreCase(InvoiceDTO.INVOICE_DELETE)) {
				invoice.setDeleteInvoice(true);
			} else {
				invoice.setDeleteInvoice(false);
			}

			if (invoice.getInvoiceStatus().equalsIgnoreCase(InvoiceDTO.INVOICE_APPROVE)) {
				invoice.setPrintInvoice(true);
			} else {
				invoice.setPrintInvoice(false);
			}

			// if (canOperate) {

			InvoiceListBean bean = new InvoiceListBean();

			// bean.setAmtOfInvoice(invoice.getAmountOfInvoice() -
			// invoice.getDiscountAmount());
			bean.setAmtOfInvoice(invoice.getAmountOfInvoice() - calculateDiscountAmount(invoice));
			invoiceTotalAmount += invoice.getAmountOfInvoice();
			bean.setInvoiceID(invoice.getInvoiceID());
			bean.setInvoiceNum(invoice.getInvoiceNumber());
			bean.setInvoicePaid(invoice.isInvoicePaid());
			bean.setInvoiceDueDate(FormatDate.convertDateToMM_DD_YYYY(invoice.getInvoiceDueDate()));
			bean.setDiscountDueDate(FormatDate.convertDateToMM_DD_YYYY(invoice.getDiscountDueDate()));
			bean.setCheckCreated(invoice.isCheckCreated());

			for (ApVendorDTO vendor : vendors) {
				if (vendor.getVendorID() == invoice.getVendorID()) {
					bean.setVendorCode(vendor.getDefaultAcct());
					bean.setVendorName(vendor.getName());
					break;
				}
			}

			for (LocationDTO location : locations) {
				if (location.getLocationID() == invoice.getLocationID()) {
					bean.setLocationName(location.getName());
					localeID = location.getLocaleID();
					break;
				}
			}

			for (LocaleDTO locale : locales) {
				if (locale.getLocaleID() == localeID) {
					bean.setLocaleName(locale.getName());
					break;
				}
			}

			bean.setSubmitInvoice(invoice.isSubmitInvoice());
			bean.setApproveInvoice(invoice.isApproveInvoice());
			bean.setDeleteInvoice(invoice.isDeleteInvoice());
			bean.setPrintInvoice(invoice.isPrintInvoice());

			if (invoice.getInvoiceStatus().equalsIgnoreCase(InvoiceDTO.INVOICE_CREATE)) {
				bean.setInvoiceStatus("Created");
			} else if (invoice.getInvoiceStatus().equalsIgnoreCase(InvoiceDTO.INVOICE_SUBMIT)) {
				bean.setInvoiceStatus("Submitted");
			} else if (invoice.getInvoiceStatus().equalsIgnoreCase(InvoiceDTO.INVOICE_APPROVE)) {
				bean.setInvoiceStatus("Approved");
			} else if (invoice.getInvoiceStatus().equalsIgnoreCase(InvoiceDTO.INVOICE_VOID)) {
				bean.setInvoiceStatus("Void");
			} else if (invoice.getInvoiceStatus().equalsIgnoreCase(InvoiceDTO.INVOICE_PRINT)) {
				bean.setInvoiceStatus("Printed");
			} else if (invoice.getInvoiceStatus().compareTo(InvoiceDTO.INVOICE_DENY) == 0) {
				bean.setInvoiceStatus("Denied");
			} else if (invoice.getInvoiceStatus().compareTo(InvoiceDTO.INVOICE_DELETE) == 0) {
				bean.setInvoiceStatus("Deleted");
			}

			// try to get checknumber and paid-date for invoice if it is
			// paid.
			if (invoice.getInvoiceStatus().equalsIgnoreCase(InvoiceDTO.INVOICE_PRINT) || (invoice.getApMasterID() > 0)) {
				ApMasterDAO apDao = new ApMasterDAO(user);
				ApMasterDTO checkDTO = apDao.getApMaster(invoice.getApMasterID());
				if (checkDTO == null) {
					bean.setCheckNumber("");
					bean.setInvoicePaidDate("");
				} else {
					bean.setCheckNumber(String.valueOf(checkDTO.getCheckNumber()));
					bean.setInvoicePaidDate(FormatDate.convertDateToMM_DD_YYYY(checkDTO.getCheckDate()));
				}
			} else {
				bean.setCheckNumber("");
				bean.setInvoicePaidDate("");
			}

			// if
			// (invoice.getInvoiceStatus().compareTo(InvoiceDTO.INVOICE_DELETE)
			// != 0) {
			// Do some test to see if we should save the invoice or toss it.
			if (invoiceListForm.getListType().compareToIgnoreCase("saved") == 0
					&& invoice.getInvoiceStatus().equalsIgnoreCase(InvoiceDTO.INVOICE_CREATE)) {
				beanList.add(bean);
			} else if (invoiceListForm.getListType().compareToIgnoreCase("submitted") == 0
					&& invoice.getInvoiceStatus().equalsIgnoreCase(InvoiceDTO.INVOICE_SUBMIT)) {
				beanList.add(bean);
			} else if (invoiceListForm.getListType().compareToIgnoreCase("approved") == 0
					&& invoice.getInvoiceStatus().equalsIgnoreCase(InvoiceDTO.INVOICE_APPROVE) && invoice.getApMasterID() == 0) {
				beanList.add(bean);
			} else if (invoiceListForm.getListType().compareTo("denied") == 0
					&& (invoice.getInvoiceStatus().compareTo(InvoiceDTO.INVOICE_DENY) == 0
							|| invoice.getInvoiceStatus().compareTo(InvoiceDTO.INVOICE_DELETE) == 0 || invoice.getInvoiceStatus().compareTo(
							InvoiceDTO.INVOICE_VOID) == 0)) {
				beanList.add(bean);
			} else if (invoiceListForm.getListType().compareToIgnoreCase("list") == 0) {
				beanList.add(bean);
			} else if (invoiceListForm.getListType().compareToIgnoreCase("search") == 0) {
				beanList.add(bean);
			} else if (invoiceListForm.getListType().compareToIgnoreCase("deny") == 0) {
				beanList.add(bean);
			} else {
				// Set the bean to null because we don't need it
				bean = null;
			}
			// }
			// }

		}
		invoiceListForm.setInvoiceTotalAmount(invoiceTotalAmount);
		// invoiceListForm.setResultSize(invoiceListForm.getResultSize()-beanList.size());
		return (beanList);
	}

	private long getCheckNumber(int locationID, DbUserSession user) {
		long checkNumber = 0;
		DatabaseTransaction t = null;
		try {
			t = (com.aldorsolutions.webfdms.database.DatabaseTransaction) DatabaseTransaction.getTransaction(user);
		} catch (PersistenceException e) {
			System.out.println("ExportReport PersistenceException:" + e.getMessage());
		}

		DbLocation arec = null;
		try {
			arec = FdmsDb.getInstance().getLocation(t, locationID);
			checkNumber = (arec != null) ? arec.getNextCheckNumber() : 0;
		} catch (Exception e) {
			logger.error("Error : ", e);
		} finally {
			if (t != null) {
				t.closeConnection();
				t = null;
			}
		}
		return checkNumber;
	}

	private long getLocaleID(int locationID, DbUserSession user) {
		long localeID = 0;
		DatabaseTransaction t = null;
		try {
			t = (com.aldorsolutions.webfdms.database.DatabaseTransaction) DatabaseTransaction.getTransaction(user);
		} catch (PersistenceException e) {
			System.out.println("ExportReport PersistenceException:" + e.getMessage());
		}

		DbLocation arec = null;
		try {
			arec = FdmsDb.getInstance().getLocation(t, locationID);
		//	localeID = (arec != null) ? arec.getNextCheckNumber() : 0;
			localeID = (arec != null) ? arec.getLocaleNumber() : 0;
		} catch (Exception e) {
			logger.error("Error : ", e);
		} finally {
			if (t != null) {
				t.closeConnection();
				t = null;
			}
		}
		return localeID;
	}

	private ArrayList<LocationDTO> setLocations(DbUserSession user, InvoiceListForm invoiceListForm, HttpServletRequest request) {
		HttpSession session = request.getSession();
		LocationDAO locationDAO = new LocationDAO(user);
		UserDAO userDao = new UserDAO();
		ArrayList<UserLocationDTO> userLocations = userDao.getUserLocations(user.getId());
		ArrayList<LocationDTO> locations = new ArrayList<LocationDTO>();
		try {
			ArrayList<LocationDTO> allLocations = locationDAO.getLocations(user.getCompanyID(), true);

			for (LocationDTO location : allLocations) {
				for (UserLocationDTO userLocation : userLocations) {
					if (userLocation.getLocationId() == location.getLocationID()) {
						locations.add(location);
						break;
					}
				}
			}
		} catch (Exception e) {
			logger.error("Error : ", e);
		}

		if (locations.size() == 1) {
			invoiceListForm.setLocationID(((LocationDTO) locations.get(0)).getLocationID());
		}
		// end getting locations

		session.setAttribute("locationListAll", locations);

		return locations;
	}

	public void setHashmapCheck(TreeMap<String, InvoiceDTO> checkMap, InvoiceDTO invoice, DbUserSession user) {

		InvoiceDTO anInvoice = null;
		String key = "";

		ApVendorDAO apVendorDao = new ApVendorDAO(user);
		ApVendorDTO aVendor = new ApVendorDTO();
		aVendor = apVendorDao.getApVendor(invoice.getVendorID());

		key = aVendor.getName() + ":" + aVendor.getVendorCode() + ":" + aVendor.getVendorID();
		if (checkMap.containsKey(String.valueOf(key))) {
			anInvoice = (InvoiceDTO) checkMap.get(key);
			anInvoice.setAmountOfInvoice(anInvoice.getAmountOfInvoice() + invoice.getAmountOfInvoice());

			// anInvoice.setDiscountAmount(anInvoice.getDiscountAmount()+invoice.getDiscountAmount());

			anInvoice.setDiscountAmount(anInvoice.getDiscountAmount() + calculateDiscountAmount(invoice));

		} else {
			anInvoice = new InvoiceDTO();
			anInvoice = initInvoice(invoice);
			checkMap.put(key, anInvoice);
		}
	}

	public double calculateDiscountAmount(InvoiceDTO invoice) {
		double discountAmount = 0.0;
		java.util.Date currDate = null;

		if (invoice.isDiscountFlag()) {
			Date discDate = invoice.getDiscountDueDate();

			currDate = DateUtility.getCurrentDateUtil();
			currDate = FormatDate.addToDate(currDate, -1, 0);
			// If so the current date has to be before the discount date for the
			// discount to apply
			if (discDate != null && (currDate.before(discDate))) {
				// Set the discount date
				discountAmount = invoice.getDiscountAmount();
			}
		}

		return discountAmount;
	}

	public void setHashmapInvoice(TreeMap<String, ArrayList<String>> invoiceMap, InvoiceDTO invoice) {

		ArrayList<String> data = null;
		if (invoiceMap.containsKey(String.valueOf(invoice.getVendorID()))) {
			data = invoiceMap.get(String.valueOf(invoice.getVendorID()));
			data.add(String.valueOf(invoice.getInvoiceID()));
		} else {
			data = new ArrayList<String>();
			data.add(String.valueOf(invoice.getInvoiceID()));
			invoiceMap.put(String.valueOf(invoice.getVendorID()), data);
		}
	}

	public String setStrLocationIDs(long locationid, ArrayList<Long> locationIDs, DbUserSession user) {
		// String strLocationIDs = "";

		String strLocations = "(";
		int locationOrderNumber = 1;
		if (locationid == 0) { // search to all location that belong to a user
			// UserDAO userDao = new UserDAO();
			// ArrayList <UserLocationDTO> userLocations =
			// userDao.getUserLocations(user.getId());
			UserManagerBean uMgr = new UserManagerBean();
			ArrayList<UserLocationDTO> userLocations = uMgr.getLocationsOfUser(user.getDbLookup(), (int) user.getId(), user.getCompanyID(), user
					.getRegion());
			for (UserLocationDTO userLocation : userLocations) {
				locationIDs.add(userLocation.getLocationId());
				strLocations = strLocations + userLocation.getLocationId();
				if (locationOrderNumber == userLocations.size()) {
					strLocations = strLocations + ")";
				} else {
					strLocations = strLocations + ",";
					locationOrderNumber++;
				}
			}
		} else { // search only the specific location
			locationIDs.add(locationid);
			strLocations = strLocations + locationid + ")";
		}

		return strLocations;
	}

	public String setStrVendorIDs(long vendorID, ArrayList<Long> vedorIDs, DbUserSession user) {
		// String strVendorIDs = "";

		String strVendorIDs = "(";
		int vendorOrderNumber = 1;
		if (vendorID == 0) { // search to all location that belong to a user

			ApVendorLocationDAO apVendorLocationDao = new ApVendorLocationDAO(user);
			UserManagerBean uMgr = new UserManagerBean();
			// String [] stringLocationIDs =
			// uMgr.getUserLocationIds(user.getId());
			ArrayList<UserLocationDTO> userLocations = uMgr.getLocationsOfUser(user.getDbLookup(), (int) user.getId(), user.getCompanyID(), user
					.getRegion());
			ArrayList<Long> locationIDs = new ArrayList<Long>();
			// for(int i=0;i<stringLocationIDs.length;i++){
			// locationIDs.add( Long.parseLong(stringLocationIDs[i]));
			// }
			for (UserLocationDTO userLocation : userLocations) {
				locationIDs.add(userLocation.getLocationId());
			}
			ArrayList<ApVendorLocationDTO> apVendorLocationList = apVendorLocationDao.getApVendorLocationByLocationIDs(locationIDs);
			ArrayList<Long> vendorIDs = new ArrayList<Long>();
			for (ApVendorLocationDTO apVendorLocation : apVendorLocationList) {
				vendorIDs.add(apVendorLocation.getVendorID());
				strVendorIDs = strVendorIDs + apVendorLocation.getVendorID();
				if (vendorOrderNumber == apVendorLocationList.size()) {
					strVendorIDs = strVendorIDs + ")";
				} else {
					strVendorIDs = strVendorIDs + ",";
					vendorOrderNumber++;
				}

			}
		} else { // search only the specific location
			vedorIDs.add(vendorID);
			strVendorIDs = strVendorIDs + vendorID + ")";
		}

		return strVendorIDs;
	}

	public InvoiceDTO initInvoice(InvoiceDTO invoice) {

		InvoiceDTO anInvoice = new InvoiceDTO();

		anInvoice.setInvoiceID(invoice.getInvoiceID());
		anInvoice.setVendorID(invoice.getVendorID());
		anInvoice.setInvoiceNumber(invoice.getInvoiceNumber());
		anInvoice.setInvoiceDate(invoice.getInvoiceDate());
		anInvoice.setInvoiceDueDate(invoice.getInvoiceDueDate());
		anInvoice.setInvoicePaid(invoice.isInvoicePaid());
		anInvoice.setGlcategory(invoice.getGlcategory());
		anInvoice.setAmountOfInvoice(invoice.getAmountOfInvoice());
		anInvoice.setDescription(invoice.getDescription());
		anInvoice.setInvoice1099Type(invoice.getInvoice1099Type());
		anInvoice.setDiscountFlag(invoice.isDiscountFlag());
		anInvoice.setInvoice1099Amount(invoice.getInvoice1099Amount());
		anInvoice.setDiscountAmount(calculateDiscountAmount(invoice));
		anInvoice.setDiscountSubjectAmount(invoice.getDiscountSubjectAmount());
		anInvoice.setDiscountPercent(invoice.getDiscountPercent());
		anInvoice.setDiscountDollars(invoice.getDiscountDollars());
		anInvoice.setDiscountDue(invoice.getDiscountDue());
		anInvoice.setDiscountDueFreq(invoice.getDiscountDueFreq());
		anInvoice.setRecurringFlag(invoice.isRecurringFlag());
		anInvoice.setRecurringCount(invoice.getRecurringCount());
		anInvoice.setRecurringFreq(invoice.getRecurringFreq());
		anInvoice.setRecurringFreqCode(invoice.getRecurringFreqCode());
		anInvoice.setCheckingAccount(invoice.getCheckingAccount());
		anInvoice.setCheckingStatus(invoice.getCheckingStatus());
		anInvoice.setLocationID(invoice.getLocationID());
		anInvoice.setCheckCreated(invoice.isCheckCreated());
		anInvoice.setNetInvoice(invoice.getNetInvoice());
		anInvoice.setInvoiceStatus(invoice.getInvoiceStatus());
		anInvoice.setSubmitInvoice(invoice.isSubmitInvoice());
		anInvoice.setApproveInvoice(invoice.isApproveInvoice());
		anInvoice.setDeleteInvoice(invoice.isDeleteInvoice());
		anInvoice.setUpdateInvoice(invoice.isUpdateInvoice());
		anInvoice.setPrintInvoice(invoice.isPrintInvoice());
		anInvoice.setCheckNumber(invoice.getCheckNumber());

		return anInvoice;
	}

}