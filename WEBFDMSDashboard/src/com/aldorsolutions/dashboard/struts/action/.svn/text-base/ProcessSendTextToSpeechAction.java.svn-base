/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.aldorsolutions.dashboard.struts.action;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.HttpException;
import org.apache.commons.httpclient.methods.PostMethod;
import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import com.aldorsolutions.dashboard.struts.form.SendTextToSpeechForm;
import com.aldorsolutions.webfdms.beans.DbUserSession;
import com.aldorsolutions.webfdms.util.SessionValueKeys;

/**
 * MyEclipse Struts Creation date: 04-30-2007
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/userEdit" name="userEditForm"
 *                input="/user/userEdit.jsp" scope="request"
 *                validate="true"
 */
public class ProcessSendTextToSpeechAction extends Action {
	Logger logger = Logger.getLogger(ProcessSendTextToSpeechAction.class);
	private static String ENDPOINT = "https://www.callfire.com/cloud/1/callfirexml/campaign";
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		SendTextToSpeechForm myForm = (SendTextToSpeechForm) form;
		ActionErrors errors = new ActionErrors();

        HttpSession session =  request.getSession();
        DbUserSession user = (DbUserSession) session.getAttribute(SessionValueKeys.DB_USER);
        
        try{
        	
        	String responseText = callMethod(myForm);
        	
        }catch (Exception e){
        	errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.exception", e.getMessage()) );
			saveMessages(request, errors);
        }
        
		return (mapping.findForward("success"));
	}

	private String callMethod(SendTextToSpeechForm myForm) {
			
		String request = ENDPOINT;
		HttpClient client = new HttpClient();
		PostMethod method = new PostMethod(request);
		
		 // Add POST parameters
		method.addParameter("callfireXml","<dialplan name=\"Root\"><play name=\"play\" type=\"tts\" voice=\"female1\">"+myForm.getMessage()+"</play></dialplan>");
		method.addParameter("inboundPhoneNumber","9723384155");
		method.addParameter("outboundCallerid","8662300800");
//		method.addParameter("isInbound","true");
		  method.addParameter("isInbound","false");
		  method.addParameter("isOutbound","true");
		method.addParameter("campaignName","HelloWorld");
		String key = "d8b7227f26bbdf34fa40498f7aac2e5a1f880320";
		method.addParameter("apikey",key);
		
		 // Send POST request
		int statusCode = 0;
	    try {
			 statusCode = client.executeMethod(method);
		} catch (HttpException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	    InputStream rstream = null;

	    
	    // Get the response body
	    StringBuffer sBuffer = new StringBuffer();
	    try {

//			rstream = method.getResponseBodyAsStream();
//			BufferedReader res = new BufferedReader(new InputStreamReader(rstream, "UTF-8"));
//			String inputLine;
//			while ((inputLine = res.readLine()) != null){
//				sBuffer.append(inputLine);
//			}
//			res.close();
			
			DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
            Document doc = docBuilder.parse (method.getResponseBodyAsStream());
            doc.getDocumentElement ().normalize ();
            NodeList listOfCampaign = doc.getElementsByTagName("campaignResponse");
//            int totalCampaigns = listOfCampaign.getLength();
            String descriptionValue = "";
            String successfulValue = "";
            String campaignIdValue = "";
            for(int s=0; s<listOfCampaign.getLength() ; s++){
            	Node firstCampaignNode = listOfCampaign.item(s);
            	if(firstCampaignNode.getNodeType() == Node.ELEMENT_NODE){
            		Element firstCampaignElement = (Element)firstCampaignNode;
            		
            		NodeList descriptionList = firstCampaignElement.getElementsByTagName("description");
            		Element descriptionElement = (Element)descriptionList.item(0);
            		NodeList textDescriptionList = descriptionElement.getChildNodes();
            		descriptionValue = ((Node)textDescriptionList.item(0)).getNodeValue().trim();
            		
            		NodeList successfulList = firstCampaignElement.getElementsByTagName("successful");
                    Element successfulElement = (Element)successfulList.item(0);
                    NodeList textSuccessfulList = successfulElement.getChildNodes();
                    successfulValue = ((Node)textSuccessfulList.item(0)).getNodeValue().trim();
                    
                    NodeList campaignIdList = firstCampaignElement.getElementsByTagName("campaignid");
                    Element campaignIdElement = (Element)campaignIdList.item(0);
                    NodeList textCampaignIdList = campaignIdElement.getChildNodes();
                    campaignIdValue = ((Node)textCampaignIdList.item(0)).getNodeValue().trim();
                    
            	}
            }
            sendCall(campaignIdValue,myForm);

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} 
		catch (ParserConfigurationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SAXException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} 
		return sBuffer.toString();
	}

	private void sendCall(String campaignIdValue, SendTextToSpeechForm myForm) {
		String request = "https://www.callfire.com/cloud/1/campaign/"+campaignIdValue+"/call";
		HttpClient client = new HttpClient();
		PostMethod method = new PostMethod(request);
		
		 // Add POST parameters
		String key = "d8b7227f26bbdf34fa40498f7aac2e5a1f880320";
		method.addParameter("apikey",key);
		String numbers = myForm.getAreaCode()+myForm.getPhone();
		method.addParameter("numbers",numbers);
		int statusCode = 0;
	    try {
			 statusCode = client.executeMethod(method);
		} catch (HttpException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
	}

}