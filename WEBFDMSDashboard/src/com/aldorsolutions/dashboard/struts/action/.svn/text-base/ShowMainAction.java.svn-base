/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 * CJongs
 */
package com.aldorsolutions.dashboard.struts.action;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Locale;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionError;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;

import com.aldorassist.webfdms.delegate.CompanyOptionsManager;
import com.aldorassist.webfdms.model.CompanyOptionsDTO;
import com.aldorassist.webfdms.model.LocaleDTO;
import com.aldorsolutions.dashboard.struts.form.MainForm;
import com.aldorsolutions.dashboard.struts.form.acct.AcctLocationEditForm;
import com.aldorsolutions.webfdms.admin.user.bean.UserManagerBean;
import com.aldorsolutions.webfdms.admin.user.model.UserLocationDTO;
import com.aldorsolutions.webfdms.beans.DbLocation;
import com.aldorsolutions.webfdms.beans.DbUser;
import com.aldorsolutions.webfdms.beans.DbUserSession;
import com.aldorsolutions.webfdms.beans.FdmsDb;
import com.aldorsolutions.webfdms.beans.comparators.LocaleNameComparator;
import com.aldorsolutions.webfdms.beans.comparators.LocationNameComparator;
import com.aldorsolutions.webfdms.common.Constants;
import com.aldorsolutions.webfdms.database.DatabaseTransaction;
import com.aldorsolutions.webfdms.database.PersistenceException;
import com.aldorsolutions.webfdms.locale.bean.LocaleManagerBean;
import com.aldorsolutions.webfdms.util.FormatNumber;
import com.aldorsolutions.webfdms.util.SessionValueKeys;
import com.aldorsolutions.webfdms.util.UtilSingleton;

/** 
 * MyEclipse Struts
 * Creation date: 04-17-2007
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 * @struts.action-forward name="failed" path="/login.jsp"
 * @struts.action-forward name="success" path="/main.jsp"
 */
public class ShowMainAction extends Action {
	/*
	 * Generated Methods
	 */
	
	private Logger logger = Logger.getLogger(ShowMainAction.class.getName());

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		
		HttpSession session =  request.getSession();
        DbUserSession user = (DbUserSession) session.getAttribute(SessionValueKeys.DB_USER);
		MainForm mainForm = (MainForm) form;
		ActionMessages errors = new ActionMessages();
		
		String requestType = mainForm.getRequestType();
		if (requestType == null) {
			requestType = "";
		}
		
		if (requestType.compareToIgnoreCase("changeLocale") == 0) {
			changeLocale(mainForm, user, session, errors, request);
		}
		else if (requestType.compareToIgnoreCase("changeLocation") == 0) {
			changeLocation(mainForm, user);
		}
		else if (requestType.compareToIgnoreCase("changeSpecificLoc") == 0) {
//			user.setLocationId(FormatNumber.parseInteger(mainForm.getUserLocationId()));
//			user.setRegion(Integer.parseInt(mainForm.getUserLocaleId()));
			if (mainForm.getSpecificLocOpt().compareToIgnoreCase("Y")== 0) {
				session.setAttribute(SessionValueKeys.ISSPECIFICLOC, true);
			}else {
				session.setAttribute(SessionValueKeys.ISSPECIFICLOC, false);
			}
		}
		else {
				mainForm.setUserLocaleId(String.valueOf(user.getRegion()));
				mainForm.setUserLocationId(String.valueOf(user.getLocationId()));
				
				Boolean isSpecificLoc = (Boolean) session.getAttribute(SessionValueKeys.ISSPECIFICLOC);
				if (isSpecificLoc == null) {
					mainForm.setSpecificLocOpt("N");
					session.setAttribute(SessionValueKeys.ISSPECIFICLOC, false);
				}else {
					if (isSpecificLoc ) {
						mainForm.setSpecificLocOpt("Y");
					}
					else {
						mainForm.setSpecificLocOpt("N");
					}
				}
				
		}
		
		//session.setAttribute("ADMIN_LOCALES", userLocales);


		
		ReportsAction reportsAction = new ReportsAction();
        reportsAction.loadAllReports(session, user);
     
		return ( mapping.findForward("success") );
	}
	
	private void changeLocation(MainForm form, DbUserSession sessionUser) {
	
		logger.debug("Updating userDefaultLocation : " + form.getUserLocationId());
		sessionUser.setLocationId(FormatNumber.parseInteger(form.getUserLocationId()));

	}

	private void changeLocale(MainForm form, DbUserSession sessionUser, HttpSession session, ActionMessages errors, HttpServletRequest request) {

		ArrayList userLocales = (ArrayList) session.getAttribute(Constants.USER_LOCALES);

		if (userLocales != null) {

			DatabaseTransaction t = null;
			DatabaseTransaction trans = null;

			try {
				// Get a new database transaction.
				String jndiLookup = UtilSingleton.getInstance().getUserDBLookup();

				t = (DatabaseTransaction) DatabaseTransaction.getTransaction(sessionUser, jndiLookup);
				trans = (DatabaseTransaction) DatabaseTransaction.getTransaction(sessionUser);

				DbUser user = (DbUser) sessionUser;

				t.addPersistent(user);

				user.setRegion(Integer.parseInt(form.getUserLocaleId()));
				sessionUser.setRegion(Integer.parseInt(form.getUserLocaleId()));

				LocaleManagerBean lmb = new LocaleManagerBean(user);
				LocaleDTO locale = lmb.getLocale(user.getRegion());

    			Locale myLocale = new Locale("en", locale.getCountry());
    			session.setAttribute( Constants.INTERNATIONAL_LOCALE, myLocale );
    			

    			form.setUserLocationId("-1");
				
				String[] locationIds = (String[]) session.getAttribute(Constants.USER_LOCATION_IDS);
				DbLocation[] dbLocations = FdmsDb.getInstance().getLocationsForRegion(trans, user.getRegion());

				ArrayList <DbLocation> userLocaleLocs = new ArrayList <DbLocation>();

				if (dbLocations != null) {
					for (int i = 0; i < dbLocations.length; i++) {
						DbLocation loc = dbLocations[i];
						int locID = loc.getId();

						for (int x = 0; x < locationIds.length; x++) {
							int aLocID = Integer.parseInt(locationIds[x]);

							if (aLocID == locID) {
								userLocaleLocs.add(loc);
							}
						}

					}
				}
				
				
				session.setAttribute(Constants.USER_LOCATIONS, userLocaleLocs);
				form.setUserLocationId(String.valueOf(userLocaleLocs.get(0).getId()));
				t.save();

			} catch (PersistenceException ex) {
				errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.internal"));
	            saveErrors(request, errors);
				logger.error("Persistence Exception in ShowCaseList.doPerform. ", ex);
			} catch (Exception ex) {
				errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.internal"));
	            saveErrors(request, errors);
				logger.error("Exception in ShowCaseList.doPerform. ", ex);
			} finally {
				if (t != null) {
					t.closeConnection();
				}

				if (trans != null) {
					trans.closeConnection();
				}
			}

		} else {
			logger.debug("Unable to find USER_LOCALES in session");
		}

		changeLocation(form, sessionUser);
	}

	
}