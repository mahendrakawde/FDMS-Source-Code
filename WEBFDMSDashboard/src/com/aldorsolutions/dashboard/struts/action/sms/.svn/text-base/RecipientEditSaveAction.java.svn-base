/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.aldorsolutions.dashboard.struts.action.sms;

import java.util.ArrayList;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.apache.struts.action.ActionRedirect;

import com.aldorassist.webfdms.delegate.InvoiceManager;
import com.aldorsolutions.dashboard.struts.form.acct.VendorLocEditForm;
import com.aldorsolutions.dashboard.struts.form.sms.RecipientForm;
import com.aldorsolutions.webfdms.beans.DbApAccount;
import com.aldorsolutions.webfdms.beans.DbUserSession;
import com.aldorsolutions.webfdms.checkwriter.dao.ApVendorDAO;
import com.aldorsolutions.webfdms.checkwriter.dao.ApVendorLocationDAO;
import com.aldorsolutions.webfdms.checkwriter.model.ApVendorDTO;
import com.aldorsolutions.webfdms.checkwriter.model.ApVendorLocationDTO;
import com.aldorsolutions.webfdms.security.bean.SecurityManagerBean;
import com.aldorsolutions.webfdms.security.model.SecurityConfigDTO;
import com.aldorsolutions.webfdms.sms.SMSTTVRecipientDTO;
import com.aldorsolutions.webfdms.sms.dao.SMSTTVRecipientDAO;
import com.aldorsolutions.webfdms.util.FormatNumber;
import com.aldorsolutions.webfdms.util.SessionValueKeys;

/** 
 * MyEclipse Struts
 * Creation date: 06-28-2007
 * 
 * XDoclet definition:
 * @struts.action path="/vendorLocEdit" name="vendorLocEditForm" input="/acct/vendorLocEdit.jsp" scope="request" validate="true"
 */
public class RecipientEditSaveAction extends Action {
	/*
	 * Generated Methods
	 */
	private Logger logger = Logger.getLogger(RecipientEditSaveAction.class.getName());
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		RecipientForm recipientForm = (RecipientForm) form;
		ActionMessages errors = new ActionMessages();
		HttpSession session = request.getSession();
		DbUserSession user = (DbUserSession) session.getAttribute(SessionValueKeys.DB_USER);

        String type = recipientForm.getType();
		int id = Integer.valueOf(recipientForm.getId());

        if ("cancle".compareToIgnoreCase(recipientForm.getActionType())==0){
			//do nothing
        } else {
        	if (id>0){
            	
            	
            	if ((recipientForm.getFirstname().trim().length()>0)
        				&&	(recipientForm.getLastname().trim().length()>0)
        				&&	(recipientForm.getAreacode().trim().length()==3)
        				&&	(recipientForm.getPhone().trim().length()==7)){
            					SMSTTVRecipientDTO recipient = new SMSTTVRecipientDTO();
            					SMSTTVRecipientDAO recipientDao = new SMSTTVRecipientDAO(user);
        						recipient.setFirstname(recipientForm.getFirstname());
        						recipient.setLastname(recipientForm.getLastname());
        						recipient.setAreacode(recipientForm.getAreacode());
        						recipient.setPhone(recipientForm.getPhone());
        						recipient.setGreeting(recipientForm.getGreeting());
        						recipient.setType(type);
        						recipient.setId(id);
        						
        						try {
        							recipientDao.updateSMSTTVRecipient(recipient);
        						} catch (Exception e) {
        							// TODO Auto-generated catch block
        							e.printStackTrace();
        						}
        			}
            }else {
            	SMSTTVRecipientDTO defaultRecipient = new SMSTTVRecipientDTO();
                SecurityManagerBean smBean = new SecurityManagerBean();
                SecurityConfigDTO security = smBean.getSecurityConfig(user.getCompanyID());
                boolean success = false;
                
            	if ("sms".compareToIgnoreCase(type)==0){
            		security.setSmsFirstname(recipientForm.getFirstname());
            		security.setSmsLastname(recipientForm.getLastname());
            		security.setSmsAreaCode(recipientForm.getAreacode());
            		security.setSmsPhone(recipientForm.getPhone());
            		security.setSmsGreeting(recipientForm.getGreeting());
            		success = smBean.updateSecurityConfig(security, 0);
            	}else {
            		security.setTtvFirstname(recipientForm.getFirstname());
            		security.setTtvLastname(recipientForm.getLastname());
            		security.setTtvAreaCode(recipientForm.getAreacode());
            		security.setTtvPhone(recipientForm.getPhone());
            		security.setTtvGreeting(recipientForm.getGreeting());
            		success = smBean.updateSecurityConfig(security, 0);
            	}
            }       	
        }
        
        if ("ttv".equalsIgnoreCase(type)){
			return mapping.findForward("showSMSTTVRecipientEditForTTV");
		}else {
			return mapping.findForward("showSMSTTVRecipientEditForSMS");
		}
	}
	
}