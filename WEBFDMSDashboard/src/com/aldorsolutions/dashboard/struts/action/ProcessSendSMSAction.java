/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.aldorsolutions.dashboard.struts.action;

import java.util.ArrayList;
import java.util.GregorianCalendar;
import java.util.Timer;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;

import com.aldorassist.webfdms.model.SMSSchedulingDTO;
import com.aldorsolutions.dashboard.struts.form.SendSMSForm;
import com.aldorsolutions.webfdms.beans.DbUserSession;
import com.aldorsolutions.webfdms.beans.FdmsDb;
import com.aldorsolutions.webfdms.company.bean.CompanyManagerBean;
import com.aldorsolutions.webfdms.company.model.CompanyDTO;
import com.aldorsolutions.webfdms.reporting.SMSGenerator;
import com.aldorsolutions.webfdms.reporting.SMSSchedulerTask;
import com.aldorsolutions.webfdms.util.DAO;
import com.aldorsolutions.webfdms.util.SessionValueKeys;
import com.callfire.SMSService.ArrayOfString;
import com.callfire.SMSService.ObjectFactory;
import com.callfire.SMSService.SMSService;
import com.eclerisy.primemessage.common.PMConstant;
import com.eclerisy.primemessage.sdk.PrimeMessage;

/**
 * MyEclipse Struts Creation date: 04-30-2007
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/userEdit" name="userEditForm"
 *                input="/user/userEdit.jsp" scope="request"
 *                validate="true"
 */
public class ProcessSendSMSAction extends Action {
	Logger logger = Logger.getLogger(ProcessSendSMSAction.class);
	
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		SendSMSForm myForm = (SendSMSForm) form;
		ActionErrors errors = new ActionErrors();

        HttpSession session =  request.getSession();
        DbUserSession user = (DbUserSession) session.getAttribute(SessionValueKeys.DB_USER);
        
        try{
        	CompanyManagerBean cmBean = new CompanyManagerBean();
			CompanyDTO company = cmBean.getCompany(user.getCompanyID());
//        	SMSSchedulingDAO smsScheDAo = new SMSSchedulingDAO(company.getDbLookup());
			
//			ArrayList <SMSSchedulingDTO> smsScheList = null;
			//if(intial){
				GregorianCalendar cal = new GregorianCalendar();
//				smsScheList = smsScheDAo.getSMSSchedulingQ();

//				SMSSchedulingDAO smsScheDAo = new SMSSchedulingDAO(DAO.DB_FDMSCOMMON);
//				smsScheList = smsScheDAo.getSMSSchedulingCommonQ();
				
//				smsScheList = FdmsDb.getInstance().getSMSList();
//				int a = 1;
			//this is for callfire (www.callfire.com).	
				SMSService service = new SMSService();
				ArrayOfString numbers = new ObjectFactory().createArrayOfString();
				//numbers.getString().add("9405942322,HI Chai!");
				numbers.getString().add(myForm.getAreaCode()+myForm.getPhone()+","+myForm.getMessage());
				String key = "d8b7227f26bbdf34fa40498f7aac2e5a1f880320";
				long compaignid = service.getSMSServiceHttpPort().sendSMSCampaign(key, numbers, "hi");
				
			//end callfire
//			if (smsScheList.size() > 0) {
//				for (SMSSchedulingDTO smsScheduling: smsScheList) {
//					
//					if (smsScheduling.getStatus().compareToIgnoreCase("Q") == 0 || smsScheduling.getStatus().compareToIgnoreCase("R") == 0) {
//
//						Timer timerTask = new Timer(true);
//						logger.info(Thread.currentThread().getId() + " SMSSchedulerTask.scheduleJobs() company : " + company.getName() + " start running ScheduleId : " + smsScheduling.getSchedulingID());
//						timerTask.schedule(new SMSGenerator(company,smsScheduling.getSchedulingID()), 10);
//					}
//				}
//			}
        	
        	
        }catch (Exception e){
        	errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.exception", e.getMessage()) );
			saveMessages(request, errors);
        }
        
		return (mapping.findForward("success"));
	}


}