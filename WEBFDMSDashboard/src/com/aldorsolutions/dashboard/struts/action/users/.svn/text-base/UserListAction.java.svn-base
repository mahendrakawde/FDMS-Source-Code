/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.aldorsolutions.dashboard.struts.action.users;

import java.util.ArrayList;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.aldorsolutions.dashboard.struts.form.users.UserListingForm;
import com.aldorsolutions.webfdms.admin.user.dao.UserDAO;
import com.aldorsolutions.webfdms.admin.user.model.UserDTO;
import com.aldorsolutions.webfdms.beans.DbUserSession;
import com.aldorsolutions.webfdms.util.FormatCurrency;
import com.aldorsolutions.webfdms.util.SessionValueKeys;

/** 
 * MyEclipse Struts
 * Creation date: 04-27-2007
 * 
 * XDoclet definition:
 * @struts.action path="/userList" name="userListForm"
 *                input="/user/userList.jsp" scope="request"
 *                validate="true"
 */
public class UserListAction extends Action {
	
	Logger logger = Logger.getLogger(UserListAction.class);
	
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {

        HttpSession session =  request.getSession();

        DbUserSession user = (DbUserSession) session.getAttribute(SessionValueKeys.DB_USER);
        
        try {
    		ArrayList <UserListingForm> showUsers = new ArrayList <UserListingForm> ();
    		
    		UserDAO userDao = new UserDAO();
    		
    		ArrayList <UserDTO> userList = userDao.getUsers (UserDAO.ACTIVE, user.getCompanyID());

			for ( UserDTO aUser : userList ) {
				UserListingForm userForm = new UserListingForm();
				
				userForm.setEmailAddress(aUser.getEmail());
				userForm.setExtLimit(FormatCurrency.toCurrency(aUser.getLimitExternalVendor()));
				userForm.setFirstName(aUser.getFirstName());
				userForm.setIntLimit(FormatCurrency.toCurrency(aUser.getLimitInternalVendor()));
				userForm.setLastName(aUser.getLastName());
				userForm.setUserID(aUser.getUserId());
				userForm.setUserLimitOverride(aUser.isUserLimitOverride());
				userForm.setUserName(aUser.getName());
				
				showUsers.add(userForm);
			}
			
			session.setAttribute("USER_LIMIT_LIST", showUsers);
			
    		return ( mapping.findForward("success") );
    		
        } catch (Exception e) {
            logger.error("Error : ", e);
        } 
        
		return ( mapping.findForward("failed") );
	}
	
}