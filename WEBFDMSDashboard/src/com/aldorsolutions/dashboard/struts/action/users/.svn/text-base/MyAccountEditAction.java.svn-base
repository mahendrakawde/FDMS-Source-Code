/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.aldorsolutions.dashboard.struts.action.users;

import java.util.ArrayList;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;

import com.aldorassist.webfdms.dao.LocationDAO;
import com.aldorassist.webfdms.model.LocationDTO;
import com.aldorsolutions.dashboard.struts.form.users.UserEditForm;
import com.aldorsolutions.webfdms.admin.user.bean.UserManagerBean;
import com.aldorsolutions.webfdms.admin.user.dao.UserDAO;
import com.aldorsolutions.webfdms.admin.user.model.UserDTO;
import com.aldorsolutions.webfdms.beans.DbUserSession;
import com.aldorsolutions.webfdms.company.bean.CompanyManagerBean;
import com.aldorsolutions.webfdms.company.model.CompanyDTO;
import com.aldorsolutions.webfdms.ums.bean.RolesManager;
import com.aldorsolutions.webfdms.ums.bean.RolesMembershipManager;
import com.aldorsolutions.webfdms.ums.model.RolesDTO;
import com.aldorsolutions.webfdms.ums.model.RolesMembershipDTO;
import com.aldorsolutions.webfdms.util.SessionValueKeys;

/**
 * MyEclipse Struts Creation date: 04-30-2007
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/myAccountEdit" name="myAccountEditForm"
 *                input="/user/myAccount.jsp" scope="request"
 *                validate="true"
 */
public class MyAccountEditAction extends Action {
	Logger logger = Logger.getLogger(MyAccountEditAction.class);
	
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		UserEditForm myForm = (UserEditForm) form;
		ActionMessages errors = new ActionMessages();
		

        HttpSession session =  request.getSession();
        DbUserSession user = (DbUserSession) session.getAttribute(SessionValueKeys.DB_USER);
        
        try {
        	loadUserForm(myForm, user);
        } catch ( Exception e ) {
        	errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.exception", e.getMessage()) );
			saveMessages(request, errors);
			return (mapping.findForward("MainPage"));
        }
        
		return (mapping.findForward("success"));
	}
	
	private void loadUserForm (UserEditForm userForm, DbUserSession user) throws Exception {
		
		UserManagerBean uMgr = new UserManagerBean();
        LocationDAO locationDAO = new LocationDAO(user);
        RolesManager rolesMgr = RolesManager.getInstance();
        
        ArrayList <RolesDTO> userRoles = rolesMgr.getRolesByUser(user.getId());
        
        
//        if ( user.isUserAssignedRole(RolesDTO.ROLE_DASHBOARD_ACCT) ) {
//        	ArrayList <LocationDTO> locations = locationDAO.getLocationsByAccountant(user.getCompanyID(), user.getId());
//            
//            ArrayList <UserDTO> users = uMgr.getUsersByRoleAssigned(user.getCompanyID(), RolesDTO.ROLE_DASHBOARD_ACCT);
//            ArrayList <UserDTO> accountants = new ArrayList <UserDTO> ();
//            
//            for ( UserDTO roleUser : users ) {
//        		
//        		if ( user.getId() != roleUser.getUserId() ) {
//       				accountants.add(roleUser); 
//        		}
//    		}
//            
//            users = null;
//            
//        	userForm.setAcctLocations(locations);
//    		userForm.setAcctUsers(accountants);
//        }
        
    	ArrayList <LocationDTO> locations = locationDAO.getLocationsByAccountant(user.getCompanyID(), user.getId());
    	userForm.setAcctLocations(locations);
        ArrayList <UserDTO> users = uMgr.getUsersByCompany(user.getCompanyID());
        ArrayList <UserDTO> accountants = new ArrayList <UserDTO> ();
        RolesMembershipManager rolesMgrt = RolesMembershipManager.getInstance();
        ArrayList <RolesMembershipDTO> roleMembers = rolesMgrt.getMembershipByRole(user.getCompanyID(), RolesDTO.ROLE_DASHBOARD_ACCT);
        
    	for ( UserDTO aUser : users ) {
    		
    		for ( RolesMembershipDTO role : roleMembers ) {
    			
    			if ( role.getUserID() == aUser.getUserId() ) {
    				accountants.add(aUser); 
    				break;
    			}
    		}
		}       
        
		userForm.setAcctUsers(accountants);  
        userForm.setCompanyID(user.getCompanyID());
		userForm.setEmail(user.getEmailAddr());
		userForm.setFirstName(user.getFirstName());
		userForm.setInitials(user.getInitials());
		userForm.setLastName(user.getLastName());
		userForm.setUserID(user.getId());
		userForm.setUserName(user.getUserName());
		userForm.setAssignedRoles(userRoles);
		
		CompanyManagerBean compMgr = new CompanyManagerBean();
		CompanyDTO company = compMgr.getCompany(user.getCompanyID());
		
		if ( company != null ) {
			userForm.setCompanyName(company.getName());
		}
		
		userForm.setVacationFlag(user.isAccountingVacationFlag());
		userForm.setVacationUserID(user.getAccountingVacationUserID());
	}
}