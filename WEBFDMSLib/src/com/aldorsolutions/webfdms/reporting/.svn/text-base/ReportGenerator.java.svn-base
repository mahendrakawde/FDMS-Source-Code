/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 * CJongs
 */
package com.aldorsolutions.webfdms.reporting;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.TimerTask;

import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.Message.RecipientType;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;

import com.aldorassist.webfdms.model.ReportSchedulingDTO;
import com.aldorsolutions.webfdms.company.model.CompanyDTO;
import com.aldorsolutions.webfdms.reporting.dao.ReportSchedulingDAO;
import com.aldorsolutions.webfdms.util.CrystalReportManagerBeanScheduling;
import com.aldorsolutions.webfdms.util.FormatDate;
import com.aldorsolutions.webfdms.util.UtilSingleton;

/**
 * MyEclipse Struts Creation date: 04-17-2007
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 * @struts.action-forward name="failed" path="/login.jsp"
 * @struts.action-forward name="success" path="/main.jsp"
 */

public class ReportGenerator extends TimerTask {
	/*
	 * Generated Methods
	 */

	public static CompanyDTO COMPANYINFO;
	public static int ScheID;

	public ReportGenerator(CompanyDTO company, int scheduleID) {
		super();
		COMPANYINFO = company;
		ScheID = scheduleID;
	}

	public void run() {
		String pageName = "";

		CompanyDTO company = COMPANYINFO;

		int scheduleID = ScheID;

		ReportSchedulingDTO rptScheList = new ReportSchedulingDTO();
		ReportSchedulingDAO reportScheDAo = new ReportSchedulingDAO(company
				.getDbLookup());
		rptScheList = reportScheDAo.getReportScheduling(scheduleID);

		if ((rptScheList != null) && ( (rptScheList.getStatus().compareToIgnoreCase("Q") == 0) || (rptScheList.getStatus().compareToIgnoreCase("R") == 0)) ) {

			// get in to run the scheduling we need to update Q to R and set the starting time
			rptScheList.setStatus("R");
			long startingTimestamp = System.currentTimeMillis();
			rptScheList.setStartDateTime(startingTimestamp);
			try {
				reportScheDAo.updateReportScheduling(rptScheList);
			}catch (Exception pe) {
					pe.printStackTrace();
			}
			//
			CrystalReportManagerBeanScheduling crystalServerReport = new CrystalReportManagerBeanScheduling(company.getConfigID());

			java.util.Date fDate = (java.util.Date) rptScheList.getFromDate();
			String fromDate = FormatDate.convertDateToYYYYMMDD(fDate);

			java.util.Date tDate = (java.util.Date) rptScheList.getToDate();
			String toDate = FormatDate.convertDateToYYYYMMDD(tDate);
			
			String locale = rptScheList.getLocale();
			String location = rptScheList.getLocation();
//			if (rptScheList.getLocation() == 0) {
//				location = "ALL";
//			}else {
//				location = Integer.toString(rptScheList.getLocation());
//			}
//			
//			if (rptScheList.getLocale() == 0){
//				locale = "ALL";
//			}else {
//				locale = Integer.toString(rptScheList.getLocale());
//			}

			pageName = crystalServerReport.printReport(company, rptScheList
					.getFormID(), fromDate, toDate, null, location, locale, "", true);
			
			// send email out if there is a file.
			if ( (pageName.length() > 0) && (pageName.compareToIgnoreCase("reportError.html") != 0)) {
				String emailTo = rptScheList.getEmailTo();
				String emailCC = rptScheList.getEmailCC();
				String emailBCC = "";
				String subject = "Report Schedule";
				
				StringBuffer message = new StringBuffer();
				String endLine = "\r\n";
				message.append(endLine + endLine);
				message.append("Dear FDMS User," + endLine + endLine);
				message.append("	Your Scheduled report link is below." + endLine + endLine);
				message.append(pageName);
				message.append(endLine + endLine);
				message.append("Support Department" + endLine); 
				message.append("Aldor Solutions" + endLine);  
				message.append("866-230-0800" + endLine);  
				message.append("support@aldorsolutions.com" + endLine);  
				message.append(endLine + endLine);
				message.append("Company Links:" + endLine);  
				message.append("( Aldor Solutions: http://www.aldorsolutions.com )" + endLine);  
				message.append("( Online Training Guide: http://training.aldorsolutions.com )" + endLine);  
				message.append("( Open Support Ticket: http://support.aldorsolutions.com )" + endLine);  
				message.append(endLine + endLine);
				message.append("Confidentiality Note: The information contained in this transmission is legally privileged and confidential, " +
						"intended only for the use of the individual or entity named above. If the reader of this message is not the intended recipient, " +
						"you are hereby notified that any dissemination, distribution, or copying of this communication is strictly prohibited. " +
						"If you receive this communication in error, please notify us immediately by telephone call to 866-230-0800 and delete the message. Thank you." + endLine); 


				try {
					sendEmail(company.getConfigID(),emailTo, emailCC, emailBCC, subject, message.toString(), pageName);
				}catch (Exception pe) {
					
					
				}
				
				//we finish up the task.
				
				rptScheList.setStatus("S");
				rptScheList.setReportName(pageName);
				long createdTimestamp = System.currentTimeMillis();
				rptScheList.setStopDateTime(createdTimestamp);
				
					
					
			}else {
				rptScheList.setStatus("E");
				rptScheList.setReportName("");
				long createdTimestamp = System.currentTimeMillis();
				rptScheList.setStopDateTime(createdTimestamp);
			}
			
			try {
				reportScheDAo.updateReportScheduling(rptScheList);
			}catch (Exception pe) {
	
			}
			
			}
			
	}
	
	public static void sendEmail ( Long configID, String emailTo, String emailCC, String emailBCC, 
			String subject, String message, String fileName) throws MessagingException {
		
		ArrayList <String> emailArrayTo = new ArrayList <String> ();
//		emailArrayTo.add(emailTo);
		emailArrayTo = buildEmailList(emailTo);
		
		ArrayList <String> emailArrayCC = new ArrayList <String> ();
//		emailArrayCC.add(emailCC);
		emailArrayCC = buildEmailList(emailCC);
		
//		ArrayList <String> emailArrayBCC = new ArrayList <String> ();
//		emailArrayBCC.add(emailBCC);
		
		
		sendEmail ( configID, emailArrayTo, emailArrayCC, null, subject, message, fileName);
	}
	
	public static ArrayList <String> buildEmailList(String email){
		ArrayList <String> emailList = new ArrayList <String>();
		StringTokenizer st = new StringTokenizer(email, ";");

		while (st.hasMoreTokens()) {
			  emailList.add(st.nextToken());
		}
		return emailList;
	}
	
//	public static void sendEmail ( Long configID, ArrayList <String> emailTo, ArrayList <String> emailCC, ArrayList <String> emailBCC, 
//			String subject, String message, String fileName) throws MessagingException {
//		sendEmail ( configID, emailTo, emailCC, emailBCC, subject, message, fileName);
//	}
	
	public static void sendEmail ( Long configID, ArrayList <String> emailTo, ArrayList <String> emailCC, ArrayList <String> emailBCC, 
			String subject, String message, String fileName) throws MessagingException {
		
		String mailHost = UtilSingleton.getInstance().getProperty(configID,"smtp.mail.host");
		String mailFrom = UtilSingleton.getInstance().getProperty(configID,"smtp.mail.from");
		
//		if ( fromAddr != null ) {
//			mailFrom = fromAddr;
//		}
		long startTime = System.currentTimeMillis();
		postMail(emailTo, emailCC, emailBCC, mailHost, subject, message, mailFrom, fileName);
	}
	
	private static void postMail(ArrayList <String> recipientsTo, ArrayList <String> recipientsCC, ArrayList <String> recipientsBCC, 
			String mailHost, String subject, String message, String from, String fileName) throws MessagingException {
		
		boolean debug = false;

		// Set the host smtp address
		Properties props = new Properties();
		
		if ( mailHost == null ) {
			throw new MessagingException ( "mailHost is not defined" );
		}
		
		
		props.put("mail.smtp.host", mailHost);
		
		// create some properties and get the default Session
		Session session = Session.getDefaultInstance(props, null);
		session.setDebug(debug);

		// create a message
		try {
			Message msg = new MimeMessage(session);
	
			// set the from and to address
			InternetAddress addressFrom = new InternetAddress(from);
			msg.setFrom(addressFrom);
			
			if ( recipientsTo != null ) {
				addRecipients (Message.RecipientType.TO, recipientsTo, msg);
			}
			
			if ( recipientsCC != null ) {
				addRecipients (Message.RecipientType.CC, recipientsCC, msg);
			}
			
			if ( recipientsBCC != null ) {
				addRecipients (Message.RecipientType.BCC, recipientsBCC, msg);
			}
			
			// Optional : You can also set your custom headers in the Email if you
			// Want
			// msg.addHeader("MyHeaderName", "myHeaderValue");
	
			// Setting the Subject and Content Type
			msg.setSubject(subject);
			
			msg.setContent(message, "text/plain");
		
			Transport.send(msg);
	} catch (MessagingException mex) {
	      mex.printStackTrace();
	      Exception ex = null;
	      if ((ex = mex.getNextException()) != null) {
	    ex.printStackTrace();
	      }
	  }

		
	}
	
	private static void addRecipients (RecipientType messageType, ArrayList <String> recipients, Message msg) throws MessagingException {
		
		InternetAddress[] addressTo = new InternetAddress[recipients.size()];
		for (int i = 0; i < recipients.size(); i++) {
			if (recipients.get(i) != null && recipients.get(i).length() > 0) {
				addressTo[i] = new InternetAddress(recipients.get(i));
			}
		}
		
		msg.addRecipients(messageType, addressTo);
	}
	
	
}