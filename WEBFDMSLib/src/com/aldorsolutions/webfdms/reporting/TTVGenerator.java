/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 * CJongs
 */
package com.aldorsolutions.webfdms.reporting;

import java.io.IOException;
import java.io.InputStream;
import java.util.TimerTask;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.HttpException;
import org.apache.commons.httpclient.methods.PostMethod;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import com.aldorassist.webfdms.model.SMSSchedulingDTO;
import com.aldorsolutions.webfdms.beans.FdmsDb;
import com.aldorsolutions.webfdms.reporting.dao.SMSSchedulingDAO;
import com.aldorsolutions.webfdms.util.DAO;

/**
 * MyEclipse Struts Creation date: 04-17-2007
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 * @struts.action-forward name="failed" path="/login.jsp"
 * @struts.action-forward name="success" path="/main.jsp"
 */

public class TTVGenerator extends TimerTask {
	/*
	 * Generated Methods
	 */

	
	public static int ScheID;
	private static String ENDPOINT = "https://www.callfire.com/cloud/1/callfirexml/campaign";

	public TTVGenerator(int scheduleID) {
		super();
		ScheID = scheduleID;
	}

	public void run() {
		String pageName = "";

		int scheduleID = ScheID;

		SMSSchedulingDTO smsSche = new SMSSchedulingDTO();
		SMSSchedulingDAO smsScheDAo = new SMSSchedulingDAO(DAO.DB_FDMSCOMMON);
		smsSche = smsScheDAo.getSMSCommonScheduling(scheduleID);

		if ((smsSche != null) && ( (smsSche.getStatus().compareToIgnoreCase("Q") == 0) || (smsSche.getStatus().compareToIgnoreCase("R") == 0)) ) {

			try {
			// get in to run the scheduling we need to update Q to R and set the starting time
			smsSche.setStatus("R");
			long startingTimestamp = System.currentTimeMillis();
			smsSche.setStartDateTime(startingTimestamp);
			try {
				smsScheDAo.updateSMSScheduling(smsSche);
			}catch (Exception pe) {
					pe.printStackTrace();
			}
				
				String msg = "";
			 msg = FdmsDb.getInstance().getSMSSql(smsSche.getSMSSqlId(),smsSche.getDbLookup(),smsSche.getLocationId());
//			 msg = "test";
	    		
	         String message = msg;
	         message = smsSche.getStartMessage()+" "+message+" "+smsSche.getEndMessage();
	         
			//this is for callfire (www.callfire.com).	
//				SMSService service = new SMSService();
//				ArrayOfString numbers = new ObjectFactory().createArrayOfString();
////				numbers.getString().add("9405942322,HI Chai!");
//				numbers.getString().add(smsSche.getAreaCode()+smsSche.getPhone()+","+message);
//				String key = "d8b7227f26bbdf34fa40498f7aac2e5a1f880320";
//				long compaignid = service.getSMSServiceHttpPort().sendSMSCampaign(key, numbers, "hi");
			
	         	sendSpeech(smsSche, message);
	         
				//we finish up the task.
				
				smsSche.setStatus("S");
				long createdTimestamp = System.currentTimeMillis();
				smsSche.setStopDateTime(createdTimestamp);
				smsSche.setSentMessage(message);
				
			}catch (Exception pe) {
				smsSche.setStatus("E");
				long createdTimestamp = System.currentTimeMillis();
				smsSche.setStopDateTime(createdTimestamp);
			}		
					
			}else {
				smsSche.setStatus("E");
				long createdTimestamp = System.currentTimeMillis();
				smsSche.setStopDateTime(createdTimestamp);
			}
			
			try {
				smsScheDAo.updateSMSScheduling(smsSche);
			}catch (Exception pe) {
	
			}
			
	}

	private void sendSpeech(SMSSchedulingDTO smsSche, String message){
		String request = ENDPOINT;
		HttpClient client = new HttpClient();
		PostMethod method = new PostMethod(request);
		
		 // Add POST parameters
		method.addParameter("callfireXml","<dialplan name=\"Root\"><play name=\"play\" type=\"tts\" voice=\"female1\">"+message+"</play></dialplan>");
		method.addParameter("inboundPhoneNumber","9723384155"); //any number
		method.addParameter("outboundCallerid","8662300800"); //any number
//		method.addParameter("isInbound","true");
		  method.addParameter("isInbound","false");
		  method.addParameter("isOutbound","true");
		method.addParameter("campaignName","HelloWorld");
		String key = "d8b7227f26bbdf34fa40498f7aac2e5a1f880320";
		method.addParameter("apikey",key);
		
		 // Send POST request
		int statusCode = 0;
	    try {
			 statusCode = client.executeMethod(method);
		} catch (HttpException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	    InputStream rstream = null;
	    // Get the response body
	    StringBuffer sBuffer = new StringBuffer();
	    try {
	    	
			DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
            Document doc = docBuilder.parse (method.getResponseBodyAsStream());
            doc.getDocumentElement ().normalize ();
            NodeList listOfCampaign = doc.getElementsByTagName("campaignResponse");
            String descriptionValue = "";
            String successfulValue = "";
            String campaignIdValue = "";
            for(int s=0; s<listOfCampaign.getLength() ; s++){
            	Node firstCampaignNode = listOfCampaign.item(s);
            	if(firstCampaignNode.getNodeType() == Node.ELEMENT_NODE){
            		Element firstCampaignElement = (Element)firstCampaignNode;
            		
            		NodeList descriptionList = firstCampaignElement.getElementsByTagName("description");
            		Element descriptionElement = (Element)descriptionList.item(0);
            		NodeList textDescriptionList = descriptionElement.getChildNodes();
            		descriptionValue = ((Node)textDescriptionList.item(0)).getNodeValue().trim();
            		
            		NodeList successfulList = firstCampaignElement.getElementsByTagName("successful");
                    Element successfulElement = (Element)successfulList.item(0);
                    NodeList textSuccessfulList = successfulElement.getChildNodes();
                    successfulValue = ((Node)textSuccessfulList.item(0)).getNodeValue().trim();
                    
                    NodeList campaignIdList = firstCampaignElement.getElementsByTagName("campaignid");
                    Element campaignIdElement = (Element)campaignIdList.item(0);
                    NodeList textCampaignIdList = campaignIdElement.getChildNodes();
                    campaignIdValue = ((Node)textCampaignIdList.item(0)).getNodeValue().trim();
                    
            	}
            }
            sendCall(campaignIdValue,smsSche);

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} 
		catch (ParserConfigurationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SAXException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} 
//		return sBuffer.toString();
	    
	}
	private void sendCall(String campaignIdValue, SMSSchedulingDTO smsSche) {
		String request = "https://www.callfire.com/cloud/1/campaign/"+campaignIdValue+"/call";
		HttpClient client = new HttpClient();
		PostMethod method = new PostMethod(request);
		
		 // Add POST parameters
		String key = "d8b7227f26bbdf34fa40498f7aac2e5a1f880320";
		method.addParameter("apikey",key);
		String numbers = smsSche.getAreaCode()+smsSche.getPhone();
		method.addParameter("numbers",numbers);
		int statusCode = 0;
	    try {
			 statusCode = client.executeMethod(method);
			 
			 
		} catch (HttpException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
	}
}