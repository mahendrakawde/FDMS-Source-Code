/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 * CJongs
 */
package fdms.ui.struts.action;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.activation.MimetypesFileTypeMap;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.util.MessageResources;
import org.apache.struts.util.MessageResourcesFactory;
import org.apache.struts.util.PropertyMessageResourcesFactory;

import com.aldorassist.webfdms.dao.ERegisterImageMappingDAO;
import com.aldorassist.webfdms.dao.UploadedFileDAO;
import com.aldorassist.webfdms.model.ERegisterBookDTO;
import com.aldorassist.webfdms.model.ERegisterImageMappingDTO;
import com.aldorassist.webfdms.model.PresentationImageDTO;
import com.aldorassist.webfdms.model.UploadedFileDTO;
import com.aldorsolutions.webfdms.beans.DbUserSession;
import com.aldorsolutions.webfdms.common.Constants;
import com.aldorsolutions.webfdms.reporting.dao.ERegisterBookDAO;
import com.aldorsolutions.webfdms.util.DAO;
import com.aldorsolutions.webfdms.util.SessionHelpers;

import fdms.ui.struts.form.ERegisterBookForm;
import fdms.util.CommonUtil;
import fdms.util.FileUtil;


/** 
 * MyEclipse Struts
 * Creation date: 04-17-2007
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 * @struts.action-forward name="failed" path="/login.jsp"
 * @struts.action-forward name="success" path="/main.jsp"
 */
public class  ProcessERegisterBook extends Action {
	/*
	 * Generated Methods
	 */
	
	private Logger logger = Logger.getLogger(ShowMovingCase.class.getName());
	
	private long registerIdShare;
	//private long registerIdCompany;

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm actionForm, HttpServletRequest request,
			HttpServletResponse response) throws javax.servlet.ServletException, java.io.IOException {

		ERegisterBookForm form = (ERegisterBookForm) actionForm;
		ActionErrors errors = new ActionErrors();
		HttpSession session = request.getSession();
		DbUserSession sessionUser = SessionHelpers.getUserSession(request);
		int vitalsId = SessionHelpers.getVitalsIdFromSession(request, sessionUser);

		ERegisterBookDTO registerBook = new ERegisterBookDTO();
		registerBook.setRegisterId(form.getRegisterId());
		registerBook.setCompanyId(form.getCompanyId());
		registerBook.setLocaleId(form.getLocaleId());
		registerBook.setLocationId(form.getLocationId());
		registerBook.setCaseId(form.getCaseId());
		registerBook.setRegBookHeader(form.getRegBookHeader());
		registerBook.setServiceMessage(form.getServiceMessage());
		registerBook.setVideolink(form.getVideolink());
		registerBook.setTargetWebPage(form.getTargetWebPage());
		registerBook.setImageLink(form.getImageLink());
		registerBook.setFullName(form.getFullName());
		registerBook.setLocaleName(form.getLocaleName());
		registerBook.setLocationName(form.getLocationName());
		registerBook.setDateOfBirth(form.getDateOfBirth());
		registerBook.setDateOfDeath(form.getDateOfDeath());
		registerBook.setBackgroundThemeId(form.getBackgroundThemeId());
		registerBook.setServiceScreenThemeId(form.getServiceScreenThemeId());
		registerBook.setArrangerId(form.getArrangerId());
		
		if(form.getObitLink() != null && form.getObitLink().length() > 0) {
			registerBook.setObituryLink(form.getObitLink());
		}
		
		ERegisterBookDAO regBookDAoShare = new ERegisterBookDAO(DAO.DB_FDMSSHARE);
		
		ERegisterImageMappingDAO imageMappingDaoShare = new ERegisterImageMappingDAO(DAO.DB_FDMSSHARE);

		try {
			if (form.getRegisterId()==0){
				String qrCodePath = CommonUtil.generateQrCode(sessionUser, vitalsId);
				
				registerBook.setQrCodePath(qrCodePath);
				
				regBookDAoShare.addERegisterBook(registerBook);
				registerIdShare = registerBook.getRegisterId();
				registerBook.setReferenceId(registerBook.getRegisterId());
				
				// Add Logo
				if(form.getLogoDto() != null && form.getLogoDetail().trim().length() < 1) {
					// Save Presentation image in image mapping
					ERegisterImageMappingDTO logoImageMappingDto = new ERegisterImageMappingDTO();
					
					logoImageMappingDto.setCaseId(vitalsId);
					logoImageMappingDto.setCompanyId(form.getCompanyId());
					logoImageMappingDto.setImageBelongsTo(Constants.IMAGE_TYPE_LOGO);
					
					if(form.getLogoDto() instanceof PresentationImageDTO) {
						PresentationImageDTO presentationDto = (PresentationImageDTO) form.getLogoDto();
						
						logoImageMappingDto.setImageId(presentationDto.getFileId());
					} else if(form.getLogoDto() instanceof UploadedFileDTO) {
						UploadedFileDTO uploadedFileDto = (UploadedFileDTO) form.getLogoDto();
						
						logoImageMappingDto.setImageId(uploadedFileDto.getFileId());
					}
					
					imageMappingDaoShare.addImageMapping(logoImageMappingDto);

					//imageMappingDaoCompany.addImageMapping(logoImageMappingDto);
				} else if(form.getLogoDetail() != null && form.getLogoDetail().trim().length() > 0) {
					// Save uploaded image & insert entry in image mapping.
					String[] logoDetails = form.getLogoDetail().split("\\|");
					
					ERegisterImageMappingDTO mappingDto = processUpload(form, sessionUser, logoDetails);
					
					imageMappingDaoShare.addImageMapping(mappingDto);
				}
				
				if(form.getDecedentDto() != null && form.getDecedentDetail().trim().length() < 1) {
					ERegisterImageMappingDTO decedentImageMappingDto = new ERegisterImageMappingDTO();
					
					decedentImageMappingDto.setCaseId(vitalsId);
					decedentImageMappingDto.setCompanyId(form.getCompanyId());
					decedentImageMappingDto.setImageBelongsTo(Constants.IMAGE_TYPE_DECEDENT);
					
					if(form.getDecedentDto() instanceof PresentationImageDTO) {
						PresentationImageDTO presentationDto = (PresentationImageDTO) form.getDecedentDto();
						
						decedentImageMappingDto.setImageId(presentationDto.getFileId());
					} else if(form.getDecedentDto() instanceof UploadedFileDTO) {
						UploadedFileDTO uploadedFileDto = (UploadedFileDTO) form.getDecedentDto();
						
						decedentImageMappingDto.setImageId(uploadedFileDto.getFileId());
					}
					
					imageMappingDaoShare.addImageMapping(decedentImageMappingDto);
					
					//imageMappingDaoCompany.addImageMapping(decedentImageMappingDto);
				} else if(form.getDecedentDetail() != null && form.getDecedentDetail().trim().length() > 0) {
					String[] decedentDetails = form.getDecedentDetail().split("\\|");
					
					imageMappingDaoShare.addImageMapping(processUpload(form, sessionUser, decedentDetails));
				}
				
				if(CommonUtil.hasAnyUploadedImage(form.getPresentationImageDetail())) {
					List<Object> imageLibrary = form.getImageLibrary();
					int index = 0;
					
					for(String tmpPresentationDetail : form.getPresentationImageDetail()) {
						String[] details = tmpPresentationDetail.split("\\|");
						
						if(details.length > 2) {
							imageMappingDaoShare.addImageMapping(processUpload(form, sessionUser, details));
						} else {
							ERegisterImageMappingDTO imageMappingDto = new ERegisterImageMappingDTO();
							
							imageMappingDto.setCaseId(vitalsId);
							imageMappingDto.setCompanyId(form.getCompanyId());
							imageMappingDto.setImageBelongsTo(Constants.IMAGE_TYPE_PRESENTATION);
							
							Object libraryImage = imageLibrary.get(index);
							
							if(libraryImage instanceof PresentationImageDTO) {
								PresentationImageDTO presentationDto = (PresentationImageDTO) libraryImage;
								
								imageMappingDto.setImageId(presentationDto.getFileId());
							} else if(libraryImage instanceof UploadedFileDTO) {
								UploadedFileDTO uploadedFileDto = (UploadedFileDTO) libraryImage;
								
								imageMappingDto.setImageId(uploadedFileDto.getFileId());
							}
							
							if(details[details.length - 1] != null) {
								imageMappingDto.setImageOrder(Long.parseLong(details[details.length - 1]));
							}
							
							imageMappingDaoShare.addImageMapping(imageMappingDto);
						}
						
						++index;
					}
				} else {
					ERegisterImageMappingDTO imageMappingDto = new ERegisterImageMappingDTO();

					imageMappingDto.setCaseId(vitalsId);
					imageMappingDto.setCompanyId(form.getCompanyId());
					imageMappingDto.setImageBelongsTo(Constants.IMAGE_TYPE_PRESENTATION);
					
					List<Long> imageIds = new ArrayList<Long>();
					
					for(Object obj : form.getImageLibrary()) {
						if(obj instanceof PresentationImageDTO) {
							PresentationImageDTO presentationDto = (PresentationImageDTO) obj;
							
							imageIds.add(presentationDto.getFileId());
						} else if(obj instanceof UploadedFileDTO) {
							UploadedFileDTO uploadedFileDto = (UploadedFileDTO) obj;
							
							imageIds.add(uploadedFileDto.getFileId());
						}
					}

					imageMappingDaoShare.addBulkImageMapping(imageMappingDto, imageIds);
				}
			}else {
				
				String qrCodePath = CommonUtil.generateQrCode(sessionUser, vitalsId);
				
				registerBook.setQrCodePath(qrCodePath);
				
				// regBookDAoCompany.updateERegisterBook(registerBook);
				registerBook.setQrCodePath(FileUtil.getPathForQRCode(sessionUser));
				
				registerBook.setReferenceId(registerBook.getRegisterId());
				regBookDAoShare.updateERegisterBook(registerBook);
				
				if(form.getLogoDetail() != null && form.getLogoDetail().trim().length() > 0) {
					// Save uploaded image & insert entry in image mapping.
					String[] logoDetails = form.getLogoDetail().split("\\|");
					
					ERegisterImageMappingDTO logoDto = processUpload(form, sessionUser, logoDetails);
					
					logoDto.setMappingId(form.getLogoId());
					
					imageMappingDaoShare.updateImageMapping(logoDto);
				} else {
					ERegisterImageMappingDTO logoImageMappingDto = new ERegisterImageMappingDTO();
					
					logoImageMappingDto.setMappingId(form.getLogoId());
					
					logoImageMappingDto.setCaseId(vitalsId);
					logoImageMappingDto.setCompanyId(form.getCompanyId());
					logoImageMappingDto.setImageBelongsTo(Constants.IMAGE_TYPE_LOGO);
					
					if(form.getLogoDto() instanceof PresentationImageDTO) {
						PresentationImageDTO presentationDto = (PresentationImageDTO) form.getLogoDto();
						
						logoImageMappingDto.setUploadedImageFlag(false);
						logoImageMappingDto.setImageId(presentationDto.getFileId());
					} else if(form.getLogoDto() instanceof UploadedFileDTO) {
						UploadedFileDTO uploadedFileDto = (UploadedFileDTO) form.getLogoDto();
						
						logoImageMappingDto.setUploadedImageFlag(true);
						logoImageMappingDto.setImageId(uploadedFileDto.getFileId());
					}
					
					imageMappingDaoShare.updateImageMapping(logoImageMappingDto);
				}
				
				if(form.getDecedentDetail() != null && form.getDecedentDetail().trim().length() > 0) {
					String[] decedentDetails = form.getDecedentDetail().split("\\|");
					
					ERegisterImageMappingDTO decedentDto = processUpload(form, sessionUser, decedentDetails);
					
					decedentDto.setMappingId(form.getDecedentImageId());
					
					imageMappingDaoShare.updateImageMapping(decedentDto);
				} else {
					ERegisterImageMappingDTO decedentImageMappingDto = new ERegisterImageMappingDTO();
					
					decedentImageMappingDto.setMappingId(form.getDecedentImageId());
					decedentImageMappingDto.setCaseId(vitalsId);
					decedentImageMappingDto.setCompanyId(form.getCompanyId());
					decedentImageMappingDto.setImageBelongsTo(Constants.IMAGE_TYPE_DECEDENT);
					
					if(form.getDecedentDto() instanceof PresentationImageDTO) {
						PresentationImageDTO presentationDto = (PresentationImageDTO) form.getDecedentDto();
						
						decedentImageMappingDto.setUploadedImageFlag(false);
						decedentImageMappingDto.setImageId(presentationDto.getFileId());
					} else if(form.getDecedentDto() instanceof UploadedFileDTO) {
						UploadedFileDTO uploadedFileDto = (UploadedFileDTO) form.getDecedentDto();
						
						decedentImageMappingDto.setUploadedImageFlag(true);
						decedentImageMappingDto.setImageId(uploadedFileDto.getFileId());
					}
					
					imageMappingDaoShare.updateImageMapping(decedentImageMappingDto);
				}
				
				if(CommonUtil.hasAnyUploadedImage(form.getPresentationImageDetail())) {
					List<Object> imageLibrary = form.getImageLibrary();
					int index = 0;
					
					Long[] presentationImageIds = form.getPresentationImage();

					if(presentationImageIds != null) {
						
						ERegisterImageMappingDTO imageMappingDto = null;
						
						Map<Long, Long> imageIdsFromMappingInitial = null;
						
						for(String tmpPresentationDetail : form.getPresentationImageDetail()) {
							String[] details = tmpPresentationDetail.split("\\|");

							if(details.length > 2) {
								imageMappingDto = processUpload(form, sessionUser, details);
								
								imageMappingDto.setMappingId(presentationImageIds[index++]);
								
								if(imageIdsFromMappingInitial == null) {
									imageIdsFromMappingInitial = imageMappingDaoShare.getImageFileIds(imageMappingDto.getCaseId(), imageMappingDto.getCompanyId(), Constants.IMAGE_TYPE_PRESENTATION);
								}
								
								imageMappingDaoShare.updateImageMapping(imageMappingDto);
							} else {
								imageMappingDto = new ERegisterImageMappingDTO();
								
								imageMappingDto.setCaseId(vitalsId);
								imageMappingDto.setCompanyId(form.getCompanyId());
								imageMappingDto.setImageBelongsTo(Constants.IMAGE_TYPE_PRESENTATION);
								
								// imageMappingDto.setMappingId(presentationImageIds[index]);
								
								Map<Long, Long> imageIdsFromMapping = imageMappingDaoShare.getImageFileIds(imageMappingDto.getCaseId(), imageMappingDto.getCompanyId(), Constants.IMAGE_TYPE_PRESENTATION);
								
								if(imageIdsFromMappingInitial == null) {
									imageIdsFromMappingInitial = imageMappingDaoShare.getImageFileIds(imageMappingDto.getCaseId(), imageMappingDto.getCompanyId(), Constants.IMAGE_TYPE_PRESENTATION);
								}
								
								Object libraryImage = imageLibrary.get(index);
								
								if(libraryImage instanceof PresentationImageDTO) {
									PresentationImageDTO presentationDto = (PresentationImageDTO) libraryImage;
									
									if(imageIdsFromMapping.get(presentationDto.getFileId()) != null) {
										//imageMappingDto.setImageOrder(calculateOrder(imageIdsFromMapping.get(presentationDto.getFileId()), presentationImageIds));
										//imageMappingDto.setMappingId(imageIdsFromMapping.get(presentationDto.getFileId()));
										
										imageMappingDto.setImageOrder(calculateOrder(imageIdsFromMappingInitial.get(presentationDto.getFileId()), presentationImageIds));
										imageMappingDto.setMappingId(imageIdsFromMappingInitial.get(presentationDto.getFileId()));
										
										index++;
									} else {
										imageMappingDto.setMappingId(presentationImageIds[index++]);
										imageMappingDto.setImageOrder(index);
									}
									
									imageMappingDto.setUploadedImageFlag(false);
									imageMappingDto.setImageId(presentationDto.getFileId());
								} else if(libraryImage instanceof UploadedFileDTO) {
									UploadedFileDTO uploadedFileDto = (UploadedFileDTO) libraryImage;
									
									if(imageIdsFromMapping.get(uploadedFileDto.getFileId()) != null) {
										imageMappingDto.setImageOrder(calculateOrder(imageIdsFromMapping.get(uploadedFileDto.getFileId()), presentationImageIds));
										imageMappingDto.setMappingId(imageIdsFromMapping.get(uploadedFileDto.getFileId()));
										
										index++;
									} else {
										imageMappingDto.setMappingId(presentationImageIds[index++]);
										imageMappingDto.setImageOrder(index);
									}
									
									imageMappingDto.setUploadedImageFlag(true);
									imageMappingDto.setImageId(uploadedFileDto.getFileId());
								}
								
								/*if(details[details.length - 1] != null) {
									imageMappingDto.setImageOrder(Long.parseLong(details[details.length - 1]));
								}*/
								
								imageMappingDaoShare.updateImageMapping(imageMappingDto);
							}
						}
					} else if (presentationImageIds == null) {
						imageMappingDaoShare.deleteMappingsByCaseAndCompanyAndCategory(form.getCaseId(), form.getCompanyId(), Constants.IMAGE_TYPE_PRESENTATION);
						
						for(String tmpPresentationDetail : form.getPresentationImageDetail()) {
							String[] details = tmpPresentationDetail.split("\\|");
							
							if(details.length > 2) {
								imageMappingDaoShare.addImageMapping(processUpload(form, sessionUser, details));
							} else {
								ERegisterImageMappingDTO imageMappingDto = new ERegisterImageMappingDTO();
								
								imageMappingDto.setCaseId(vitalsId);
								imageMappingDto.setCompanyId(form.getCompanyId());
								imageMappingDto.setImageBelongsTo(Constants.IMAGE_TYPE_PRESENTATION);
								
								Object libraryImage = imageLibrary.get(index);
								
								if(libraryImage instanceof PresentationImageDTO) {
									PresentationImageDTO presentationDto = (PresentationImageDTO) libraryImage;
									
									imageMappingDto.setImageId(presentationDto.getFileId());
								} else if(libraryImage instanceof UploadedFileDTO) {
									UploadedFileDTO uploadedFileDto = (UploadedFileDTO) libraryImage;
									
									imageMappingDto.setImageId(uploadedFileDto.getFileId());
								}
								
								if(details[details.length - 1] != null) {
									imageMappingDto.setImageOrder(Long.parseLong(details[details.length - 1]));
								}
								
								imageMappingDaoShare.addImageMapping(imageMappingDto);
							}
							
							++index;
						}
					}
					
					// Add logic to update qr code for the updated value of Background theme id.
					
					
				} else {
					ERegisterImageMappingDTO imageMappingDto = new ERegisterImageMappingDTO();

					imageMappingDto.setCaseId(vitalsId);
					imageMappingDto.setCompanyId(form.getCompanyId());
					imageMappingDto.setImageBelongsTo(Constants.IMAGE_TYPE_PRESENTATION);
					
					int index = 0;
					
					Long[] presentationImageIds = form.getPresentationImage();
					
					if(presentationImageIds != null) {
						Map<Long, Long> imageIdsFromMapping = imageMappingDaoShare.getImageFileIds(imageMappingDto.getCaseId(), imageMappingDto.getCompanyId(), Constants.IMAGE_TYPE_PRESENTATION);
						
						for(Object obj : form.getImageLibrary()) {
							
							//imageMappingDto.setMappingId(presentationImageIds[index++]);
							
							if(obj instanceof PresentationImageDTO) {
								PresentationImageDTO presentationDto = (PresentationImageDTO) obj;
								
								imageMappingDto.setImageOrder(calculateOrder(imageIdsFromMapping.get(presentationDto.getFileId()), presentationImageIds));
								imageMappingDto.setUploadedImageFlag(false);
								imageMappingDto.setImageId(presentationDto.getFileId());
								imageMappingDto.setMappingId(imageIdsFromMapping.get(presentationDto.getFileId()));
							} else if(obj instanceof UploadedFileDTO) {
								UploadedFileDTO uploadedFileDto = (UploadedFileDTO) obj;
								
								imageMappingDto.setImageOrder(calculateOrder(imageIdsFromMapping.get(uploadedFileDto.getFileId()), presentationImageIds));
								imageMappingDto.setUploadedImageFlag(true);
								imageMappingDto.setImageId(uploadedFileDto.getFileId());
								imageMappingDto.setMappingId(imageIdsFromMapping.get(uploadedFileDto.getFileId()));
							}
							
							imageMappingDaoShare.updateImageMapping(imageMappingDto);
						}
					} else if (presentationImageIds == null) {

						List<Long> imageIds = new ArrayList<Long>();

						for(Object obj : form.getImageLibrary()) {
							if(obj instanceof PresentationImageDTO) {
								PresentationImageDTO presentationDto = (PresentationImageDTO) obj;
								
								imageIds.add(presentationDto.getFileId());
							} else if(obj instanceof UploadedFileDTO) {
								UploadedFileDTO uploadedFileDto = (UploadedFileDTO) obj;
								
								imageIds.add(uploadedFileDto.getFileId());
							}
						}
						
						imageMappingDaoShare.deleteMappingsByCaseAndCompanyAndCategory(form.getCaseId(), form.getCompanyId(), Constants.IMAGE_TYPE_PRESENTATION);

						imageMappingDaoShare.addBulkImageMapping(imageMappingDto, imageIds);
					}
				}
			}
			
			form.setLogoMap(null);
			form.setDecedentMap(null);
			form.setPresentationMap(null);
			
		} catch (Exception e) {
			logger.error("Exception in ProcessERegisterBook:execute() : ", e);
		}

		return ( mapping.findForward("showERegister") );
	}

	/**
	 * This method will upload image to the NFS directory & make entries in
	 * respective database tables.
	 * 
	 * @param form
	 * @param sessionUser
	 * @param imageDetails
	 */
	private ERegisterImageMappingDTO processUpload(ERegisterBookForm form, DbUserSession sessionUser, String[] imageDetails) {
		FileOutputStream fileOutputStream = null;
		
		ERegisterImageMappingDTO mappingDtoShare = null;
		
		MessageResourcesFactory messageFactory = null;
    	messageFactory = (PropertyMessageResourcesFactory) PropertyMessageResourcesFactory.createFactory();
		MessageResources resources = messageFactory.createResources("ApplicationResources");
		
		String nfsDirectory = resources.getMessage("nfs.server.directory");
		int thumbnailDim = Integer.parseInt(resources.getMessage("thumbnail.image.width"));
		
		int guestBookImageHeight = Integer.parseInt(resources.getMessage("guestbook.image.height"));
		int guestBookImageWidth = Integer.parseInt(resources.getMessage("guestbook.image.width"));
		
		try {
			// Here we will access path from root of the application. Because
			// the path here will be later appended by the actual path from
			// where the file is being read.
			String pathToRead = "/";

			String absoluteFileReadPath = getServlet().getServletConfig()
					.getServletContext().getRealPath(pathToRead);

			// Input file to get file with original name
			File inputImageFile = new File(absoluteFileReadPath + 
					imageDetails[1]);
			
			FileInputStream fileInputStream = new FileInputStream(inputImageFile);

			byte[] fileContent = new byte[(int) inputImageFile.length()];

			fileInputStream.read(fileContent);

			fileInputStream.close();
			
			inputImageFile.delete();
			
			/*if(inputImageFile.delete()) {
				System.out.println("Temporary uploaded file deleted......");
			}*/
			
			String fileNameToBeWrite;
			
			Long imageOrder = 0L;
			
			if(imageDetails.length > 2) {
				imageOrder = Long.parseLong(imageDetails[imageDetails.length - 1]);
				fileNameToBeWrite = "eregister-photo-" + form.getCaseId() + "-" + form.getCompanyId() + "-" + imageOrder + ".jpg";
			} else {
				fileNameToBeWrite = "eregister-photo-" + form.getCaseId() + "-" + form.getCompanyId() + "-" + imageDetails[0] + ".jpg";
			}
			
			String pathToWrite = FileUtil.pathForFileUpload(sessionUser);

			File originalFileDirectory = new File(nfsDirectory + pathToWrite + "originalFile/");
			File thumbnailDirectory = new File(nfsDirectory + pathToWrite + "thumbnail/");
			File guestBookImageDirectory = new File(nfsDirectory + pathToWrite + "guestBook/");
			
			if(!originalFileDirectory.exists()) {
				originalFileDirectory.mkdirs();
			}
			if(!thumbnailDirectory.exists()) {
				thumbnailDirectory.mkdirs();
			}
			if(!guestBookImageDirectory.exists()) {
				guestBookImageDirectory.mkdirs();
			}
			
			File outputImageFile = new File(originalFileDirectory, fileNameToBeWrite);
			File thumbnailImageFile = new File(thumbnailDirectory, fileNameToBeWrite);
			File guestBookImageFile = new File(guestBookImageDirectory, fileNameToBeWrite);
			
			if(outputImageFile.exists()) {
				outputImageFile.delete();
			}
			if(thumbnailImageFile.exists()) {
				outputImageFile.delete();
			}
			if(guestBookImageFile.exists()) {
				outputImageFile.delete();
			}

			fileOutputStream = new FileOutputStream(outputImageFile);

			// Write cropped image to NFS.
			fileOutputStream.write(fileContent);

			fileOutputStream.close();
			
			fileOutputStream = new FileOutputStream(thumbnailImageFile);
			fileOutputStream.write(FileUtil.resizeImage(fileContent, thumbnailDim, thumbnailDim));
			fileOutputStream.close();
			
			fileOutputStream = new FileOutputStream(guestBookImageFile);
			fileOutputStream.write(FileUtil.resizeImage(fileContent, guestBookImageWidth, guestBookImageHeight));
			fileOutputStream.close();
			
			UploadedFileDTO data = new UploadedFileDTO();
			
			data.setCaseId(form.getCaseId());
			data.setCompanyId(form.getCompanyId());
			// data.setParentId(eRegisterBookId);
			data.setFileName(fileNameToBeWrite);
			data.setFilePath(pathToWrite);
			data.setFileType(new MimetypesFileTypeMap().getContentType(outputImageFile));
			data.setParentTableName("eregister");
			
			UploadedFileDAO uploadFileDaoShare = new UploadedFileDAO(DAO.DB_FDMSSHARE);
			//UploadedFileDAO uploadFileDaoCompany = new UploadedFileDAO(sessionUser);
			
			data.setParentId(registerIdShare);
			uploadFileDaoShare.addUploadedFile(data);
			
			mappingDtoShare = new ERegisterImageMappingDTO();
			
			mappingDtoShare.setCaseId(data.getCaseId());
			mappingDtoShare.setCompanyId(data.getCompanyId());
			mappingDtoShare.setImageId(data.getFileId());
			mappingDtoShare.setUploadedImageFlag(true);
			mappingDtoShare.setImageOrder(imageOrder);
			mappingDtoShare.setImageBelongsTo(imageDetails[0]);
			
			//data.setParentId(registerIdCompany);
			//uploadFileDaoCompany.addUploadedFile(data);
			
			// File Id from company database.
			//mappingDtoShare.setImageId(data.getFileId());
			
			//ERegisterImageMappingDAO mappingDaoCompany = new ERegisterImageMappingDAO(sessionUser);
			
			//mappingDaoCompany.addImageMapping(mappingDtoShare);

		} catch (Exception ex) {
			logger.error("Exception in ProcessERegisterBook:processUpload()", ex);
		}
		
		return mappingDtoShare;
	}
	
	private int calculateOrder(Long imageIdFromDto, Long[] presentationImageIds) {
		int order = 0;

		for(long imageId : presentationImageIds) {
			if(imageIdFromDto != null && imageId == imageIdFromDto) {
				return ++order;
			}
			
			++order;
		}
		
		return order;
	}
	
}