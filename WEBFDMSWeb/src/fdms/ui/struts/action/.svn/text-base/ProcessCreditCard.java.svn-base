/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 * CJongs
 */
package fdms.ui.struts.action;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;


import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.aldorassist.webfdms.model.CreditcardDTO;
import com.aldorsolutions.webfdms.admin.user.bean.UserManagerBean;
import com.aldorsolutions.webfdms.beans.DbLocation;
import com.aldorsolutions.webfdms.beans.DbUserSession;
import com.aldorsolutions.webfdms.beans.FdmsDb;
import com.aldorsolutions.webfdms.database.DatabaseTransaction;
import com.aldorsolutions.webfdms.database.PersistenceException;
import com.aldorsolutions.webfdms.reporting.dao.CreditcardDAO;
import com.aldorsolutions.webfdms.util.SessionHelpers;
import com.easypay.api.EasyPayAPI;
import com.easypay.api.EasyPayAPISoap;

import fdms.ui.struts.form.CreditCardForm;


/** 
 * MyEclipse Struts
 * Creation date: 04-17-2007
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 * @struts.action-forward name="failed" path="/login.jsp"
 * @struts.action-forward name="success" path="/main.jsp"
 */
public class  ProcessCreditCard extends Action {
	/*
	 * Generated Methods
	 */
	

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm actionForm, HttpServletRequest request,
			HttpServletResponse response) throws javax.servlet.ServletException, java.io.IOException {
		

		CreditCardForm form = (CreditCardForm) actionForm;
		HttpSession session = request.getSession();
		DbUserSession sessionUser = SessionHelpers.getUserSession(request);
		String ccNumber= form.getCardNumber();
        CreditcardDTO creditcard = new CreditcardDTO();
        CreditcardDAO creditcardDao = new CreditcardDAO(sessionUser);
        
        creditcard.setFirstname(form.getFirstname());
        creditcard.setLastname(form.getLastname());
        creditcard.setCardNumber("xxx-"+form.getCardNumber().substring(form.getCardNumber().length()-4, form.getCardNumber().length()));
        creditcard.setExpirationDate(form.getExpirationDate());
        creditcard.setCvv(form.getCvv());
        creditcard.setAddress(form.getAddress());
        creditcard.setCity(form.getCity());
        creditcard.setState(form.getState());
        creditcard.setZip(form.getZip());
        creditcard.setAmount(form.getAmount());
        long createdTimestamp = System.currentTimeMillis();
        creditcard.setTranDate(createdTimestamp);
        creditcard.setVitalsId(form.getVitalsId());
        DbLocation dbLocation = new DbLocation();
        DatabaseTransaction t = null;
        try {
            t = (DatabaseTransaction)DatabaseTransaction.getTransaction(sessionUser);
            dbLocation = FdmsDb.getInstance().getLocation(t, sessionUser.getLocationId());
            
            if (dbLocation != null) {
            	creditcard.setMerchandiseId(dbLocation.getMerchandiseId());
            }else {
            	DbLocation[] dbLocations = FdmsDb.getInstance().getLocationsForRegion(t, sessionUser.getRegion());
            	if (dbLocations.length > 0) {
            		UserManagerBean userManagerBean = new UserManagerBean();
            		String[] locationIds = userManagerBean.getUserLocationIds( sessionUser.getId() );
            		boolean found = false;
            		for (int i=0; i < locationIds.length; i++) {
            			
            			for (int j=0; j< dbLocations.length; j++){
            				if (Integer.valueOf(locationIds[i]) == dbLocations[j].getId()){
            					dbLocation = FdmsDb.getInstance().getLocation(t, dbLocations[j].getId());
            					found = true;
            					break;
            				}
            			}
            			if (found){
            				break;
            			}
            		}
            		
            		creditcard.setMerchandiseId(dbLocation.getMerchandiseId());
            	}
            }
 
            
			creditcardDao.addCreditcard(creditcard);
			
		} catch(PersistenceException pe) {
      
        } catch(Exception pe) {
         
        } finally {
        	if (t != null) {
            	t.closeConnection();
            	t = null;
            }
        }
        
       if (creditcard.getMerchandiseId()> 0) { 
	       System.setProperty("javax.net.ssl.trustStore", "D:\\project\\AldorSolutions\\source\\FDMS v3.1\\WEBFDMSLib\\src\\jssecacerts");
	 //      System.setProperty("javax.net.ssl.trustStorePasswd", "");
	//       System.setProperty("javax.net.ssl.trustStore", "jssecacerts");
	    /*   EasyPayAPI myApi = new EasyPayAPI();
	       EasyPayAPISoap mySoap = myApi.getEasyPayAPISoap();
	       String passkey = mySoap.authenticate("ALDORSLNS", "ALDOR#123sln");
//	       String passkey = api.getEasyPayAPISoap().authenticate("ALDORSLNS", "ALDOR#123sln");
	       String firstName = "firstName";
	       String lastName = "lastName";
	       String cardNo = "5454545454545454"; //no dashes or space
	       String expirationDate = "0913"; // MMYY format
	       String cvv = "333"; //Three digit code
	       String street = "100 Street st";
	       String city = "city";
	       String state = "state";
	       String zip = "75074";
	       String refID = "";
	       float amount = 10;
	       int merchID = 1; //cannot be 0
	       String user = "user";*/
	       
	       
	       EasyPayAPI myApi = new EasyPayAPI();
	       EasyPayAPISoap mySoap = myApi.getEasyPayAPISoap();
	       String passkey = mySoap.authenticate("ALDORSLNS", "ALDOR#123sln");
//	       String passkey = api.getEasyPayAPISoap().authenticate("ALDORSLNS", "ALDOR#123sln");
	       String firstName = creditcard.getFirstname(); // "CARD";
	       String lastName = creditcard.getLastname(); // "TEST";
	       String cardNo = ccNumber; // "4111111111111111"; //no dashes or space
	       String expirationDate = creditcard.getExpirationDate(); // "1212"; // MMYY format
	       String cvv = creditcard.getCvv(); //"111"; //Three digit code
	       String street = creditcard.getAddress(); // "207 West Manor Drive";
	       String city = creditcard.getCity(); //"Chesterfield";
	       String state = creditcard.getState(); //"MO";
	       String zip = creditcard.getZip(); //"63017";
	       String refID = "" ; 
	       float amount = Float.parseFloat(creditcard.getAmount()); //10; 
	       int merchID = 1; //cannot be 0
	       String user = "AldorTest";
	       String description= "Test Descripption";
	       
	       String responseCard = mySoap.creditCardSale(passkey
	    		   , firstName
	    		   , lastName
	    		   , cardNo
	    		   , expirationDate
	    		   , cvv
	    		   , street
	    		   , city
	    		   , state
	    		   , zip
	    		   , refID
	    		   , amount
	    		   , merchID
	    		   , description
	    		   , user);
	       
	       String erorDetail = mySoap.creditCardGetErrorExplanation(passkey, responseCard);
	       String msg = "";
	       
	       if (erorDetail.compareToIgnoreCase("Does not apply.") == 0){
	    	   msg = "Successful";
	       }else {
	    	   msg = erorDetail;
	       }
       
	       String approvalCode = mySoap.creditCardGetApprovalCode(passkey, responseCard);
//			
	       form.setResponseCard(responseCard);
	       form.setErorDetail(msg);
	       form.setApprovalCode(approvalCode);
	       
	       //update the credit card with status
	       try {
	    	   creditcard.setResponseCard(responseCard);
	    	   creditcard.setErrorDetail(erorDetail);
	    	   creditcard.setApprovalCode(approvalCode);
	    	   creditcardDao.updateCreditcard(creditcard);
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	       
	       
       }
	   return ( mapping.findForward("showCreditCardStatus") );
	}
	
}