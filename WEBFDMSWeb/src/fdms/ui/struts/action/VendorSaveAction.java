/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package fdms.ui.struts.action;

import java.util.ArrayList;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionError;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;


import com.aldorassist.webfdms.delegate.InvoiceManager;

import com.aldorsolutions.webfdms.admin.user.model.UserLocaleDTO;
import com.aldorsolutions.webfdms.admin.user.model.UserLocationDTO;
import com.aldorsolutions.webfdms.beans.DbApAccount;
import com.aldorsolutions.webfdms.beans.DbUserSession;
import com.aldorsolutions.webfdms.checkwriter.dao.ApVendorDAO;
import com.aldorsolutions.webfdms.checkwriter.dao.ApVendorLocationDAO;
import com.aldorsolutions.webfdms.checkwriter.model.ApVendorDTO;
import com.aldorsolutions.webfdms.checkwriter.model.ApVendorLocationDTO;
import com.aldorsolutions.webfdms.checkwriter.model.ApVendorLocationDisplayDTO;
import com.aldorsolutions.webfdms.util.FormatNumber;
import com.aldorsolutions.webfdms.util.SessionValueKeys;

import fdms.ui.struts.form.VendorEditForm;
import fdms.ui.struts.form.VendorEditListForm;

/** 
 * MyEclipse Struts
 * Creation date: 06-25-2007, 030309
 * 
 * XDoclet definition:
 * @struts.action path="/acctSaveVendors" name="acctEditVendorsForm" input="/acct/acctEditVendors.jsp" scope="request" validate="true"
 * @struts.action-forward name="vendorList" path="/acct/acctListVendors.jsp" redirect="true"
 */
public class VendorSaveAction extends Action {
	/*
	 * Generated Methods
	 */

	private Logger logger = Logger.getLogger(ShowVendorEditDisplay.class.getName());	
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		
		VendorEditForm vendorEditForm = (VendorEditForm) form;
		HttpSession session =  request.getSession();
        DbUserSession user = (DbUserSession) session.getAttribute(SessionValueKeys.DB_USER);
        ActionErrors errors = new ActionErrors();	 
		if ( "Cancel".equals(vendorEditForm.getDirection() ) ) {

	    	
//	    	VendorEditListForm	formList = (VendorEditListForm)session.getAttribute( "VendorEditListForm" );
//	    	formList.setVendors(formList.getVendors());
	    	
	    	
			return mapping.findForward("ShowVendorEditJsp");
		}else if ( "Delete".equals(vendorEditForm.getDirection() ) ) {
			long vendorID = vendorEditForm.getVendorID();
			if ( vendorID <=0 ) {
				
				String missingLoc = getResources(request).getMessage("error.acct.vendor.missingVendor");
				
				errors.add ( ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.exception", missingLoc) );
				saveErrors(request, errors);
				
				return ( mapping.findForward("vendorEdit") );
			}
			else {
				ApVendorDAO vendorDao = new ApVendorDAO(user);
				 ApVendorDTO vendor = new ApVendorDTO();
				 
				 vendor = vendorDao.getApVendor(vendorEditForm.getVendorID());
				 vendor.setDeleteCode("D");
				 vendorDao.updateApVendor(vendor);
				 
				
			}
			session.removeAttribute("VendorEditForm");
			session.removeAttribute("VendorEditListForm");

			return mapping.findForward("ShowVendorEditJsp");
		}
		
		
		
		if ( "Add Location".equals(vendorEditForm.getSubmitType()) ) {
			
			try {	
				saveLocation ( vendorEditForm, user, session, request, errors ); 
			}
			 catch ( Exception e ) {
					logger.debug(e.getMessage(), e);
			}
			 session.removeAttribute("VendorEditListForm");
			return mapping.getInputForward();
		}
		
		//ApVendorDAO vendorDao = new ApVendorDAO(user);
		long vendorID = vendorEditForm.getVendorID();
		
		if ( vendorID < 0 ) {
			String missingLoc = getResources(request).getMessage("error.acct.vendor.missingVendor");
			
			//errors.add ( ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.exception", missingLoc) );
			 errors.add(ActionErrors.GLOBAL_ERROR, new ActionError("error.exception",missingLoc));
			saveErrors(request, errors);
			session.removeAttribute("VendorEditListForm");
			return ( mapping.findForward("vendorEdit") );
			//ActionForward fwd = mapping.findForward("ShowVendorEditDisplayJsp");
			//return new ActionForward(mapping.getInput());
		}
		    
		if (vendorID == 0) {
			try {	
				saveLocation ( vendorEditForm, user, session, request, errors ); 
			}
			 catch ( Exception e ) {
					logger.debug(e.getMessage(), e);
			}
		}
		else {
			try {
				saveVendor(vendorEditForm, user, session, request, errors);
			}
			 catch ( Exception e ) {
					logger.debug(e.getMessage(), e);
			}
		}
		if (!errors.isEmpty()){
			//return ( mapping.findForward("vendorEdit") );
			
			//ActionForward fwd = mapping.findForward("ShowVendorEditDisplayJsp");
			session.removeAttribute("VendorEditListForm");
			ActionForward fwd = mapping.findForward("vendorEdit");
//			//String path = fwd.getPath();
//			String path = "showVendorEditDisplay.do?vendorID=";
//			path += vendorID;
			//saveErrors(request, errors );
			return new ActionForward(mapping.getInput());
			
		}
		session.removeAttribute("VendorEditForm");
		session.removeAttribute("VendorEditListForm");

		return mapping.findForward("ShowVendorEditJsp");
		 
	}
	
	private void saveVendor (VendorEditForm vendorEditForm, DbUserSession user, 
			HttpSession session, HttpServletRequest request,ActionErrors errors ) throws Exception {
		
		ApVendorDAO vendorDao = new ApVendorDAO(user);
		//long vendorID = acctEditVendorsForm.getVendorID();		
		
		boolean duplicateCode = false;
		duplicateCode = checkVendorCode(user, vendorEditForm);
		boolean containQuote = false;
	    containQuote = (vendorEditForm.getName().contains("\'") || vendorEditForm.getName().contains("\""));
	    if ( !duplicateCode && !containQuote) {
	    
	    	ApVendorDTO vendor = new ApVendorDTO();
	    
	    	vendor.setVendorCode(vendorEditForm.getVendorCode());
			vendor.setAddr1(vendorEditForm.getAddr1());
			vendor.setAddr2(vendorEditForm.getAddr2());
			vendor.setCityState(vendorEditForm.getCityState());
			vendor.setVendorState(vendorEditForm.getVendorState());	
			vendor.setVendorCountry(vendorEditForm.getVendorCountry());			
			vendor.setContactName(vendorEditForm.getContactName());
			vendor.setDeleteCode(vendorEditForm.getDeleteCode());
			vendor.setEmailAddr(vendorEditForm.getEmailAddr());
			vendor.setName(vendorEditForm.getName());
			vendor.setNotes(vendorEditForm.getNotes());
			vendor.setPhone(vendorEditForm.getPhone());
			vendor.setPhone2(vendorEditForm.getPhone2());		
			vendor.setPostalCode(vendorEditForm.getPostalCode());
			//vendor.setDefaultAcct(FormatNumber.parseInteger(acctEditVendorsForm.getDefaultAcct()));
			vendor.setLocaleID(vendorEditForm.getLocaleID());
			vendor.setLocationID(vendorEditForm.getLocationID());
		
			
			vendor.setVendorID(vendorEditForm.getVendorID());
			vendor.setInternalVendor( Boolean.parseBoolean(vendorEditForm.getInternalVendor()) );
			
			vendor.setFax(vendorEditForm.getFax());
			vendor.setAccountNumber(vendorEditForm.getAccountNumber());
			vendor.setDiscountPercentage(vendorEditForm.getDiscountPercentage());
			//vendor.setDiscountIfInDays(acctEditVendorsForm.getDiscountIfInDays());
			//vendor.setDiscountDueInDays(acctEditVendorsForm.getDiscountDueInDays());
			vendor.setDiscountIfInDays(0);
			vendor.setDiscountDueInDays(0);
			vendor.setVendor1099Type(vendorEditForm.getVendor1099Type());
			//vendor.setVendor1099Payment(acctEditVendorsForm.getVendor1099Payment());
			float initValue = 0;
			vendor.setVendor1099Payment(initValue);
			vendor.setTaxID(vendorEditForm.getTaxID());
			vendor.setApprovedVendor(vendorEditForm.getApprovedVendor());
			vendor.setCreditLimit(vendorEditForm.getCreditLimit());
			vendor.setDefaultAcctID((int)vendorEditForm.getApAccountID());


		    if (vendor.getVendorID() == 0){
				long localeID = 0;
				long locationID = 0;		
				if ( vendorEditForm.getLocaleIds().length > 0 ) {
					localeID = FormatNumber.parseLong(vendorEditForm.getLocaleIds()[0]);
				}
				
				if ( vendorEditForm.getLocationIds().length > 0 ) {
					locationID = FormatNumber.parseLong(vendorEditForm.getLocationIds()[0]);
				}			
				vendor.setLocaleID(localeID);
				vendor.setLocationID(locationID);			    	
		       vendorDao.addApVendor(vendor);	
		    }   else {
				vendorDao.updateApVendor(vendor);	
				
				// update each apvendorlocations to have the same defAcctID
		        ApVendorLocationDAO vendorLocDAO = new ApVendorLocationDAO(user);
		        ArrayList <ApVendorLocationDTO> vendorLocs = vendorLocDAO.getApVendorLocationByVendorID(vendor.getVendorID());
		        for (ApVendorLocationDTO vendorLocForUser : vendorLocs) {
		        	vendorLocForUser.setDefaultAcctID(vendor.getDefaultAcctID());
		        	vendorLocDAO.updateApVendorLocation(vendorLocForUser);
		    	  }	  
				
		    }
	    } else {
				
				if (duplicateCode) {
					//errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.acct.vendor.DuplicateCode", "") );
					 errors.add(ActionErrors.GLOBAL_ERROR, new ActionError("error.acct.vendor.DuplicateCode"));
				}
				if (containQuote) {
					errors.add(ActionErrors.GLOBAL_ERROR, new ActionError("error.acct.vendor.Name"));
				}
				saveErrors(request, errors);	
		}    
		    
	}
	
	private void saveLocation (VendorEditForm vendorEditForm, DbUserSession user, 
			HttpSession session, HttpServletRequest request,ActionErrors errors  ) throws Exception {
		
		ArrayList vendorLocs = (ArrayList) session.getAttribute("ADMIN_VENDOR_LOCATIONS");
		ArrayList <UserLocaleDTO> locales = (ArrayList) session.getAttribute("ADMIN_LOCALES");
		ArrayList <UserLocationDTO> locations = (ArrayList) session.getAttribute("ADMIN_LOCATIONS");	

		//ActionErrors errors = new ActionErrors();	    	
		long localeID = -1;
		long locationID = -1;
		
		//long defaultAcctID = FormatNumber.parseLong(acctEditVendorsForm.getNewDefaultAcctNum());
		
		if ( vendorEditForm.getLocaleIds().length > 0 ) {
			localeID = FormatNumber.parseLong(vendorEditForm.getLocaleIds()[0]);
		}
		
		if ( vendorEditForm.getLocationIds().length > 0 ) {
			locationID = FormatNumber.parseLong(vendorEditForm.getLocationIds()[0]);
		}
		
		ApVendorLocationDTO vendorLoc = new ApVendorLocationDTO();
		
		ApVendorLocationDAO vendorLocDao = new ApVendorLocationDAO(user);
		ArrayList<ApVendorLocationDTO> locationlist = (ArrayList) vendorLocDao.getApVendorLocationByVendorID(vendorEditForm.getVendorID());
		
		boolean hasSet = false;
		if (vendorEditForm.getVendorID() != 0){
			for (ApVendorLocationDTO location: locationlist ) {
				if (location.getLocaleID() == localeID && location.getLocationID() == locationID) {
					hasSet = true;
					break;
				}
			}
		}
		
		boolean duplicateCode = false;
		duplicateCode = checkVendorCode(user, vendorEditForm);
		boolean containQuote = false;
	    containQuote = (vendorEditForm.getName().contains("\'") || vendorEditForm.getName().contains("\""));
	        
		
		//vendorLoc.setDefaultAcct(vendorLocEditForm.getDefaultAcct());
		if (!hasSet && !duplicateCode && !containQuote) {		
		
			ApVendorDAO vendorDao = new ApVendorDAO(user);
			if (vendorEditForm.getVendorID() == 0){
				
				//save the vendor either new vendor or edit it.
				try {
					saveVendor(vendorEditForm, user, session, request, errors);
				}
				 catch ( Exception e ) {
						logger.debug(e.getMessage(), e);
				}				
				//ArrayList <ApVendorDTO> vendors = vendorDao.getApVendorByName(true,vendorEditForm.getName());
				ArrayList <ApVendorDTO> vendors = vendorDao.getApVendorByCode(true,vendorEditForm.getVendorCode());
				long vendorID = 0;
				for (ApVendorDTO vendor : vendors) {
					vendorID = vendor.getVendorID();
				}
				vendorLoc.setVendorID(vendorID);
			}
			else {
			        vendorLoc.setVendorID(vendorEditForm.getVendorID());	
			}	
		
	        
	        vendorLoc.setDefaultAcctID((int) vendorEditForm.getApAccountID());
	        vendorLoc.setLocaleID(localeID);
	        vendorLoc.setLocationID(locationID);
	        vendorLoc.setVendorLocationID(0);
	    
			ApVendorLocationDisplayDTO display = new ApVendorLocationDisplayDTO();
	    	display.setVendorLocationID( vendorLoc.getVendorLocationID() );
	    	//display.setDefaultAcct( vendorLoc.getDefaultAcct() );
	    	display.setDefaultAcct( "" );
	    	display.setLocaleName( String.valueOf(vendorLoc.getLocaleID()) );
	    	display.setLocationName( String.valueOf(vendorLoc.getLocationID()) );
	    	  	
	    	for ( UserLocationDTO loc : locations ) {
	    		long locID = loc.getLocationId();
	    		if ( locID == vendorLoc.getLocationID() ) {
	    			display.setLocationName(loc.getName());
	    			break;
	    		}
	    	}
	    	
	    	for ( UserLocaleDTO loc : locales ) {
	    		long locID = FormatNumber.parseLong(loc.getLocaleId());
	    		if ( locID == vendorLoc.getLocaleID() ) {
	    			display.setLocaleName(loc.getName());
	    			break;
	    		}
	    	}
	    	
	    	//This is for preset the default account Number to the default of vendor for all location
			try {
				InvoiceManager imvMgr = new InvoiceManager();
				DbApAccount account = imvMgr.getAccount(request, vendorEditForm.getApAccountID());
				//display.setDefaultAcct(account.getAccountNumber());
				vendorLoc.setDefaultAcctID((int) vendorEditForm.getApAccountID());
	        	display.setDefaultAcct(account.getAccountNumber());
	        	display.setDefaultAcctDesc(account.getDescription());
			
			} catch ( Exception e ) {
				logger.debug("Exception: ", e);
				//errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.exception", e.getMessage()) );
				 errors.add(ActionErrors.GLOBAL_ERROR, new ActionError("error.exception", e.getMessage()));
				saveErrors(request, errors);
			}       	
	    	
	        ApVendorLocationDAO vendorLocDAO = new ApVendorLocationDAO (user);
	        vendorLocDAO.addApVendorLocation(vendorLoc);   
	        ApVendorLocationDTO  vendorLocation = vendorLocDAO.getApVendorLocationByVendorIDLocaleIDLocationID(vendorLoc.getVendorID(),vendorLoc.getLocaleID(),vendorLoc.getLocationID());
	        display.setVendorLocationID(vendorLocation.getVendorLocationID());
	        vendorLocs.add(display);
	        vendorEditForm.setNewDefaultAcctNum("");
		}
		else {
			if (hasSet) {
				//errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.acct.vendor.DuplicateLocation", "") );
				 errors.add(ActionErrors.GLOBAL_ERROR, new ActionError("error.acct.vendor.DuplicateLocation"));
			}
			if (duplicateCode) {
				//errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.acct.vendor.DuplicateCode", "") );
				 errors.add(ActionErrors.GLOBAL_ERROR, new ActionError("error.acct.vendor.DuplicateCode"));
			}
			if (containQuote) {
				errors.add(ActionErrors.GLOBAL_ERROR, new ActionError("error.acct.vendor.Name"));
			}
			saveErrors(request, errors);	
		}
	}
	
	private boolean checkVendorCode(DbUserSession user,VendorEditForm vendorEditForm){
		ApVendorDAO vendorDaoC = new ApVendorDAO(user);
		boolean duplicateCode = false;
		ArrayList<ApVendorDTO> vendorlistC = new ArrayList <ApVendorDTO>();
		vendorlistC =	vendorDaoC.getApVendorByCode(true,vendorEditForm.getVendorCode());
		if (vendorlistC.size() > 0) {
			if (vendorEditForm.getVendorID() == 0) {
				duplicateCode = true;
			}else {
				for (ApVendorDTO vendor : vendorlistC) {
					if(vendor.getVendorID() == vendorEditForm.getVendorID() ) {
						continue;
					} else {
						if(vendor.getVendorCode().compareToIgnoreCase(vendorEditForm.getVendorCode())== 0 ){
							duplicateCode = true;
						}
					}
				}
			}	
		}
		return duplicateCode;
	}
	
	
}		
		
