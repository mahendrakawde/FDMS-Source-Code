/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 * CJongs
 */
package fdms.ui.struts.action;

import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;

import com.aldorassist.webfdms.model.LocaleDTO;
import com.aldorsolutions.webfdms.beans.DbArrangers;
import com.aldorsolutions.webfdms.beans.DbCase;
import com.aldorsolutions.webfdms.beans.DbLocation;
import com.aldorsolutions.webfdms.beans.DbUser;
import com.aldorsolutions.webfdms.beans.DbUserSession;
import com.aldorsolutions.webfdms.beans.DbVitalsFirstCall;
import com.aldorsolutions.webfdms.beans.FdmsDb;
import com.aldorsolutions.webfdms.common.Constants;
import com.aldorsolutions.webfdms.database.DatabaseTransaction;
import com.aldorsolutions.webfdms.database.PersistenceException;
import com.aldorsolutions.webfdms.locale.bean.LocaleManagerBean;
import com.aldorsolutions.webfdms.util.CsvTable;
import com.aldorsolutions.webfdms.util.FormatNumber;
import com.aldorsolutions.webfdms.util.FormatString;
import com.aldorsolutions.webfdms.util.OptionsList;
import com.aldorsolutions.webfdms.util.SessionHelpers;
import com.aldorsolutions.webfdms.util.UtilSingleton;

import fdms.ui.struts.form.MovingCaseForm;


/** 
 * MyEclipse Struts
 * Creation date: 04-17-2007
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 * @struts.action-forward name="failed" path="/login.jsp"
 * @struts.action-forward name="success" path="/main.jsp"
 */
public class  ShowMovingCase extends Action {
	/*
	 * Generated Methods
	 */
	
	private Logger logger = Logger.getLogger(ShowMovingCase.class.getName());

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm actionForm, HttpServletRequest request,
			HttpServletResponse response) throws javax.servlet.ServletException, java.io.IOException {
		

		MovingCaseForm form = (MovingCaseForm) actionForm;
		ActionErrors errors = new ActionErrors();
		HttpSession session = request.getSession();
		DbUserSession sessionUser = SessionHelpers.getUserSession(request);
		int vitalsId = SessionHelpers.getVitalsIdFromSession(request, sessionUser);
		String operate = request.getParameter("direction");
		if (operate == null) {
			operate = "edit";
		}
		
		
		//set initial
		form.setVitalsId(vitalsId);
		form.setHaveMessage("N");
//		form.setMessage("Successfully Save!");
		DbCase theCase = null;
		DbVitalsFirstCall firstCall = null;
		DatabaseTransaction t = null;
		try {
			t = (DatabaseTransaction)DatabaseTransaction.getTransaction(sessionUser);
			theCase 	= FdmsDb.getInstance().getCase(t,vitalsId);
			firstCall	= FdmsDb.getInstance().getVitalsFirstCall(t,vitalsId);
			if (operate.compareToIgnoreCase("new") == 0 || form.getDirectionType().compareToIgnoreCase("reset") == 0){
				initialForm(vitalsId, theCase, firstCall, form, request,sessionUser,t, session, errors);
				SessionHelpers.setArrangerListInSession(request);
			} else if (operate.compareToIgnoreCase("edit") == 0){
				if (form.getDirectionType().compareToIgnoreCase("LocaleEdit")==0){
					changeLocale(form, sessionUser,session,errors,request,Integer.parseInt(form.getUserLocaleId()));
					SessionHelpers.setArrangerListInSession(request);
					emptyForm(form);
				} else if (form.getDirectionType().compareToIgnoreCase("LocationEdit")==0){
					changeLocation(form,sessionUser,Integer.parseInt(form.getUserLocationId()),errors,request);
				} else if (form.getDirectionType().compareToIgnoreCase("save")==0){
					if (theCase.getLocale() != Integer.parseInt(form.getUserLocaleId()) || theCase.getChapelNumber() != Integer.parseInt(form.getUserLocationId())){
						FdmsDb.getInstance().transferCaseToNewLocation(vitalsId, Integer.parseInt(form.getUserLocaleId()), 
								Integer.parseInt(form.getUserLocationId()), sessionUser, Integer.parseInt(form.getDirector()),
								form.isFacilitySame(),form.getFacilityName(),form.getFacilityStreet(),form.getFacilityCity(),form.getFacilityState(),
								form.getFacilityZip(),form.getFacilityPhone(),form.getFacilityLicense(),t);
						t.save();
					}
				}
			}
			
			
		} catch(PersistenceException pe) {
            logger.error("Persistence Exception in ShowMovingCase.doPerform. " + pe);
        } catch(Exception pe) {
            logger.error("Exception in ShowMovingCase.doPerform. ", pe);
        } finally {
            if (t != null) {
            	t.closeConnection();
            	t = null;
            }
        }
		
        if (form.getDirectionType()!= null && (form.getDirectionType().compareToIgnoreCase("save")==0 || form.getDirectionType().compareToIgnoreCase("cancel")==0)){
        	try {
    			t = (DatabaseTransaction)DatabaseTransaction.getTransaction(sessionUser);
    			theCase 	= FdmsDb.getInstance().getCase(t,vitalsId);
    			firstCall	= FdmsDb.getInstance().getVitalsFirstCall(t,vitalsId);
    			initialForm(vitalsId, theCase, firstCall, form, request,sessionUser,t, session, errors);
    			SessionHelpers.setArrangerListInSession(request);
    			
    			form.setMessage("Successfully Saved! Please refresh overview page.");
    			form.setHaveMessage("Y");
    		} catch(PersistenceException pe) {
                logger.error("Persistence Exception in ShowMovingCase.doPerform. " + pe);
            } catch(Exception pe) {
                logger.error("Exception in ShowMovingCase.doPerform. ", pe);
            } finally {
                if (t != null) {
                	t.closeConnection();
                	t = null;
                }
            }	
        }
        request.setAttribute("movingCaseForm",form);
		return ( mapping.findForward("showMovingCaseJsp") );
	}
	
	private void initialForm(int vitalsId, DbCase theCase,
			DbVitalsFirstCall firstCall, MovingCaseForm form,
			HttpServletRequest request, DbUserSession sessionUser, DatabaseTransaction t, HttpSession session, ActionErrors errors) {
		
		form.setDirectionType("edit");
		form.setFirstname(theCase.getFirstName());
		form.setLastname(theCase.getLastName());
		form.setDirector(Integer.toString(firstCall.getArrangerID()));
		form.setChapelname(theCase.getChapelLocation());
		form.setOrigDirector(firstCall.getArrangerName());
		form.setOrigFacility(firstCall.getFacilityName());
		form.setUserLocaleId(Integer.toString(theCase.getLocale()));
		
		if (firstCall.getFacilitySameAsChapel() != null && firstCall.getFacilitySameAsChapel().equals("Y")) {
			form.setFacilitySame(true);
		} else {
			form.setFacilitySame(false);
		}
		
		form.setFacilityName(firstCall.getFacilityName());
		form.setFacility(firstCall.getFacilityName());
		form.setFacilityStreet(firstCall.getFacilityStreet());
		form.setFacilityCity(CsvTable.getField(firstCall.getFacilityCityStZip(), 1));
		form.setFacilityState(CsvTable.getField(firstCall.getFacilityCityStZip(), 2));
		form.setFacilityZip(FormatString.formatZip(sessionUser.getLocaleCountry(), CsvTable.getField(firstCall.getFacilityCityStZip(), 3)));
		form.setFacilityPhone(FormatString.formatPhone(firstCall.getFacilityPhone()));
		form.setFacilityLicense(firstCall.getFacilityLicenseNo());
		
		setChapel(form, theCase.getLocale(), sessionUser, errors, request);
		changeLocale(form, sessionUser,session,errors,request,Integer.parseInt(form.getUserLocaleId()));
		changeLocation(form,sessionUser,theCase.getChapelNumber(),errors,request);
		
		
	}

	
	private void emptyForm(MovingCaseForm form) {
		form.setFacilitySame(false);
		form.setFacilityName("");
		form.setFacility("");
		form.setFacilityStreet("");
		form.setFacilityCity("");
		form.setFacilityState("");
		form.setFacilityZip("");
		form.setFacilityPhone("");
		form.setFacilityLicense("");	
	}
	
	private void setChapel(MovingCaseForm form, int locationId, DbUserSession sessionUser, ActionErrors errors, HttpServletRequest request){
		DatabaseTransaction t = null;

		try {
			// Get a new database transaction.
			t = (DatabaseTransaction) DatabaseTransaction.getTransaction(sessionUser);

			DbLocation dbLocation = FdmsDb.getInstance().getLocation(t, locationId);
			if (dbLocation != null) {
				form.setChapelName(dbLocation.getName());
				form.setChapelStreet(dbLocation.getAddr1());
				form.setChapelCity(dbLocation.getCity());
				form.setChapelState(dbLocation.getState());
				form.setChapelZip(dbLocation.getZip());
				form.setChapelLicense(dbLocation.getLicenseNumber());
				form.setChapelPhone(FormatString.formatPhone(dbLocation.getPhone()));
			}
		} catch (PersistenceException ex) {
			errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.internal"));
            saveErrors(request, errors);
			logger.error("Persistence Exception in ShowMovingCase.doPerform. ", ex);
		} catch (Exception ex) {
			errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.internal"));
            saveErrors(request, errors);
			logger.error("Exception in ShowMovingCase.doPerform. ", ex);
		} finally {
			if (t != null) {
				t.closeConnection();
			}

		}	
		
	}
	
	private void changeLocation(MovingCaseForm form, DbUserSession sessionUser, int locationId, ActionErrors errors, HttpServletRequest request) {

		logger.debug("Updating userDefaultLocation : " + form.getUserLocationId());
		sessionUser.setLocationId(FormatNumber.parseInteger(form.getUserLocationId()));
		form.setUserLocationId(Integer.toString(locationId));
		setChapel(form, locationId, sessionUser, errors, request);

	}

	private void changeLocale(MovingCaseForm form, DbUserSession sessionUser, HttpSession session, ActionErrors errors, HttpServletRequest request, int localeId) {

		ArrayList userLocales = (ArrayList) session.getAttribute(Constants.USER_LOCALES);

		if (userLocales != null) {

			DatabaseTransaction t = null;
			DatabaseTransaction trans = null;

			try {
				// Get a new database transaction.
				String jndiLookup = UtilSingleton.getInstance().getUserDBLookup();

				t = (DatabaseTransaction) DatabaseTransaction.getTransaction(sessionUser, jndiLookup);
				trans = (DatabaseTransaction) DatabaseTransaction.getTransaction(sessionUser);

				DbUser user = (DbUser) sessionUser;

				t.addPersistent(user);

				user.setRegion(Integer.parseInt(form.getUserLocaleId()));
				sessionUser.setRegion(Integer.parseInt(form.getUserLocaleId()));

				LocaleManagerBean lmb = new LocaleManagerBean(user);
				LocaleDTO locale = lmb.getLocale(user.getRegion());

    			Locale myLocale = new Locale("en", locale.getCountry());
    			session.setAttribute( Constants.INTERNATIONAL_LOCALE, myLocale );
    			

    			form.setUserLocationId("-1");
				
				String[] locationIds = (String[]) session.getAttribute(Constants.USER_LOCATION_IDS);
				DbLocation[] dbLocations = FdmsDb.getInstance().getLocationsForRegion(trans, localeId);

				ArrayList <DbLocation> userLocaleLocs = new ArrayList <DbLocation>();

				if (dbLocations != null) {
					for (int i = 0; i < dbLocations.length; i++) {
						DbLocation loc = dbLocations[i];
						int locID = loc.getId();

						for (int x = 0; x < locationIds.length; x++) {
							int aLocID = Integer.parseInt(locationIds[x]);

							if (aLocID == locID) {
								userLocaleLocs.add(loc);
							}
						}

					}
				}
				
				
				session.setAttribute(Constants.USER_LOCATIONS, userLocaleLocs);
				form.setUserLocationId(String.valueOf(userLocaleLocs.get(0).getId()));
				changeLocation(form, sessionUser, Integer.parseInt(form.getUserLocationId()),errors,request);
				
				t.save();
				

			} catch (PersistenceException ex) {
				errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.internal"));
	            saveErrors(request, errors);
				logger.error("Persistence Exception in ShowMovingCase.doPerform. ", ex);
			} catch (Exception ex) {
				errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.internal"));
	            saveErrors(request, errors);
				logger.error("Exception in ShowMovingCase.doPerform. ", ex);
			} finally {
				if (t != null) {
					t.closeConnection();
				}

				if (trans != null) {
					trans.closeConnection();
				}
			}

		} else {
			logger.debug("Unable to find USER_LOCALES in session");
		}

		
	}
	
    private void changeDirector(DbVitalsFirstCall firstCall, MovingCaseForm form, DbUserSession sessionUser, DatabaseTransaction t,HttpServletRequest request  ){
    	form.setDirector(String.valueOf(firstCall.getArrangerID()));
		DbArrangers arranger = FdmsDb.getInstance().getArrangerInactive(t,sessionUser.getRegion(),firstCall.getArrangerID());
		if(arranger != null ){
			List list = (List)request.getSession().getAttribute("directorList");
			 if(list == null){
				 list = new ArrayList();
			 }
			 list.add(new OptionsList(Integer.toString(arranger.getId()) ,arranger.getName()));
			 request.getSession().setAttribute("directorList",list); 
		}
    }
	
}