/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 * CJongs
 */
package fdms.ui.struts.action;

import java.io.File;
import java.io.FileOutputStream;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.util.MessageResources;
import org.apache.struts.util.MessageResourcesFactory;
import org.apache.struts.util.PropertyMessageResourcesFactory;

import com.aldorassist.webfdms.dao.ERegisterBackgroundThemeDAO;
import com.aldorassist.webfdms.dao.ERegisterImageMappingDAO;
import com.aldorassist.webfdms.dao.ERegisterThemeDAO;
import com.aldorassist.webfdms.dao.PresentationImageDAO;
import com.aldorassist.webfdms.dao.ServiceScreenThemeDAO;
import com.aldorassist.webfdms.model.ERegisterBackgroundThemeDTO;
import com.aldorassist.webfdms.model.ERegisterBookDTO;
import com.aldorassist.webfdms.model.ERegisterThemeDTO;
import com.aldorassist.webfdms.model.ServiceScreenThemeDTO;
import com.aldorsolutions.webfdms.beans.DbCase;
import com.aldorsolutions.webfdms.beans.DbLocation;
import com.aldorsolutions.webfdms.beans.DbObituary;
import com.aldorsolutions.webfdms.beans.DbServices;
import com.aldorsolutions.webfdms.beans.DbUserSession;
import com.aldorsolutions.webfdms.beans.DbVitalsDeceased;
import com.aldorsolutions.webfdms.beans.DbVitalsFirstCall;
import com.aldorsolutions.webfdms.beans.FdmsDb;
import com.aldorsolutions.webfdms.common.Constants;
import com.aldorsolutions.webfdms.database.DatabaseTransaction;
import com.aldorsolutions.webfdms.database.PersistenceException;
import com.aldorsolutions.webfdms.reporting.dao.ERegisterBookDAO;
import com.aldorsolutions.webfdms.security.bean.SecurityManagerBean;
import com.aldorsolutions.webfdms.security.model.SecurityConfigDTO;
import com.aldorsolutions.webfdms.util.DAO;
import com.aldorsolutions.webfdms.util.FormatDate;
import com.aldorsolutions.webfdms.util.SessionHelpers;
import com.google.zxing.BarcodeFormat;
import com.google.zxing.client.j2se.MatrixToImageWriter;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.qrcode.QRCodeWriter;

import fdms.ui.struts.form.ERegisterBookForm;
import fdms.util.CommonUtil;
import fdms.util.FileUtil;


/** 
 * MyEclipse Struts
 * Creation date: 04-17-2007
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 * @struts.action-forward name="failed" path="/login.jsp"
 * @struts.action-forward name="success" path="/main.jsp"
 */
public class  ShowERegisterBook extends Action {
	/*
	 * Generated Methods
	 */
	
	private Logger logger = Logger.getLogger(ShowERegisterBook.class.getName());

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm actionForm, HttpServletRequest request,
			HttpServletResponse response) throws javax.servlet.ServletException, java.io.IOException {
		

		ERegisterBookForm form = (ERegisterBookForm) actionForm;
		ActionErrors errors = new ActionErrors();
		HttpSession session = request.getSession();
		DbUserSession sessionUser = SessionHelpers.getUserSession(request);
		DbServices srv = null;
		DbCase caseinfo = null;
		DbObituary obituary = null;
		DbVitalsFirstCall firstCall = null;
		DatabaseTransaction t = null;
		DbVitalsDeceased vitalsDeceased = null;
		FdmsDb fdmsdb = null;
		
		int vitalsId = SessionHelpers.getVitalsIdFromSession(request, sessionUser);
		String operate = request.getParameter("direction");
		if (operate == null) {
			operate = "edit";
		}
		
		MessageResourcesFactory messageFactory = null;
    	messageFactory = (PropertyMessageResourcesFactory) PropertyMessageResourcesFactory.createFactory();
		MessageResources resources = messageFactory.createResources("ApplicationResources");
		
		String imageAccessUrl = resources.getMessage("nfs.file.access.url");
		String serviceAnnouncerUrl = resources.getMessage("service.announcer.screen.url");
		
		request.setAttribute("imageAccessUrl", imageAccessUrl);
		request.setAttribute("serviceAnnouncerUrl", serviceAnnouncerUrl);

		ERegisterBookDAO regBookDAo = new ERegisterBookDAO(DAO.DB_FDMSSHARE);
		ERegisterBookDTO data = new ERegisterBookDTO();
		data = regBookDAo.getERegisterBook(sessionUser.getCompanyID(),vitalsId);

		String pathForFileUpload = FileUtil.pathForFileUpload(sessionUser);
		
		String absoluteFilePath = getServlet().getServletConfig().getServletContext().getRealPath("/");
		
		absoluteFilePath += pathForFileUpload;
		
		ERegisterThemeDAO themeDao = new ERegisterThemeDAO(DAO.DB_FDMSCOMMON);
		
		form.setThemes(themeDao.getAllThemes());
		
		ERegisterBackgroundThemeDAO backgroundThemeDao = new ERegisterBackgroundThemeDAO(DAO.DB_FDMSCOMMON);
		
		form.setBackgroundThemes(backgroundThemeDao.getAllBackgroundThemes());
		
		form.setServiceScreenThemeId(5);
		
		ServiceScreenThemeDAO serviceScreenThemes = new ServiceScreenThemeDAO(DAO.DB_FDMSCOMMON);
		
		form.setServiceScreenThemes(serviceScreenThemes.getAllServiceScreenThemes());
		
		int locationNumber = 0;
		int localeNumber = 0;

		try {
			t = (DatabaseTransaction) DatabaseTransaction.getTransaction(sessionUser);
			fdmsdb = FdmsDb.getInstance();
			
			caseinfo = fdmsdb.getCase(t, vitalsId);
			firstCall = fdmsdb.getVitalsFirstCall(t, vitalsId);
			vitalsDeceased = fdmsdb.getVitalsDeceased(t,vitalsId);
			obituary = FdmsDb.getInstance().getObituary(t, vitalsId);
			
			localeNumber = caseinfo.getLocale();
			locationNumber = caseinfo.getChapelNumber();
			
			SecurityManagerBean smBean = new SecurityManagerBean();
            SecurityConfigDTO security = smBean.getSecurityConfig(sessionUser.getCompanyID());

			if(data != null){
				form.setRegisterId(data.getRegisterId());
				form.setCompanyId(data.getCompanyId());
				form.setLocaleId(localeNumber);
				form.setLocationId(locationNumber);
				form.setCaseId(data.getCaseId());
				form.setArrangerId(firstCall.getArrangerID());
				form.setRegBookHeader(data.getRegBookHeader());
				form.setServiceMessage(data.getServiceMessage());
				form.setVideolink(data.getVideolink());
				form.setTargetWebPage(security.getERegisterBookURL());
				form.setImageLink(data.getImageLink());
				form.setFullName(data.getFullName());
				form.setLocaleName(data.getLocaleName());
				form.setLocationName(data.getLocationName());

				ERegisterImageMappingDAO imageMappingDao = new ERegisterImageMappingDAO(DAO.DB_FDMSSHARE);

				form.setLogoDto(imageMappingDao.getImagesForERegisterByCaseAndCategory(data.getCaseId(), data.getCompanyId(), Constants.IMAGE_TYPE_LOGO).get(0));
                form.setDecedentDto(imageMappingDao.getImagesForERegisterByCaseAndCategory(data.getCaseId(), data.getCompanyId(), Constants.IMAGE_TYPE_DECEDENT).get(0));
                
                List<Object> imageLibrary = imageMappingDao.getImagesForERegisterByCaseAndCategory(data.getCaseId(), data.getCompanyId(), Constants.IMAGE_TYPE_PRESENTATION);
                form.setImageLibrary(imageLibrary);
				
                form.setThemeId(CommonUtil.getThemeId(imageLibrary));
                
                form.setLogoMap(imageMappingDao.getImageMappingMap(data.getCaseId(), data.getCompanyId(), Constants.IMAGE_TYPE_LOGO));
                form.setDecedentMap(imageMappingDao.getImageMappingMap(data.getCaseId(), data.getCompanyId(), Constants.IMAGE_TYPE_DECEDENT));
                form.setPresentationMap(imageMappingDao.getImageMappingMap(data.getCaseId(), data.getCompanyId(), Constants.IMAGE_TYPE_PRESENTATION));
                
                form.setQrCodePath(imageAccessUrl + data.getQrCodePath() + "qrcode.jpg");
                
                form.setDateOfBirth(data.getDateOfBirth());
                form.setDateOfDeath(data.getDateOfDeath());
                
                form.setBackgroundThemeId(data.getBackgroundThemeId());
				form.setServiceScreenThemeId(data.getServiceScreenThemeId());
				
				if(obituary != null && obituary.getObituaryLink() != null) {
					form.setObitLink(obituary.getObituaryLink());
				}
				
				String dob = vitalsDeceased.getDateOfBirth();
				String dod = vitalsDeceased.getDateOfDeath();
				
				String descriptiveDate;
				
				if(dob != null && dob.length() > 0) {
					String dobMMDDYYYY = FormatDate.MDYtoMMDDYYYY(vitalsDeceased.getDateOfBirth());
					
					descriptiveDate = FormatDate.convertDateToMonthString(FormatDate.convertToDate(dobMMDDYYYY)) + " " + FormatDate.getDayFromMMDDYYYY(dob) + ", " + FormatDate.getYearFromMMDDYYYY(dob);
					
					form.setDateOfBirth(descriptiveDate);
				}
				
				if(dod != null && dod.length() > 0) {
					String dodMMDDYYYY = FormatDate.MDYtoMMDDYYYY(vitalsDeceased.getDateOfDeath());
					
					descriptiveDate = FormatDate.convertDateToMonthString(FormatDate.convertToDate(dodMMDDYYYY)) + " " + FormatDate.getDayFromMMDDYYYY(dod) + ", " + FormatDate.getYearFromMMDDYYYY(dod);
					
					form.setDateOfDeath(descriptiveDate);
				}
			} else {
				DbLocation dbLocation = fdmsdb.getLocation(t, locationNumber);
				
				form.setRegisterId(0);
				form.setCompanyId(sessionUser.getCompanyID());
				form.setLocaleId(localeNumber);
				form.setLocationId(locationNumber);
				form.setCaseId(vitalsId);
				form.setArrangerId(firstCall.getArrangerID());
				
				if(obituary != null && obituary.getObituaryLink() != null) {
					form.setObitLink(obituary.getObituaryLink());
				}
				
				String dob = vitalsDeceased.getDateOfBirth();
				String dod = vitalsDeceased.getDateOfDeath();
				
				String descriptiveDate;
				
				if(dob != null && dob.length() > 0) {
					String dobMMDDYYYY = FormatDate.MDYtoMMDDYYYY(vitalsDeceased.getDateOfBirth());
					
					descriptiveDate = FormatDate.convertDateToMonthString(FormatDate.convertToDate(dobMMDDYYYY)) + " " + FormatDate.getDayFromMMDDYYYY(dob) + ", " + FormatDate.getYearFromMMDDYYYY(dob);
					
					form.setDateOfBirth(descriptiveDate);
				}
				
				if(dod != null && dod.length() > 0) {
					String dodMMDDYYYY = FormatDate.MDYtoMMDDYYYY(vitalsDeceased.getDateOfDeath());
					
					descriptiveDate = FormatDate.convertDateToMonthString(FormatDate.convertToDate(dodMMDDYYYY)) + " " + FormatDate.getDayFromMMDDYYYY(dod) + ", " + FormatDate.getYearFromMMDDYYYY(dod);
					
					form.setDateOfDeath(descriptiveDate);
				}
				//form.setDateOfBirth(FormatDate.convertDateToSHORT(FormatDate.convertToDate(FormatDate.MDYtoMMDDYYYY(vitalsDeceased.getDateOfBirth()))));
				
				DbVitalsDeceased deceased = null;
				deceased = fdmsdb.getVitalsDeceased(t, vitalsId);
				//String name = "Lorem ipsum "+deceased.getDecFullName()+" Lorem ipsum.";
				
				String name = resources.getMessage("eregister.default.message", deceased.getDecFName());
				
				form.setRegBookHeader(name);
				
				StringBuffer serviceMessage = new StringBuffer();
				
				srv = fdmsdb.getServices(t,vitalsId);
				
				if(srv != null) {
					if(srv.getServiceTime() != null) {
						serviceMessage.append("Service time: ").append(srv.getServiceTime());
						
						if(srv.getCSrvPlace() != null) {
							serviceMessage.append(" at ").append(srv.getCSrvPlace());
						}
					} else if(srv.getCSrvPlace() != null) {
						serviceMessage.append("Service location: ").append(srv.getCSrvPlace());
					}

					form.setServiceMessage(serviceMessage.toString());
				} else {
					form.setServiceMessage("");
				}
				
				form.setVideolink("");
				form.setImageLink("");
				form.setFullName(deceased.getFirstName()+" "+deceased.getMiddleName()+" "+deceased.getLastName());
				form.setLocationName(dbLocation.getName());
				form.setLocaleName(sessionUser.getLocaleName());
//				if (dbLocation.getWebsite() == null){
//					form.setTargetWebPage("");
//				}else {
//					//form.setTargetWebPage(dbLocation.getWebsite()+"/"+dbLocation.getERegisterTargetPage());
//				}
				
                form.setTargetWebPage(security.getERegisterBookURL());
                
                int imagesRequired = 6;

                themeDao = new ERegisterThemeDAO(DAO.DB_FDMSCOMMON);

                ERegisterThemeDTO defaultTheme = themeDao.getThemeByDesc("Default");
                
                form.setThemeId(defaultTheme.getThemeId());
                
                PresentationImageDAO presentationImageDao = new PresentationImageDAO(DAO.DB_FDMSCOMMON);
                
                ERegisterBackgroundThemeDTO backgroundThemeDto = backgroundThemeDao.getThemeByDesc("Default");
                
                form.setBackgroundThemeId(backgroundThemeDto.getThemeId());
                
                ServiceScreenThemeDTO defaultServiceTheme = serviceScreenThemes.getAllServiceScreenThemes().get(0);
                
                form.setServiceScreenThemeId(defaultServiceTheme.getThemeId());
                
                if(form.getLogoMap() != null) {
                	form.setLogoMap(null);
                	form.setDecedentMap(null);
                	form.setPresentationMap(null);
                }
                
                form.setLogoDto(presentationImageDao.getRandomImages(form.getThemeId(), 1).get(0));
                
                form.setDecedentDto(presentationImageDao.getRandomImages(form.getThemeId(), 1).get(0));
                
                form.setImageLibrary((List<Object>) presentationImageDao.getRandomImages(form.getThemeId(), imagesRequired));
                
                String relativeWebPath = "fdms/";

                //String absoluteFilePath = getServlet().getServletContext().getRealPath(relativeWebPath);

                absoluteFilePath = getServlet().getServletConfig().getServletContext().getRealPath(relativeWebPath);
                
                /*****/
                
    			String relativePath = FileUtil.getPathForQRCode(sessionUser);
    			
    			/****/

                File dirName = new File(absoluteFilePath + "/" + relativePath);
                
                if(!dirName.exists()) {
                	dirName.mkdirs();
                }
                
                String qrCodeName = "qrcode.jpg";

                /*String absoluteFilePath = getServletContext().getRealPath(relativeWebPath);*/
                File uploadedFile = new File(dirName, qrCodeName);
                
                String eregisterMobiUrl = resources.getMessage("eregister.mobi.url");
                
                String text = eregisterMobiUrl + "?CompanyId=" + form.getCompanyId() + "&CaseId=" + form.getCaseId() + "&ThemeId=" + form.getBackgroundThemeId();

                int thumbnailDim = Integer.parseInt(resources.getMessage("thumbnail.image.width"));

                String imageFormat = "png"; // could be "gif", "tiff", "jpeg"
                
                FileOutputStream fileOutputStream = new FileOutputStream(uploadedFile);

                BitMatrix bitMatrix = new QRCodeWriter().encode(text, BarcodeFormat.QR_CODE, thumbnailDim, thumbnailDim);
                MatrixToImageWriter.writeToStream(bitMatrix, imageFormat, fileOutputStream);
                
                fileOutputStream.close();
                
                form.setQrCodePath(relativeWebPath + relativePath + qrCodeName);
			}
		} catch (PersistenceException e) {
			logger.error("PersistenceException in ShowERegisterBook:execute() : ", e);
		} catch (Exception ex) {
			logger.error("Exception in ShowERegisterBook:execute() : ", ex);
		} finally {
			if (t != null)
				t.closeConnection();
		}
		//set initial
		request.setAttribute("eRegisterBookForm", form);
		return ( mapping.findForward("showERegisterBookJsp") );
	}
	

}