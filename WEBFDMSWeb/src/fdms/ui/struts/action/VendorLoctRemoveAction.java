/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package fdms.ui.struts.action;

import java.util.ArrayList;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;


import fdms.ui.struts.form.VendorLoctRemoveForm;

import com.aldorsolutions.webfdms.beans.DbUserSession;
import com.aldorsolutions.webfdms.checkwriter.dao.ApVendorLocationDAO;
import com.aldorsolutions.webfdms.checkwriter.model.ApVendorLocationDTO;
import com.aldorsolutions.webfdms.util.FormatNumber;
import com.aldorsolutions.webfdms.util.SessionValueKeys;

/** 
 * MyEclipse Struts
 * Creation date: 06-28-2007
 * 
 * XDoclet definition:
 * @struts.action path="/vendorLocRemove" name="vendorLocRemoveForm" input="/acct/vendorLocRemove.jsp" scope="request" validate="true"
 * @struts.action-forward name="showDelete" path="acct.vendorLocRemove"
 */
public class VendorLoctRemoveAction extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		VendorLoctRemoveForm vendorLoctRemoveForm = (VendorLoctRemoveForm) form;// TODO Auto-generated method stub

		HttpSession session = request.getSession();
		DbUserSession user = (DbUserSession) session.getAttribute(SessionValueKeys.DB_USER);

		ApVendorLocationDAO vendorLocDao = new ApVendorLocationDAO(user);
		String vendorLocationIDStr = request.getParameter("vendorLocationID");
		ActionErrors errors = new ActionErrors();

		long vendorLocID = FormatNumber.parseLong(vendorLocationIDStr);

		if (vendorLocID <= 0) {
			String missingLoc = getResources(request).getMessage("error.acct.vendor.missingVendor");

			errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.exception", missingLoc));
			saveErrors(request, errors);

			session.setAttribute("sessionVendorID", String.valueOf(vendorLocID));
			//request.setAttribute("vendorID", String.valueOf(vendorLocRemoveForm.getVendorID()) );		
			request.setAttribute("vendorID", String.valueOf(vendorLocID));
			return mapping.findForward("showVendorEditDisplay");
		} 
		
	
			ApVendorLocationDTO vendorLoc = vendorLocDao.getApVendorLocation(vendorLocID);
			
			long vendorID = vendorLoc.getVendorID();
			
			ArrayList<ApVendorLocationDTO> locationlist = (ArrayList) vendorLocDao.getApVendorLocationByVendorID(vendorLoc.getVendorID());
			if (locationlist.size() > 1) {
			
				vendorLocDao.deleteApVendorLocation(vendorLocID);
			}
			else {
				String cannotRemove = getResources(request).getMessage("error.acct.vendor.RemoveLastLocation");
				errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.exception", "cannot remove"));			
				saveErrors(request, errors);
				session.setAttribute("sessionVendorID", String.valueOf(vendorID));
				//request.setAttribute("vendorID", String.valueOf(vendorLocRemoveForm.getVendorID()) );		
				request.setAttribute("vendorID", String.valueOf(vendorID));
				return mapping.findForward("showVendorEditDisplay");		
				
			}

		
			session.setAttribute("sessionVendorID", String.valueOf(vendorID));
			//request.setAttribute("vendorID", String.valueOf(vendorLocRemoveForm.getVendorID()) );		
			request.setAttribute("vendorID", String.valueOf(vendorID));
			return mapping.findForward("showVendorEditDisplay");
		
	}
}