/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 * CJongs
 */
package fdms.ui.struts.action;

import java.util.ArrayList;
import java.util.Locale;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;

import com.aldorassist.webfdms.model.LocaleDTO;
import com.aldorsolutions.webfdms.beans.DbCase;
import com.aldorsolutions.webfdms.beans.DbLocation;
import com.aldorsolutions.webfdms.beans.DbUser;
import com.aldorsolutions.webfdms.beans.DbUserSession;
import com.aldorsolutions.webfdms.beans.DbVitalsFirstCall;
import com.aldorsolutions.webfdms.beans.FdmsDb;
import com.aldorsolutions.webfdms.common.Constants;
import com.aldorsolutions.webfdms.database.DatabaseTransaction;
import com.aldorsolutions.webfdms.database.PersistenceException;
import com.aldorsolutions.webfdms.locale.bean.LocaleManagerBean;
import com.aldorsolutions.webfdms.util.FormatNumber;
import com.aldorsolutions.webfdms.util.SessionHelpers;
import com.aldorsolutions.webfdms.util.UtilSingleton;

import fdms.ui.struts.form.MovingCaseForm;


/** 
 * MyEclipse Struts
 * Creation date: 04-17-2007
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 * @struts.action-forward name="failed" path="/login.jsp"
 * @struts.action-forward name="success" path="/main.jsp"
 */
public class  ProcessMovingCase extends Action {
	/*
	 * Generated Methods
	 */
	
	private Logger logger = Logger.getLogger(ShowMovingCase.class.getName());

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm actionForm, HttpServletRequest request,
			HttpServletResponse response) throws javax.servlet.ServletException, java.io.IOException {
		

		MovingCaseForm form = (MovingCaseForm) actionForm;
		ActionErrors errors = new ActionErrors();
		HttpSession session = request.getSession();
		DbUserSession sessionUser = SessionHelpers.getUserSession(request);
		int vitalsId = SessionHelpers.getVitalsIdFromSession(request, sessionUser);
		

		//set initial
		form.setVitalsId(vitalsId);
		DbCase theCase = null;
		DbVitalsFirstCall firstCall = null;
		DatabaseTransaction t = null;
		try {
			t = (DatabaseTransaction)DatabaseTransaction.getTransaction(sessionUser);
			theCase 	= FdmsDb.getInstance().getCase(t,vitalsId);
			firstCall	= FdmsDb.getInstance().getVitalsFirstCall(t,vitalsId);
			form.setFirstname(theCase.getFirstName());
			form.setLastname(theCase.getLastName());
			form.setDirector(firstCall.getArrangerName());
			form.setChapelname(theCase.getChapelLocation());
			if ( form.getUserLocaleId() == null ||form.getUserLocaleId().length() == 0) {
				form.setUserLocaleId(Integer.toString(theCase.getLocale()));
			}
			if (form.getUserLocationId() == null || form.getUserLocationId().length() == 0) {
				form.setUserLocationId(Integer.toString(theCase.getChapelNumber()));
			}
			
			if (form.getOperate() != null && form.getOperate().compareToIgnoreCase("edit") == 0){
				form.setUserLocaleId(form.getUserLocaleId());
				changeLocale(form, sessionUser,session,errors,request);
				
			}
			
		} catch(PersistenceException pe) {
            logger.error("Persistence Exception in ShowCaseStatus.doPerform. " + pe);
        } catch(Exception pe) {
            logger.error("Exception in ShowCaseStatus.doPerform. ", pe);
        } finally {
            if (t != null) {
            	t.closeConnection();
            	t = null;
            }
        }
		
        request.setAttribute("movingCaseForm",form);
		return ( mapping.findForward("showMovingCaseJsp") );
	}
	
	private void changeLocation(MovingCaseForm form, DbUserSession sessionUser) {
	
		logger.debug("Updating userDefaultLocation : " + form.getUserLocationId());
		sessionUser.setLocationId(FormatNumber.parseInteger(form.getUserLocationId()));

	}

	private void changeLocale(MovingCaseForm form, DbUserSession sessionUser, HttpSession session, ActionErrors errors, HttpServletRequest request) {

		ArrayList userLocales = (ArrayList) session.getAttribute(Constants.USER_LOCALES);

		if (userLocales != null) {

			DatabaseTransaction t = null;
			DatabaseTransaction trans = null;

			try {
				// Get a new database transaction.
				String jndiLookup = UtilSingleton.getInstance().getUserDBLookup();

				t = (DatabaseTransaction) DatabaseTransaction.getTransaction(sessionUser, jndiLookup);
				trans = (DatabaseTransaction) DatabaseTransaction.getTransaction(sessionUser);

				DbUser user = (DbUser) sessionUser;

				t.addPersistent(user);

//				user.setRegion(Integer.parseInt(form.getUserLocaleId()));
//				sessionUser.setRegion(Integer.parseInt(form.getUserLocaleId()));

				LocaleManagerBean lmb = new LocaleManagerBean(user);
				LocaleDTO locale = lmb.getLocale(user.getRegion());

    			Locale myLocale = new Locale("en", locale.getCountry());
    			session.setAttribute( Constants.INTERNATIONAL_LOCALE, myLocale );
    			

    			form.setUserLocationId("-1");
				
				String[] locationIds = (String[]) session.getAttribute(Constants.USER_LOCATION_IDS);
				DbLocation[] dbLocations = FdmsDb.getInstance().getLocationsForRegion(trans, user.getRegion());

				ArrayList <DbLocation> userLocaleLocs = new ArrayList <DbLocation>();

				if (dbLocations != null) {
					for (int i = 0; i < dbLocations.length; i++) {
						DbLocation loc = dbLocations[i];
						int locID = loc.getId();

						for (int x = 0; x < locationIds.length; x++) {
							int aLocID = Integer.parseInt(locationIds[x]);

							if (aLocID == locID) {
								userLocaleLocs.add(loc);
							}
						}

					}
				}
				
				
				session.setAttribute(Constants.USER_LOCATIONS, userLocaleLocs);
				form.setUserLocationId(String.valueOf(userLocaleLocs.get(0).getId()));
				t.save();

			} catch (PersistenceException ex) {
				errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.internal"));
	            saveErrors(request, errors);
				logger.error("Persistence Exception in ShowCaseList.doPerform. ", ex);
			} catch (Exception ex) {
				errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.internal"));
	            saveErrors(request, errors);
				logger.error("Exception in ShowCaseList.doPerform. ", ex);
			} finally {
				if (t != null) {
					t.closeConnection();
				}

				if (trans != null) {
					trans.closeConnection();
				}
			}

		} else {
			logger.debug("Unable to find USER_LOCALES in session");
		}

		changeLocation(form, sessionUser);
	}

	
}